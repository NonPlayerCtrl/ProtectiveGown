<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="CoE_BasicAxis_FB" Id="{31160c58-faa2-0975-2872-a10f5a052209}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC CoE_BasicAxis_FB EXTENDS BasicAxis_FB  
VAR_INPUT
	io_StatusWord : UINT;	
END_VAR
VAR_IN_OUT
	
END_VAR

VAR_OUTPUT	
	OperationMode : USINT :=8;
END_VAR

VAR
	CoeErrIdIndex		: WORD;
	CoeErrIdSubIndex	: BYTE;
		
	CoeRead_RatedTorque			: UDINT;
	CoeRead_RatedCurrent		: UDINT;					
	UsintValue					: USINT;// For read write sdo
	UdintValue					: UDINT;// For read write sdo
	UintValue					: UINT;// For read write sdo
	Ulong						: ULINT;
	LRealValue					: LREAL;// For read write sdo
	RealValue					: REAL;// For read write sdo
	ReadObjError                : BOOL;
	FB_EcCoeSdoWrite			: FB_EcCoESdoWrite;
	//
	CoEDrive_Ctrl_Adr:    CoEDrive_Ctrl_Adr_typ;
	
	Homing_Ctrl_Params: Homing_CoE_Ctrl_Paramters_typ;
	
	NextState    : INT;
	ErrorOnState : INT;
	InitCanOpenAdr: BOOL := FALSE;
 
	//FOE
	FOE_Ctrl_Paramters: CoE_FOE_Ctrl_typ;		
	FOE_Ctrl_UpdateFW:  CoE_FOE_Ctrl_typ;
	
	 LogText		: STRING(500);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

IF InitCanOpenAdr = FALSE THEN
	GetCanOpenAdr();
	InitCanOpenAdr := TRUE;
END_IF

SUPER^(AxisRef:=AxisRef);
FB_EcCoeSdoWrite();	// For Meth_ChangingOperationMode. Need to change to EcCoeSdoWrite !!! 
ReadActualTorque() ;
ReadActualCurrent() ;
//FOE
Meth_FOE_fbCalls();
]]></ST>
    </Implementation>
    <Folder Name="Homing" Id="{fc4df5dc-127d-0c86-1942-389cb86c7dbf}" />
    <Folder Name="MonitorMethods" Id="{1586f2ea-871c-49dd-8f83-7172ad4285d4}" />
    <Folder Name="ServiceFBs" Id="{97a31d45-7ce2-4fc1-989d-67f6376ef77b}" />
    <Method Name="CreateDriveErrMsgDetails" Id="{e52b2f3f-2dd1-052d-2cf7-74e11b737e32}">
      <Declaration><![CDATA[METHOD CreateDriveErrMsgDetails : enumMotorEvents
VAR_INPUT
	ErrorId			: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'ErrorId %d  ',UDINT_TO_DINT(ErrorId),0,0);
//Etz to do
CreateDriveErrMsgDetails := enumMotorEvents.NoEvents;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveErrorHandling" Id="{47bddcea-5dda-0a48-21ff-90b2d71f0a5c}">
      <Declaration><![CDATA[METHOD DriveErrorHandling : BOOL

VAR_INST
	ErrHandState	: INT;
	
	FB_SoEReset_0	: FB_SoEReset;
	FB_EcSoERead_DriveError		: FB_EcSoERead;
	tmpDriveErrorId				: UDINT;
	LastError       			: UDINT; 
	LastErrorCounter            : UDINT := 0; 
	FB_EcCoeSdoRead_DriveError	: FB_EcCoeSdoRead;
	MC_Reset_0					: MC_Reset;
	tmpErrorEntry			: Eh_ErrorEntry_typ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

CASE ErrHandState OF
	0: // logic init
		GetErrCanAdr();	
		ErrHandState	:= 200;
		
		
	//************************* CAN Logic **********************************************
	200: // wait errors
		{warning disable C0371}
		IF AxisRef.Status.DriveDeviceError THEN
			(*IF AxisCtrlPtr^.Output.Status.Drive.ActiveHW AND io_HW_State <> 8 THEN
				 tmp_ErrorEntry.ErrorText	:= AxisCtrlPtr^.Input.Parameter.ThreadName;
				 tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText,'Drive Not In OP ');
				 tmp_ErrorEntry.MotorEvents  :=enumMotorEvents.DriveComError ;
				 fnLogMsg(ADR(LogMsg_0),LOG_ERROR,tmp_ErrorEntry.ErrorText,0,0,0);
				 		
				 AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);	
				
				 ErrHandState	:= 205;
			ELSE*)
				FB_SoEReset_0.Execute				:= FALSE;
				FB_EcSoERead_DriveError.bExecute	:= FALSE;
				ErrHandState	:= 210;
	
		//	END_IF	
		
		ELSIF AxisRef.NcToPlc.ErrorCode <> 0 
			AND AxisRef.NcToPlc.ErrorCode <> 18000 THEN
			// ETZ Axis.NcToPlc.ErrorCode
			ErrHandState	:= 300;
		ELSIF AxisCtrlPtr^.Output.Error.fbErrorHandler.EntriesCount > 0 THEN
			// do nothing
		END_IF
	
		IF AxisRef.Status.DriveDeviceError = FALSE THEN
			LastError := 0;
			LastErrorCounter := 0;
		END_IF
		{warning restore C0371}
	205: // Wait for OP
		IF io_HW_State = 8 THEN
			ErrHandState	:= 200;
		END_IF
	210: // wait speed decrease
		IF AxisCtrlPtr^.Output.monitor.ActVelocity < 500 THEN
			ErrHandState	:= 211;	// read can error
		END_IF
		
	211:// read error according to drive Error Index
		
		// Fix link problem
		IF strEcNetId= '' AND (AxisCtrlPtr^.Input.Parameter.ecNetIdArr[4]<>0 OR AxisCtrlPtr^.Input.Parameter.ecNetIdArr[5]<>0) THEN
			strEcNetId:= F_CreateAmsNetId(AxisCtrlPtr^.Input.Parameter.ecNetIdArr);
		END_IF	

		FB_EcCoeSdoRead_DriveError.sNetId		:= strEcNetId;
		FB_EcCoeSdoRead_DriveError.nSlaveAddr	:= AxisCtrlPtr^.Input.Parameter.Drive.EtherCatAddr;
		FB_EcCoeSdoRead_DriveError.nIndex		:= CoeErrIdIndex; 
		FB_EcCoeSdoRead_DriveError.nSubIndex	:= CoeErrIdSubIndex; 
		FB_EcCoeSdoRead_DriveError.pDstBuf		:= ADR(tmpDriveErrorId);
		FB_EcCoeSdoRead_DriveError.cbBufLen		:= SIZEOF(tmpDriveErrorId);
		FB_EcCoeSdoRead_DriveError.tTimeout		:= T#10S;
		
		FB_EcCoeSdoRead_DriveError.bExecute		:= TRUE;
		
		ErrHandState	:= 212;
	212:
		IF NOT FB_EcCoeSdoRead_DriveError.bBusy THEN
			FB_EcCoeSdoRead_DriveError.bExecute		:= FALSE;
			IF NOT FB_EcCoeSdoRead_DriveError.bError THEN
				// Add Drive Error to ErrorHandler
				tmp_ErrorEntry.ErrorId		:= tmpDriveErrorId;
			//	IF LastError <>  tmp_ErrorEntry.ErrorId OR LastErrorCounter > 100 THEN
					tmp_ErrorEntry.ErrorText	:= AxisCtrlPtr^.Input.Parameter.ThreadName;
					tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText,' Drive ErrorID: ');
					tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, UDINT_TO_STRING(tmp_ErrorEntry.ErrorId));
					tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, ', Or 0x');
					tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, UDINT_TO_HEX_STRING(tmp_ErrorEntry.ErrorId));
					
					tmp_ErrorEntry.MotorEvents  := CreateDriveErrMsgDetails(tmp_ErrorEntry.ErrorId);
					fnLogMsg(ADR(LogMsg_0),LOG_ERROR,tmp_ErrorEntry.ErrorText,0,0,0);
					//ETZ to Add method for Log			
					AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);
					LastError :=  tmp_ErrorEntry.ErrorId;
					LastErrorCounter := 0;
			(*	ELSE
					LastErrorCounter := LastErrorCounter + 1;	
				END_IF*)
				
		
			ELSE // IF bError
				fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NO LINKS FOR DRIVE',0,0,0);				 
			END_IF
			ErrHandState	:= 300;	// MC_Reset
		END_IF
 
	300: // Run MC_Reset
		MC_Reset_0.Execute	:= TRUE;
		ErrHandState		:= 301;
	301:
		{warning disable C0371}
		IF MC_Reset_0.Done 
			AND AxisRef.NcToPlc.ErrorCode = 0
			(*AND Axis.Status.DriveDeviceError = FALSE*) THEN
			MC_Reset_0.Execute	:= FALSE;
	
			ErrHandState	:= 0;
		
		ELSIF MC_Reset_0.Error THEN
			MC_Reset_0.Execute	:= FALSE;
			// Add FB Error to ErrorHandler
			tmp_ErrorEntry.ErrorId		:= MC_Reset_0.ErrorID;
			tmp_ErrorEntry.ErrorText	:= 'FB MC_Reset_0 ErrorID: ';
			tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, UDINT_TO_STRING(tmp_ErrorEntry.ErrorId));
			AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);
			
			ErrHandState	:= 0;
		END_IF
		{warning restore C0371}
		
		IF (AxisCtrlPtr^.Output.Status.CommunicationError = TRUE) THEN
			MC_Reset_0.Execute	:= FALSE;
			ErrHandState		:= 400;	
		END_IF
		
		IF NOT AxisCtrlPtr^.Output.Status.DriveEnable THEN
			MC_Reset_0.Execute	:= FALSE;
			ErrHandState		:= 500;	
		END_IF
	400:
		IF (AxisCtrlPtr^.Output.Status.CommunicationError = FALSE) THEN
			ErrHandState	:= 300;	
		END_IF
	500:
		IF AxisCtrlPtr^.Output.Status.DriveEnable THEN
			MC_Reset_0.Execute	:= FALSE;
			ErrHandState		:= 200;	
		END_IF
	
END_CASE

FB_EcSoERead_DriveError();
FB_EcCoeSdoRead_DriveError();
{warning disable C0371}
FB_SoEReset_0(Axis:= AxisRef);
MC_Reset_0(Axis:= AxisRef);
{warning restore C0371}

]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveHomeAbsSwitch" Id="{7e909122-ac1d-0c58-2256-21ba2c1c4aa6}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD PROTECTED DriveHomeAbsSwitch : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
	
	HomeSwState: INT; 
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF HomeRefTrig.EDGEPOS(Execute) THEN
	HomeSwState := 1;
	DriveHomeAbsSwitch := FALSE;
END_IF


IF HomeRefTrig.EDGENEG(Execute) THEN
	
	HomeSwState := 0;
END_IF



CASE HomeSwState OF
	0:
		DriveHomeAbsSwitch := FALSE;
	1:

		IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.ePOSITIVE THEN
		//Sensor positive
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE THEN
				Homing_Ctrl_Params.HomingMethod := DINT_TO_SINT(eHomingMethods.HomeAbs);
			ELSE
				Homing_Ctrl_Params.HomingMethod := DINT_TO_SINT(eHomingMethods.ForwardOnNegSw);
			END_IF
		ELSE//Direction negative
			
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE THEN
				Homing_Ctrl_Params.HomingMethod := DINT_TO_SINT(eHomingMethods.ReverseOnPosSw);
			ELSE
				Homing_Ctrl_Params.HomingMethod := DINT_TO_SINT(eHomingMethods.ReverseOnNegSw);
			END_IF
				
		END_IF
		

		HomeSwState := 2;
		Meth_Homing(FALSE);
	2:
		IF Meth_Homing(TRUE) THEN
		  Meth_Homing(FALSE);		  
		  HomeSwState := 3;
		END_IF
		
	3:
				//homin direct
		(*IF HomeDirect(TRUE) THEN*)   		 
			Meth_CoEChangOperationMode(FALSE,eCaOpDriveModeOfOperation.CyclicSyncMode);
			
			DriveHomeAbsSwitch := TRUE;
		//END_IF	
		
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveHomeLagError" Id="{60e61dad-550e-0c55-275c-4a77a8e7d583}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD DriveHomeLagError : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
//	State:INT;	
//	HomeTrig: Trigger;
//	Reset:BOOL;	
//	Delay:	TON;	
	HomeLagErrState: INT; 	
	LagErrorPrevState : INT;
	
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF HomeRefTrig.EDGEPOS(Execute) THEN
	HomeLagErrState := 1;
	DriveHomeLagError := FALSE;
END_IF


IF HomeRefTrig.EDGENEG(Execute) THEN
	
	HomeLagErrState := 0;
END_IF



CASE HomeLagErrState OF
	0:
	//
	
	//CoEDrive_Ctrl_Adr.MaxCurrent.Index
	1:
	// set min torque
		FB_EcCoeSdoWrite.bExecute := FALSE;
		
		HomeLagErrState := HomeLagErrState + 1;
	2:
		
			FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
			FB_EcCoeSdoWrite.nSlaveAddr	:= io_EtherCatAddr;
			FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.MaxCurrent.Index; 
			FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.MaxCurrent.SunIndex; 
			FB_EcCoeSdoWrite.pSrcBuf	:= ADR(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockSearchMaxCurrent);
			FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockSearchMaxCurrent);
			FB_EcCoeSdoWrite.tTimeout	:= T#10S;
	
			FB_EcCoeSdoWrite.bExecute := TRUE;
			
			HomeLagErrState := HomeLagErrState + 1;
	3:
			
	
			IF NOT FB_EcCoeSdoWrite.bBusy THEN	
				IF NOT FB_EcCoeSdoWrite.bError THEN
					FB_EcCoeSdoWrite.bExecute		:= FALSE;
					HomeLagErrState :=  HomeLagErrState + 1;
				ELSE
					HomeLagErrState := 20;//error	
				END_IF	
			END_IF
			
	4:
		
			FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
			FB_EcCoeSdoWrite.nSlaveAddr	:= io_EtherCatAddr;
			FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.MaxCurrent.Index; 
			FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.MaxCurrent.SunIndex; 
			FB_EcCoeSdoWrite.pSrcBuf	:= ADR(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockSearchRatedCurrent);
			FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockSearchRatedCurrent);
			FB_EcCoeSdoWrite.tTimeout	:= T#10S;
	
			FB_EcCoeSdoWrite.bExecute := TRUE;
			
			HomeLagErrState := HomeLagErrState + 1;
	5:
			
	
			IF NOT FB_EcCoeSdoWrite.bBusy THEN	
				IF NOT FB_EcCoeSdoWrite.bError THEN
					FB_EcCoeSdoWrite.bExecute		:= FALSE;
					HomeLagErrState :=  HomeLagErrState + 1;
				ELSE
					HomeLagErrState := 22;//error	
				END_IF	
			END_IF
			
			
	6:
		
			FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
			FB_EcCoeSdoWrite.nSlaveAddr	:= io_EtherCatAddr;
			FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.PositionErrorWin.Index; 
			FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.PositionErrorWin.SunIndex; 
			FB_EcCoeSdoWrite.pSrcBuf	:= ADR(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockSearchPositionWindow);
			FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockSearchPositionWindow);
			FB_EcCoeSdoWrite.tTimeout	:= T#10S;
	
			FB_EcCoeSdoWrite.bExecute := TRUE;
			
			HomeLagErrState := HomeLagErrState + 1;
	7:
			
	
			IF NOT FB_EcCoeSdoWrite.bBusy THEN	
				IF NOT FB_EcCoeSdoWrite.bError THEN
					FB_EcCoeSdoWrite.bExecute		:= FALSE;
					HomeLagErrState :=  HomeLagErrState + 1;
				ELSE
					HomeLagErrState := 20;//error	
				END_IF	
			END_IF		
			
			
	8:	
		IF WriteNC_AxisBoolParam(MC_AxisParameter:=MC_AxisParameter.EnablePosLagMonitoring,ParamValue:=FALSE) THEN
				HomeLagErrState := HomeLagErrState + 1;
			END_IF		
		
	
	9:
	

		IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.ePOSITIVE THEN
		//Sensor positive
 				Homing_Ctrl_Params.HomingMethod := DINT_TO_SINT(eHomingMethods.HarsrStopPosDir);
			ELSE
				Homing_Ctrl_Params.HomingMethod := DINT_TO_SINT(eHomingMethods.HarsrStopNegDir);			
		END_IF
		

		HomeLagErrState :=  HomeLagErrState + 1;
		Meth_Homing(FALSE);
	10:
		IF Meth_Homing(TRUE) THEN
		  Meth_Homing(FALSE);		
 		  HomeLagErrState :=  HomeLagErrState + 1;
		  AxisCtrlPtr^.Input.Command.Power := FALSE;
		END_IF
	11:
			FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
			FB_EcCoeSdoWrite.nSlaveAddr	:= io_EtherCatAddr;
			FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.MaxCurrent.Index; 
			FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.MaxCurrent.SunIndex; 
			FB_EcCoeSdoWrite.pSrcBuf	:= ADR(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockSearchMaxCurrent);
			FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockSearchMaxCurrent);
			FB_EcCoeSdoWrite.tTimeout	:= T#10S;
	
			FB_EcCoeSdoWrite.bExecute := TRUE;
			
			HomeLagErrState := HomeLagErrState + 1;	
		
	12:
			IF NOT FB_EcCoeSdoWrite.bBusy THEN	
				IF NOT FB_EcCoeSdoWrite.bError THEN
					FB_EcCoeSdoWrite.bExecute		:= FALSE;
					HomeLagErrState :=  HomeLagErrState + 1;
				ELSE
					HomeLagErrState := 20;//error	
				END_IF	
			END_IF	
			
	13:
			FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
			FB_EcCoeSdoWrite.nSlaveAddr	:= io_EtherCatAddr;
			FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.PositionErrorWin.Index; 
			FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.PositionErrorWin.SunIndex; 
			FB_EcCoeSdoWrite.pSrcBuf	:= ADR(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockExitPositionWindow);
			FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockExitPositionWindow);;
			FB_EcCoeSdoWrite.tTimeout	:= T#10S;
	
			FB_EcCoeSdoWrite.bExecute := TRUE;
			
			HomeLagErrState := HomeLagErrState + 1;	
		
	14:
			IF NOT FB_EcCoeSdoWrite.bBusy THEN	
				IF NOT FB_EcCoeSdoWrite.bError THEN
					FB_EcCoeSdoWrite.bExecute		:= FALSE;
					HomeLagErrState :=  HomeLagErrState + 1;
				ELSE
					HomeLagErrState := 20;//error	
				END_IF	
			END_IF	

	15:
		
			FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
			FB_EcCoeSdoWrite.nSlaveAddr	:= io_EtherCatAddr;
			FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.MaxCurrent.Index; 
			FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.MaxCurrent.SunIndex; 
			FB_EcCoeSdoWrite.pSrcBuf	:= ADR(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockExitRatedCurrent);
			FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.BlockExitRatedCurrent);
			FB_EcCoeSdoWrite.tTimeout	:= T#10S;
	
			FB_EcCoeSdoWrite.bExecute := TRUE;
			
			HomeLagErrState := HomeLagErrState + 1;
	16:
			
	
			IF NOT FB_EcCoeSdoWrite.bBusy THEN	
				IF NOT FB_EcCoeSdoWrite.bError THEN
					FB_EcCoeSdoWrite.bExecute		:= FALSE;
					HomeLagErrState :=  HomeLagErrState + 1;
				ELSE
					HomeLagErrState := 22;//error	
				END_IF	
			END_IF

		
	17:	
 		AxisCtrlPtr^.Input.Command.Power := TRUE;
		DriveHomeLagError:= TRUE;
	
		
END_CASE

	IF LagErrorPrevState <> HomeLagErrState THEN
		fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Coe Basic Drive Lag Err step %d',HomeLagErrState,0,0);
		LagErrorPrevState := HomeLagErrState;
	END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveHomeRefPulse" Id="{69b1a1d7-6947-06c2-3b96-c65decbf147d}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD PROTECTED DriveHomeRefPulse : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
	 
	RefState: INT; 
	PrevRefState : INT;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF HomeRefTrig.EDGEPOS(Execute) THEN
	RefState := 1;
	DriveHomeRefPulse := FALSE;
END_IF


IF HomeRefTrig.EDGENEG(Execute) THEN
	
	RefState := 0;
END_IF



CASE RefState OF
	0:
		DriveHomeRefPulse := FALSE;
	1:
 
		IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.ePOSITIVE THEN
			Homing_Ctrl_Params.HomingMethod := DINT_TO_SINT(eHomingMethods.IndexPulsePosDir);
		ELSE
			Homing_Ctrl_Params.HomingMethod := DINT_TO_SINT(eHomingMethods.IndexPulseNegDir);
		END_IF	
		RefState := RefState  +1 ;
		Meth_Homing(FALSE);
	2:
		IF Meth_Homing(TRUE) THEN
		  Meth_Homing(FALSE);
		  RefState := RefState  +1 ;
		  DriveHomeRefPulse := TRUE;
		END_IF
	3:
				//homin direct
	//	IF HomeDirect(TRUE) THEN   		 
			Meth_CoEChangOperationMode(FALSE,eCaOpDriveModeOfOperation.CyclicSyncMode);
			RefState := RefState  +1 ;
	//	END_IF
	
	4: 	
	   	  DriveHomeRefPulse := TRUE;
		
		
		
END_CASE


	IF PrevRefState <> RefState THEN
		fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Coe Basic Home Ref Pulse step %d',RefState,0,0);
		PrevRefState := RefState;
	END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveUnitsTorqueToRealValue" Id="{70fbef17-cca2-404a-b860-204ed6cd227f}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD DriveUnitsTorqueToRealValue : LREAL
VAR_INPUT
	
	Torque: LREAL;	

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DriveUnitsTorqueToRealValue := Torque;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EcCoeSdoRead" Id="{bb0e02b2-72a6-061d-0efe-9499ba8371be}">
      <Declaration><![CDATA[METHOD EcCoeSdoRead : BOOL
VAR_INPUT
	Execute: 	BOOL;
END_VAR

VAR_INST
	CoReaderrorTrig: 		Trigger ;	
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF CoReaderrorTrig.EDGEPOS(Execute) THEN
	EcCoeSdoRead:= FALSE;
	StateCoeSdoRead	:= 1;		
END_IF

IF CoReaderrorTrig.EDGENEG(Execute) THEN
	
	CoeSdoRW.Output.Read.Done 	:= FALSE;
	FB_EcCoeSdoRead_0.bExecute 	:= FALSE;
	StateCoeSdoRead		:= 0;	
	EcCoeSdoRead		:= FALSE;
	
END_IF


CASE StateCoeSdoRead OF
	
	0:
		// Wait	
	1:
		FB_EcCoeSdoRead_0.sNetId		:= F_CreateAmsNetId(AxisCtrlPtr^.Input.Parameter.ecNetIdArr); 
		FB_EcCoeSdoRead_0.nSlaveAddr	:= io_EtherCatAddr;
		FB_EcCoeSdoRead_0.nSubIndex		:= CoeSdoRW.Input.Read.nSubIndex;
		FB_EcCoeSdoRead_0.nIndex		:= CoeSdoRW.Input.Read.nIndex; 
		FB_EcCoeSdoRead_0.pDstBuf		:= CoeSdoRW.Input.Read.pDstBuf; 
		FB_EcCoeSdoRead_0.cbBufLen		:= CoeSdoRW.Input.Read.cbBufLen; 
		FB_EcCoeSdoRead_0.tTimeout		:= CoeSdoRW.Input.Read.tTimeout; 
		StateCoeSdoRead	:= 2;
		FB_EcCoeSdoRead_0.bExecute		:= FALSE;
		
	2:	

		FB_EcCoeSdoRead_0.bExecute		:= TRUE;	
		IF (FB_EcCoeSdoRead_0.bBusy = TRUE) THEN
			StateCoeSdoRead	:= 3;	
		END_IF

	3:	
		IF (FB_EcCoeSdoRead_0.bBusy = FALSE) THEN
			
			CoeSdoRW.Output.Read.Done	:= TRUE;
			EcCoeSdoRead	:= TRUE;
			StateCoeSdoRead	:= 4;	
		END_IF
	
	4:	
		FB_EcCoeSdoRead_0.bExecute	:= FALSE;
		EcCoeSdoRead	:= TRUE;
	
		
END_CASE

FB_EcCoeSdoRead_0();

(* check if error occured *)
IF errorTrig.EDGEPOS(FB_EcCoeSdoRead_0.bError) THEN
	
	// Add FB Error to ErrorHandler	
	AddNCError(FB_EcCoeSdoRead_0.nErrId,'NC Error FB_EcCoeSdoRead_0 ErrorID: ');
	
	EcCoeSdoRead :=  FALSE ;
	FB_EcCoeSdoRead_0.bExecute := FALSE;
END_IF

CoeSdoRW.Output.Read.Busy	:= FB_EcCoeSdoRead_0.bBusy;


]]></ST>
      </Implementation>
    </Method>
    <Method Name="EcCoeSdoWrite" Id="{d989307c-0db7-0f22-265c-3fb6f778aedb}">
      <Declaration><![CDATA[METHOD EcCoeSdoWrite : BOOL
VAR_INPUT
	Execute: 	BOOL;
END_VAR

VAR_INST
	CanOpWriteErrorTrig: 		Trigger ;	
	
END_VAR
VAR_OUTPUT	
	Error: 	BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF CanOpWriteErrorTrig.EDGEPOS(Execute) THEN
	EcCoeSdoWrite		:= FALSE;
	StateCoeSdoWrite	:= 1;		
	Error 				:= FALSE;
END_IF

IF CanOpWriteErrorTrig.EDGENEG(Execute) THEN
	
	CoeSdoRW.Output.Write.Done 	:= FALSE;
	FB_EcCoeSdoWrite_0.bExecute := FALSE;
	StateCoeSdoWrite	:= 0;	
	EcCoeSdoWrite		:= FALSE;
	
END_IF


CASE StateCoeSdoWrite OF
	
	0:
		// Wait	
	1:										   
		FB_EcCoeSdoWrite_0.sNetId		:= F_CreateAmsNetId(AxisCtrlPtr^.Input.Parameter.ecNetIdArr); 
		FB_EcCoeSdoWrite_0.nSlaveAddr	:= AxisCtrlPtr^.Input.Parameter.Drive.EtherCatAddr;
		FB_EcCoeSdoWrite_0.nSubIndex	:= CoeSdoRW.Input.Write.nSubIndex;
		FB_EcCoeSdoWrite_0.nIndex		:= CoeSdoRW.Input.Write.nIndex; 
		FB_EcCoeSdoWrite_0.pSrcBuf		:= CoeSdoRW.Input.Write.pSrcBuf; 
		FB_EcCoeSdoWrite_0.cbBufLen		:= CoeSdoRW.Input.Write.cbBufLen; 
		FB_EcCoeSdoWrite_0.tTimeout		:= CoeSdoRW.Input.Write.tTimeout; 
		StateCoeSdoWrite	:= 2;	
	2:	

		FB_EcCoeSdoWrite_0.bExecute		:= TRUE;	
		IF (FB_EcCoeSdoWrite_0.bBusy = TRUE) THEN
			StateCoeSdoWrite	:= 3;	
		END_IF

	3:	
		IF (FB_EcCoeSdoWrite_0.bBusy = FALSE) THEN
			FB_EcCoeSdoWrite_0.bExecute		:= FALSE;
			CoeSdoRW.Output.Write.Done		:= TRUE;
			EcCoeSdoWrite		:= TRUE;
			StateCoeSdoWrite	:= 4;	
		ELSIF FB_EcCoeSdoWrite_0.bError THEN
			Error := TRUE;
		END_IF
	4:
		EcCoeSdoWrite		:= TRUE;
	
	
END_CASE

FB_EcCoeSdoWrite_0();

(* check if error occured *)
IF errorTrig.EDGEPOS(FB_EcCoeSdoWrite_0.bError) THEN
	
	// Add FB Error to ErrorHandler	
	AddNCError(FB_EcCoeSdoWrite_0.nErrId,'NC Error FB_EcCoeSdoWrite_0 ErrorID: ');
	
	EcCoeSdoWrite :=  FALSE ;
	FB_EcCoeSdoWrite_0.bExecute := FALSE;
END_IF

CoeSdoRW.Output.Write.Busy	:= FB_EcCoeSdoWrite_0.bBusy;


]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCanOpenAdr" Id="{0b152ae3-27f1-0672-1b6c-5b4ffb3f7aec}">
      <Declaration><![CDATA[METHOD GetCanOpenAdr : BOOL
VAR_INPUT
END_VAR


VAR
	
	SpeedSwSubIndex: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	
	CoEDrive_Ctrl_Adr.OperationMode.Index 	   := 16#6060;
	CoEDrive_Ctrl_Adr.OperationMode.SunIndex   := 0;
	CoEDrive_Ctrl_Adr.OperationMode.Size	   := 1;

	CoEDrive_Ctrl_Adr.ControlWord.Index   	 := 16#6040;	
	CoEDrive_Ctrl_Adr.ControlWord.SunIndex   := 0;
	CoEDrive_Ctrl_Adr.ControlWord.Size       := 2;
	
	
	CoEDrive_Ctrl_Adr.HomingMethod.Index  := 16#6098;
	CoEDrive_Ctrl_Adr.HomingMethod.SunIndex  := 0;
	CoEDrive_Ctrl_Adr.HomingMethod.Size      := 1;
	
	
	CoEDrive_Ctrl_Adr.HomingSWSpeed.Index     := 16#6099;		
	CoEDrive_Ctrl_Adr.HomingSWSpeed.SunIndex  := 1;
	CoEDrive_Ctrl_Adr.HomingSWSpeed.Size      := 4;
	
	
	CoEDrive_Ctrl_Adr.HomingTrSpeed.Index    := 16#6099;
	CoEDrive_Ctrl_Adr.HomingTrSpeed.SunIndex := 2;
	CoEDrive_Ctrl_Adr.HomingTrSpeed.Size     := 4;
	
	
	
	CoEDrive_Ctrl_Adr.HomingAcc.Index     	 := 16#609A;
	CoEDrive_Ctrl_Adr.HomingAcc.SunIndex  	 := 0;
	CoEDrive_Ctrl_Adr.HomingAcc.Size      := 4;
	
	CoEDrive_Ctrl_Adr.HomeOffset.Index    	 := 16#607C;
	CoEDrive_Ctrl_Adr.HomeOffset.SunIndex  	 := 0;
	CoEDrive_Ctrl_Adr.HomeOffset.Size      := 4;

	
	CoEDrive_Ctrl_Adr.StatusWord.Index     := 16#6041;
	CoEDrive_Ctrl_Adr.StatusWord.SunIndex  := 0;
	CoEDrive_Ctrl_Adr.StatusWord.Size      := 2;
	
	CoEDrive_Ctrl_Adr.PositionErrorWin.Index 	:= 16#6065;
	CoEDrive_Ctrl_Adr.PositionErrorWin.SunIndex := 	0;	
	CoEDrive_Ctrl_Adr.PositionErrorWin.Size 	:= 4;     
	
	
	CoEDrive_Ctrl_Adr.MaxTorque.Index 	  := 16#6072;
	CoEDrive_Ctrl_Adr.MaxTorque.SunIndex  := 0;
	CoEDrive_Ctrl_Adr.MaxTorque.Size      := 2;
	
	CoEDrive_Ctrl_Adr.MaxCurrent.Index 	  := 16#6073;
	CoEDrive_Ctrl_Adr.MaxCurrent.SunIndex  := 0;
	CoEDrive_Ctrl_Adr.MaxCurrent.Size      := 2;
	
	CoEDrive_Ctrl_Adr.RatedCurrent.Index     := 16#6075;
	CoEDrive_Ctrl_Adr.RatedCurrent.SunIndex  := 0;
	CoEDrive_Ctrl_Adr.RatedCurrent.Size      := 4;
	
 
	
	

	
	CoEDrive_Ctrl_Adr.TorqueOffset.Index 	 := 16#60B2; // integer 16
	CoEDrive_Ctrl_Adr.TorqueOffset.SunIndex  := 0;
	CoEDrive_Ctrl_Adr.TorqueOffset.Size      := 2;


	
	
    //VeloctyCtrlTN]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetErrCanAdr" Id="{78899767-e8f0-0c27-1aaa-0f532e3e5b65}">
      <Declaration><![CDATA[METHOD GetErrCanAdr : BOOL
VAR_INPUT
END_VAR


VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CoeErrIdIndex	:= 16#603F;
		

]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsHomingAttained" Id="{f8e64ef0-f1eb-064c-1027-dcc30c48db4c}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD IsHomingAttained : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	

IF io_StatusWord.12 <>0 THEN
	IsHomingAttained :=TRUE;
ELSE
	IsHomingAttained :=FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_ChangingOperationMode" Id="{247f6851-7af0-09b8-16c8-41669b71eedd}">
      <Declaration><![CDATA[METHOD Meth_ChangingOperationMode : BOOL
VAR_INPUT
	Execute   : BOOL;
	OperMode : eDriveModeOfOperation; 
	
END_VAR
VAR_INST
	
	CngOperState : INT;
	Mode      : USINT;	
END_VAR

VAR
	
	ChangeDone : BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ChangeModeOperTrig.EDGEPOS(Execute) THEN

	Meth_ChangingOperationMode := FALSE;				
	Mode := DINT_TO_USINT(OperMode);
	ChangeDone := FALSE;
	CngOperState := 1;

	
END_IF


IF ChangeModeOperTrig.EDGENEG(Execute) THEN
	
	CngOperState := 0;
END_IF



CASE CngOperState OF
	0:
		Meth_CoEChangOperationMode(FALSE,eCaOpDriveModeOfOperation.ProfilePositionMode);
		
	1: 
		//Meth_CoEChangOperationMode
		CASE OperMode OF
			eDriveModeOfOperation.ProfilePositionMode				:
				IF Meth_CoEChangOperationMode(TRUE,eCaOpDriveModeOfOperation.ProfilePositionMode) THEN
					ChangeDone := TRUE;
				END_IF
				
		    eDriveModeOfOperation.VelocityCtrMode    				:
				IF Meth_CoEChangOperationMode(TRUE,eCaOpDriveModeOfOperation.VelocityCtrMode)THEN
					ChangeDone := TRUE;
				END_IF
		    eDriveModeOfOperation.ProfileVelocityMode 	   	    :
				IF Meth_CoEChangOperationMode(TRUE,eCaOpDriveModeOfOperation.ProfileVelocityMode) THEN
					ChangeDone := TRUE;
				END_IF
				
		    eDriveModeOfOperation.TorqueVelocityMode 				:
				IF Meth_CoEChangOperationMode(TRUE,eCaOpDriveModeOfOperation.TorqueVelocityMode) THEN
					ChangeDone := TRUE;
				END_IF
				
		    eDriveModeOfOperation.HomingMode				    	:
				IF Meth_CoEChangOperationMode(TRUE,eCaOpDriveModeOfOperation.HomingMode)THEN
					ChangeDone := TRUE;
				END_IF
				
		    eDriveModeOfOperation.InterpolationPosMode			:
				IF Meth_CoEChangOperationMode(TRUE,eCaOpDriveModeOfOperation.InterpolationPosMode) THEN
					ChangeDone := TRUE;
				END_IF
		    eDriveModeOfOperation.CyclicSyncMode					:
				Meth_CoEChangOperationMode(TRUE,eCaOpDriveModeOfOperation.CyclicSyncMode);
		END_CASE
		CngOperState := 2;

	2:
 		Meth_ChangingOperationMode := TRUE;
		
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_CngMaxTorque" Id="{e02fccbc-8a05-41c0-a248-6cf34536c6f5}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_CngMaxTorque : BOOL
VAR_INPUT
	Execute   : BOOL;
	Value	  : LREAL;
END_VAR


VAR


	
END_VAR
VAR_INST
	//
	CngMaxTorqueTrigger : Trigger ;
	CngMaxTorqueState   : SINT;	
	
END_VAR


VAR_OUTPUT
	Error : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF CngMaxTorqueTrigger.EDGEPOS(Execute) THEN
	Meth_CngMaxTorque := FALSE;
	CngMaxTorqueState := 1;
END_IF


IF CngMaxTorqueTrigger.EDGENEG(Execute) THEN
	CngMaxTorqueState := 0;
	Meth_CngMaxTorque := FALSE;
	EcCoeSdoWrite(FALSE);

END_IF

IF NOT AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN// SIM
	Meth_CngMaxTorque := TRUE;
ELSE


CASE CngMaxTorqueState OF 
	0:
	
		Meth_CngMaxTorque := FALSE;
	1:
		
		CoeSdoRW.Input.Write.nIndex    := CoEDrive_Ctrl_Adr.MaxTorque.Index;	  
		CoeSdoRW.Input.Write.nSubIndex := CoEDrive_Ctrl_Adr.MaxTorque.SunIndex;
		UintValue := LREAL_TO_UINT(Meth_TorqueInDriveUnits( Value));
		CoeSdoRW.Input.Write.pSrcBuf   :=   ADR(UintValue); 	 
		CoeSdoRW.Input.Write.cbBufLen  := SIZEOF(UintValue)  ; 
		 
		IF EcCoeSdoWrite(TRUE , Error=> Error ) THEN
			
			CngMaxTorqueState := CngMaxTorqueState +1;
		END_IF
	
	2:
		Meth_CngMaxTorque := TRUE;

END_CASE

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_CngTorqueOffset" Id="{aba8acbd-b661-4a8c-9c66-985dd07ddf7b}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_CngTorqueOffset : BOOL
VAR_INPUT
	Execute   : BOOL;
	Value	  : LREAL;
END_VAR

VAR_INST
		//
	CngTorqueOffsetTrigger : Trigger ;
	CngTorqueOffsetState   : SINT;	
	
END_VAR
 
VAR_OUTPUT
	Error : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF CngTorqueOffsetTrigger.EDGEPOS(Execute) THEN
	Meth_CngTorqueOffset := FALSE;
	CngTorqueOffsetState := 1;	
END_IF


IF CngTorqueOffsetTrigger.EDGENEG(Execute) THEN
	CngTorqueOffsetState := 0;
	Meth_CngTorqueOffset := FALSE;
	EcCoeSdoWrite(FALSE);

END_IF
IF NOT AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN// SIM
	Meth_CngTorqueOffset := TRUE;
ELSE


CASE CngTorqueOffsetState OF 
	0:
		Meth_CngTorqueOffset := FALSE;
	1:
		
		CoeSdoRW.Input.Write.nIndex    := CoEDrive_Ctrl_Adr.TorqueOffset.Index ;		
		CoeSdoRW.Input.Write.nSubIndex := CoEDrive_Ctrl_Adr.TorqueOffset.SunIndex; 	
	    CoeSdoRW.Input.Write.cbBufLen  := CoEDrive_Ctrl_Adr.TorqueOffset.Size;     	
		UintValue := LREAL_TO_UINT(Meth_TorqueInDriveUnits( Value));
		CoeSdoRW.Input.Write.pSrcBuf   :=   ADR(UintValue); 	 	 
		 
		IF EcCoeSdoWrite(TRUE , Error=> Error ) THEN
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Meth Change torque Offset %d After convert',UintValue,0,0);
			CngTorqueOffsetState := CngTorqueOffsetState +1;
		END_IF
	
	2:
		Meth_CngTorqueOffset := TRUE;

END_CASE

END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_CoEChangOperationMode" Id="{4652d566-d460-492c-bee0-1e0da7fb862b}">
      <Declaration><![CDATA[METHOD Meth_CoEChangOperationMode : BOOL
VAR_INPUT
	Execute   : BOOL;	
	OperMode :eCaOpDriveModeOfOperation; 
END_VAR
VAR_INST
	ConfigHomeTrig  : 	Trigger;
	CngOperState : INT;
	Mode      : USINT;	
END_VAR

VAR
	
	
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ConfigHomeTrig.EDGEPOS(Execute) THEN

	Meth_CoEChangOperationMode := FALSE;				
	Mode := DINT_TO_USINT(OperMode);

	CngOperState := 1;
END_IF


IF ConfigHomeTrig.EDGENEG(Execute) THEN
	
	CngOperState := 0;
END_IF



CASE CngOperState OF
	0:
		FB_EcCoeSdoWrite.bExecute := FALSE;
		Meth_CoEChangOperationMode := 0;
	1: 
		IF NOT FB_EcCoeSdoWrite.bBusy THEN	
			//Config homing mehod
			FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
			FB_EcCoeSdoWrite.nSlaveAddr	:= io_EtherCatAddr;
			FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.OperationMode.Index; 
			FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.OperationMode.SunIndex; 
			FB_EcCoeSdoWrite.pSrcBuf	:= ADR(Mode);
			FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(Mode);
			FB_EcCoeSdoWrite.tTimeout	:= T#10S;
			
			FB_EcCoeSdoWrite.bExecute		:= TRUE;
		END_IF
		CngOperState := 2;

	2:
		IF NOT FB_EcCoeSdoWrite.bBusy THEN	
			IF NOT FB_EcCoeSdoWrite.bError THEN
				FB_EcCoeSdoWrite.bExecute		:= FALSE;				
				Meth_CoEChangOperationMode := TRUE;
			ELSE
				fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NO LINKS FOR DRIVE',0,0,0);	
				Meth_CoEChangOperationMode := FALSE;		
			END_IF	
			
		END_IF	
		
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_ConfigHomeParamters" Id="{5dbacdaf-320f-00bd-0f26-06ed9d2773f7}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD Meth_ConfigHomeParamters : BOOL
VAR_INPUT
	Execute   : BOOL;	
END_VAR
VAR_INST
	ConfigHomeTrig  : 	Trigger;
	ConfigHomeState : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ConfigHomeTrig.EDGEPOS(Execute) THEN

	Meth_ConfigHomeParamters := FALSE;				


	ConfigHomeState := 1;
END_IF


IF ConfigHomeTrig.EDGENEG(Execute) THEN
	
	ConfigHomeState := 0;
END_IF


CASE ConfigHomeState OF
	0:
		FB_EcCoeSdoWrite.bExecute := FALSE;
	1: 
			
		//Config homing mehod
		FB_EcCoeSdoWrite.sNetId			:= strEcNetId;
		FB_EcCoeSdoWrite.nSlaveAddr		:= WORD_TO_UINT(io_EtherCatAddr);
		FB_EcCoeSdoWrite.nIndex			:= CoEDrive_Ctrl_Adr.HomingMethod.Index; 
		FB_EcCoeSdoWrite.nSubIndex		:= CoEDrive_Ctrl_Adr.HomingMethod.SunIndex; 
		FB_EcCoeSdoWrite.pSrcBuf		:= ADR(Homing_Ctrl_Params.HomingMethod);
		FB_EcCoeSdoWrite.cbBufLen		:= SIZEOF(Homing_Ctrl_Params.HomingMethod);
		FB_EcCoeSdoWrite.tTimeout		:= T#10S;
		
		FB_EcCoeSdoWrite.bExecute		:= TRUE;
		
		ConfigHomeState := 12;
		
		NextState := 2;
	2: //Config Homing SW Speed
	
		FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
		FB_EcCoeSdoWrite.nSlaveAddr	:= WORD_TO_UINT(io_EtherCatAddr);
		FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.HomingSWSpeed.Index; 
		FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.HomingSWSpeed.SunIndex; 
		FB_EcCoeSdoWrite.pSrcBuf	:= ADR(Homing_Ctrl_Params.HomingSWSpeed);
		FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(Homing_Ctrl_Params.HomingSWSpeed);
		FB_EcCoeSdoWrite.tTimeout	:= T#10S;
		
		FB_EcCoeSdoWrite.bExecute		:= TRUE;
		
		ConfigHomeState := 12;
		
		NextState := 3;
	3: //Config Homing Trigger Speed
		FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
		FB_EcCoeSdoWrite.nSlaveAddr	:= WORD_TO_UINT(io_EtherCatAddr);
		FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.HomingTrSpeed.Index; 
		FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.HomingTrSpeed.SunIndex; 
		FB_EcCoeSdoWrite.pSrcBuf	:= ADR(Homing_Ctrl_Params.HomingTrSpeed);
		FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(Homing_Ctrl_Params.HomingTrSpeed);
		FB_EcCoeSdoWrite.tTimeout	:= T#10S;
		
		FB_EcCoeSdoWrite.bExecute		:= TRUE;


		
		ConfigHomeState := 12;
		
		NextState := 4;
		
	4:	//Config Homing SW Acc
	
		FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
		FB_EcCoeSdoWrite.nSlaveAddr	:= WORD_TO_UINT(io_EtherCatAddr);
		FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.HomingAcc.Index; 
		FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.HomingAcc.SunIndex; 
		FB_EcCoeSdoWrite.pSrcBuf	:= ADR(Homing_Ctrl_Params.HomingAcc);
		FB_EcCoeSdoWrite.cbBufLen	:= SIZEOF(Homing_Ctrl_Params.HomingAcc);
		FB_EcCoeSdoWrite.tTimeout	:= T#10S;
		
		FB_EcCoeSdoWrite.bExecute		:= TRUE;
		ConfigHomeState := 12;
		
		NextState := 5;
	5://Config Offset
		FB_EcCoeSdoWrite.sNetId		:= strEcNetId;
		FB_EcCoeSdoWrite.nSlaveAddr	:=  WORD_TO_UINT(io_EtherCatAddr);
		FB_EcCoeSdoWrite.nIndex		:= CoEDrive_Ctrl_Adr.HomeOffset.Index; 
		FB_EcCoeSdoWrite.nSubIndex	:= CoEDrive_Ctrl_Adr.HomeOffset.SunIndex; 
		FB_EcCoeSdoWrite.pSrcBuf		:= ADR(Homing_Ctrl_Params.HomingOffset);
		FB_EcCoeSdoWrite.cbBufLen		:= SIZEOF(Homing_Ctrl_Params.HomingOffset);
		FB_EcCoeSdoWrite.tTimeout		:= T#10S;
		
		FB_EcCoeSdoWrite.bExecute		:= TRUE;

	
		ConfigHomeState := 12;
		
		NextState := 6;

	6://Done
		Meth_ConfigHomeParamters := TRUE;
	12:
		IF NOT FB_EcCoeSdoWrite.bBusy THEN	
			IF NOT FB_EcCoeSdoWrite.bError THEN
				FB_EcCoeSdoWrite.bExecute		:= FALSE;
				ConfigHomeState := NextState;
			ELSE
				NextState := 20;//error	
			END_IF	
			
		END_IF	
		
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_DriveFWUpdate" Id="{f9a6ae01-2701-0a09-235d-5a055f159a02}">
      <Declaration><![CDATA[METHOD Meth_DriveFWUpdate : BOOL
VAR_INPUT
	Execute:		BOOL;
END_VAR
VAR_INST
	UpdateDriveParamsTrig  : 	Trigger;
	UpdateFWState : INT;
	
	 
END_VAR	
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF UpdateDriveParamsTrig.EDGEPOS(Execute) THEN
	
	UpdateFWState := 0;
	AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus := enum_DriveUpdateStatus.NoAction;
	AxisCtrlPtr^.Output.monitor.FileUpdate.FileUpdate_Error   := 	enum_DriveUpdateError.NoError;
	AxisCtrlPtr^.Output.monitor.FileUpdate.ErrorID := 0;
END_IF



CASE UpdateFWState OF 
	0://init -wait	

		
		UpdateFWState:=UpdateFWState +1;
	
	1://read Version Drive Param Version	
		// := 'Read Version';			
							
		CoeSdoRW.Input.Read.nIndex 	  := CoEDrive_Ctrl_Adr.FWVersionObj.Index; 
		CoeSdoRW.Input.Read.nSubIndex := CoEDrive_Ctrl_Adr.FWVersionObj.SunIndex;
		CoeSdoRW.Input.Read.pDstBuf	  := ADR(FOE_Ctrl_UpdateFW.Version_From_Drive);
 		CoeSdoRW.Input.Read.cbBufLen  := SIZEOF(FOE_Ctrl_UpdateFW.Version_From_Drive);  

		FOE_Ctrl_UpdateFW.fbFileOpen.bExecute    := FALSE;
		FOE_Ctrl_UpdateFW.fbFileClose.bExecute   := FALSE;
		FOE_Ctrl_UpdateFW.fbEcFoeLoad_0.bExecute := FALSE;
		EcCoeSdoRead(FALSE);
		FOE_Ctrl_UpdateFW.Foe_File_Path:=	AxisCtrlPtr^.Input.Parameter.Drive.sFoeFWFile_Path;
		UpdateFWState:= UpdateFWState +1;

		
	2://Download to Drive 
		// := 'Download to Drive';
		IF EcCoeSdoRead(TRUE) THEN		
  				
			AxisCtrlPtr^.Output.Status.Drive.ParamVer:=	FOE_Ctrl_UpdateFW.Version_From_Drive;	
			IF AxisCtrlPtr^.Output.Status.Drive.ParamVer <> AxisCtrlPtr^.Input.Parameter.Drive.LatestParamVer THEN				
				AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus:= enum_DriveUpdateStatus.Checking;
				UpdateFWState:=UpdateFWState +1;
			ELSE
				AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus:= enum_DriveUpdateStatus.Updated;
				UpdateFWState:=	100;										
			END_IF
						
		END_IF
		
	3: 
		
						
		FOE_Ctrl_UpdateFW.fbFileOpen.sNetId		:= ''; 
		FOE_Ctrl_UpdateFW.fbFileOpen.sPathName		:=FOE_Ctrl_UpdateFW.Foe_File_Path; 
		FOE_Ctrl_UpdateFW.fbFileOpen.nMode			:=FOPEN_MODEREAD; 
		FOE_Ctrl_UpdateFW.fbFileOpen.ePath			:=PATH_GENERIC ;
		
		FOE_Ctrl_UpdateFW.fbFileOpen.bExecute:=	TRUE; 

		UpdateFWState:=UpdateFWState +1;
	4:
		//Check Valid file Path
		// := 'Cheack Valid Path';
		
		IF FOE_Ctrl_UpdateFW.fbFileOpen.bBusy =FALSE AND FOE_Ctrl_UpdateFW.fbFileOpen.bError =FALSE THEN 
			FOE_Ctrl_UpdateFW.hFile := FOE_Ctrl_UpdateFW.fbFileOpen.hFile;
			FOE_Ctrl_UpdateFW.fbFileOpen.bExecute:=	FALSE;
			UpdateFWState:=UpdateFWState +1;
			
			
			
			
		ELSIF FOE_Ctrl_UpdateFW.fbFileOpen.bError =TRUE THEN 
			AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus 			  :=	enum_DriveUpdateStatus.Error;
			AxisCtrlPtr^.Output.monitor.FileUpdate.FileUpdate_Error   := 	enum_DriveUpdateError.FileNotFound;
			AxisCtrlPtr^.Output.monitor.FileUpdate.ErrorID 			  :=    FOE_Ctrl_UpdateFW.fbFileOpen.nErrId;
			UpdateFWState:=	11;				
		END_IF	
	5:
			FOE_Ctrl_UpdateFW.fbFileClose.bExecute:=	TRUE;	
			UpdateFWState:=UpdateFWState +1;
	6:	
		// := 'Close path';
		
		IF FOE_Ctrl_UpdateFW.fbFileClose.bBusy =FALSE AND FOE_Ctrl_UpdateFW.fbFileClose.bError =FALSE THEN 
			FOE_Ctrl_UpdateFW.fbFileClose.bExecute:=FALSE;	
			UpdateFWState:=UpdateFWState +1;

			
	
		ELSIF FOE_Ctrl_UpdateFW.fbFileClose.bError =TRUE THEN 
			AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus :=	enum_DriveUpdateStatus.Error;
			AxisCtrlPtr^.Output.monitor.FileUpdate.FileUpdate_Error   := 	enum_DriveUpdateError.FileClosedFailed;
			
			AxisCtrlPtr^.Output.monitor.FileUpdate.ErrorID:= FOE_Ctrl_UpdateFW.fbFileClose.nErrId;	
			UpdateFWState:=	12;	
		END_IF
		
	7:	
		// := 'Foe Read';
		
		FOE_Ctrl_UpdateFW.fbEcFoeLoad_0.bExecute:=TRUE;
		AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus:= enum_DriveUpdateStatus.UpDating;
		UpdateFWState:=UpdateFWState +1;
		
	8:		
	//	St_Elomo_Drive_List[Index].Progress:=FB_EcFoeLoad_0.nProgress;
		// := 'Load file';
		IF FOE_Ctrl_UpdateFW.fbEcFoeLoad_0.bBusy =FALSE THEN 		
			FOE_Ctrl_UpdateFW.fbEcFoeLoad_0.bExecute:=FALSE;		
			IF FOE_Ctrl_UpdateFW.fbEcFoeLoad_0.bError THEN 
				AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus :=	enum_DriveUpdateStatus.Error;				
				AxisCtrlPtr^.Output.monitor.FileUpdate.ErrorID:= FOE_Ctrl_UpdateFW.fbEcFoeLoad_0.nErrId;								
				AxisCtrlPtr^.Output.monitor.FileUpdate.FileUpdate_Error   := 	enum_DriveUpdateError.FileClosedFailed;
				UpdateFWState:=	130;
			ELSE
				UpdateFWState:=	100;
				AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus:= enum_DriveUpdateStatus.Updated;
			END_IF
						
		END_IF
		
	100:
		// := 'Load Done';

		

		Meth_DriveFWUpdate:=		TRUE;
	
END_CASE
//St_Elomo_Drive_List[Index].Status_String:=Local_Status_String[St_Elomo_Drive_List[Index].Update_Staus];


]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_FOE_fbCalls" Id="{1dc68652-c7ed-029e-1d2a-a37afe19e8c9}">
      <Declaration><![CDATA[METHOD Meth_FOE_fbCalls : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOE_Ctrl_Paramters.fbFileOpen(
	(*
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	hFile=> *)
); 



FOE_Ctrl_Paramters.fbFileClose(	
	hFile:= FOE_Ctrl_Paramters.hFile , 
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );




FOE_Ctrl_Paramters.fbEcFoeLoad_0(	sNetId:=F_CreateAmsNetId(AxisCtrlPtr^.Input.Parameter.ecNetIdArr) , 
	nSlaveAddr:= AxisCtrlPtr^.Input.Parameter.Drive.EtherCatAddr, 
	sPathName:=FOE_Ctrl_Paramters.Foe_File_Path , 
	dwPass:= , 
	eMode:= eFoeMode_Write, 
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbLoad=> , 
	nProgress=> , 
	sInfo=> );]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_Homing" Id="{c9f2de86-ba80-0ab2-08da-33f9e7b714eb}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD PROTECTED Meth_Homing : BOOL
VAR_INPUT
	Execute   : BOOL;	
END_VAR
VAR_INST
	
	HomingState : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF HomeTrig.EDGEPOS(Execute) THEN

	Meth_Homing := FALSE;				

	HomingState := 1;
	HomingActive:= 		TRUE ;
	fbMC_Home.Execute:= FALSE;
END_IF


IF HomeTrig.EDGENEG(Execute) THEN
	
	HomingState := 0;
END_IF


CASE HomingState OF
	0:
		FB_EcCoeSdoWrite.bExecute := FALSE;
				
		Meth_CoEChangOperationMode(FALSE, eCaOpDriveModeOfOperation.CyclicSyncMode );
		Meth_ConfigHomeParamters(FALSE);
		HomeDirect(FALSE);
	1:	
		AxisCtrlPtr^.Input.Command.Power := FALSE;
		Meth_CoEChangOperationMode(FALSE,eCaOpDriveModeOfOperation.HomingMode);
		// Fix link problem
		IF strEcNetId= '' AND (AxisCtrlPtr^.Input.Parameter.ecNetIdArr[4]<>0 OR AxisCtrlPtr^.Input.Parameter.ecNetIdArr[5]<>0) THEN
			strEcNetId:= F_CreateAmsNetId(AxisCtrlPtr^.Input.Parameter.ecNetIdArr);
		END_IF	
		
		HomingState := 2;
	2:
		// changing mode to homing mode
		IF Meth_CoEChangOperationMode(TRUE,eCaOpDriveModeOfOperation.HomingMode) THEN			
			HomingState := 3;
		END_IF
	3://Config method and other params
	
		Homing_Ctrl_Params.HomingSWSpeed := LREAL_TO_UDINT( AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.SwitchVelo);
		Homing_Ctrl_Params.HomingTrSpeed := LREAL_TO_UDINT( AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo);
		Homing_Ctrl_Params.HomingAcc     := LREAL_TO_UDINT( AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Acc);
		Homing_Ctrl_Params.HomingOffset  := LREAL_TO_DINT( AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeSetPos);
		IF Meth_ConfigHomeParamters(TRUE) THEN
			Meth_ConfigHomeParamters(FALSE);
			HomingState := 4;
		END_IF	
	4:
	
	//ETZ to Remove
		AxisCtrlPtr^.Input.Command.Power := TRUE;
		HomingState :=5;
		
	5: //Check homing attained				
		IF IsHomingAttained() THEN	
			AxisCtrlPtr^.Output.monitor.stAbsEncoder.BlockOffsetPosition := AxisCtrlPtr^.Output.monitor.ActPosition;
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Block Pos %d ',LREAL_TO_DINT(AxisCtrlPtr^.Output.monitor.stAbsEncoder.BlockOffsetPosition),0,0);

			Meth_CoEChangOperationMode(FALSE,eCaOpDriveModeOfOperation.CyclicSyncMode);
			HomingState :=6;
		END_IF
	
	6: 
	
		fbMC_Home.HomingMode 					:= MC_Direct ;
		fbMC_Home.Options.ClearPositionLag 		:= TRUE ;
		IF MC_Block <> AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeMode THEN
			fbMC_Home.Position 						:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeSetPos;
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Home Direct',0,0,0);
		ELSE
			fbMC_Home.Position 						:= AxisCtrlPtr^.Output.monitor.ActPosition;
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Home Direct Set Act Pos For block',0,0,0);
		END_IF		
		fbMC_Home.Execute:= TRUE;
		HomingState := 7;

	
	7:
	
		IF fbMC_Home.Done THEN
			
			fbMC_Home.Execute := FALSE;
			Meth_CoEChangOperationMode(FALSE,eCaOpDriveModeOfOperation.CyclicSyncMode);
			HomingState := 8;
		END_IF

		
	

	8: 
	
		IF Meth_CoEChangOperationMode(TRUE,DINT_TO_SINT(eCaOpDriveModeOfOperation.CyclicSyncMode)) THEN
			Meth_CoEChangOperationMode(FALSE,eCaOpDriveModeOfOperation.CyclicSyncMode);
			Meth_Homing := TRUE;
		END_IF

		
END_CASE



{warning disable C0371}	

fbMC_Home(Axis:= AxisRef);

{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_InitVelKI" Id="{c08c20a4-65ce-463d-b695-160a6675342a}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_InitVelKI : BOOL
VAR_INPUT
	Execute   : BOOL;
	Value	  : LREAL;
END_VAR

VAR_INST
	// Service Functions Variablea
	InitSctrlKITrigger : Trigger ;
	InitSctrlKIState   : SINT;
	
END_VAR
VAR
 
	
END_VAR
VAR_OUTPUT
	Error : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF InitSctrlKITrigger.EDGEPOS(Execute) THEN
	Meth_InitVelKI := FALSE;
	InitSctrlKIState := 1;
	EcCoeSdoWrite(FALSE);
END_IF


IF InitSctrlKITrigger.EDGENEG(Execute) THEN
	InitSctrlKIState := 0;
	Meth_InitVelKI := FALSE;
	EcCoeSdoWrite(FALSE);

END_IF

IF NOT AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN// SIM
	Meth_InitVelKI := TRUE;
ELSE

CASE InitSctrlKIState OF 
	0:
		Meth_InitVelKI := FALSE;
	1:
		
		CoeSdoRW.Input.Write.nIndex    := CoEDrive_Ctrl_Adr.KiSpeed.Index;	  
		CoeSdoRW.Input.Write.nSubIndex := CoEDrive_Ctrl_Adr.KiSpeed.SunIndex;
		RealValue := LREAL_TO_REAL(Value);
		CoeSdoRW.Input.Write.cbBufLen  := SIZEOF(RealValue);
	
		CoeSdoRW.Input.Write.pSrcBuf   :=   ADR(RealValue); 	 
	//	CoeSdoRW.Input.Write.cbBufLen  := SIZEOF(UdintValue)  ; 
		 
		IF EcCoeSdoWrite(TRUE , Error=> Error ) THEN
			EcCoeSdoWrite(FALSE , Error=> Error );
			InitSctrlKIState := InitSctrlKIState +1;
		END_IF
	
	2:
		Meth_InitVelKI := TRUE;

END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_InitVelKP" Id="{693dead2-464d-4eff-a8cf-bfdd0477b5e2}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_InitVelKP : BOOL
VAR_INPUT
	Execute   : BOOL;
	Value	  : LREAL;
END_VAR

VAR_INST
	//
	InitSctrlKPTrigger : Trigger ;
	InitSctrlKPState 	 : SINT;		
	
END_VAR

VAR


END_VAR

VAR_OUTPUT
	Error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF InitSctrlKPTrigger.EDGEPOS(Execute) THEN
	Meth_InitVelKP := FALSE;
	InitSctrlKPState := 1;
	Error := FALSE;
	EcCoeSdoWrite(FALSE);
END_IF


IF InitSctrlKPTrigger.EDGENEG(Execute) THEN
	InitSctrlKPState := 0;
	Meth_InitVelKP := FALSE;
	EcCoeSdoWrite(FALSE);

END_IF
IF NOT AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN// SIM
	Meth_InitVelKP := TRUE;
ELSE


CASE InitSctrlKPState OF 
 
	1:
		
		CoeSdoRW.Input.Write.nIndex    := CoEDrive_Ctrl_Adr.KpSpeed.Index;	  
		CoeSdoRW.Input.Write.nSubIndex := CoEDrive_Ctrl_Adr.KpSpeed.SunIndex;
		RealValue := LREAL_TO_REAL(Value);
		CoeSdoRW.Input.Write.cbBufLen  := SIZEOF(RealValue);
	
		CoeSdoRW.Input.Write.pSrcBuf   :=   ADR(RealValue); 	 
	//	CoeSdoRW.Input.Write.cbBufLen  := SIZEOF(UdintValue)  ; 
		 
		IF EcCoeSdoWrite(TRUE , Error=> Error ) THEN
			EcCoeSdoWrite(FALSE , Error=> Error );
			InitSctrlKPState := InitSctrlKPState +1;
		END_IF
	
	2:
		Meth_InitVelKP := TRUE;

END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_ReadObj" Id="{18fe30c6-0c59-4e7e-b0b5-af3c93faeb2f}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_ReadObj : BOOL
VAR_INPUT
	Execute   : BOOL;
	Object	  : enumMotionObject;
	
END_VAR

VAR_INST
	ReadObjState  : USINT;
	ReadObjTrig: Trigger;
	IsRealValue:  BOOL;
	 
END_VAR
VAR
 TempValue : DINT;
	
END_VAR
VAR_OUTPUT
	Error : BOOL;
	Value : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF ReadObjTrig.EDGEPOS(Execute) THEN
	Meth_ReadObj := FALSE;
	ReadObjState := 1;
END_IF


IF ReadObjTrig.EDGENEG(Execute) THEN
	ReadObjState := 0;
	Meth_ReadObj := FALSE;
	EcCoeSdoRead(FALSE);

END_IF

IF NOT AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN// SIM
	Meth_ReadObj := TRUE;
ELSE

CASE ReadObjState OF 
	 
	1:
		CASE Object OF
			enumMotionObject.OPERATION_MODE :
			
				CoeSdoRW.Input.Read.nIndex		 := CoEDrive_Ctrl_Adr.OperationMode.Index;
				CoeSdoRW.Input.Read.nSubIndex	 := CoEDrive_Ctrl_Adr.OperationMode.SunIndex ;
				CoeSdoRW.Input.Read.cbBufLen	 := CoEDrive_Ctrl_Adr.OperationMode.Size ;
				
				IsRealValue 					 := CoEDrive_Ctrl_Adr.OperationMode.IsReal;
				
			enumMotionObject.VEL_KI:

				CoeSdoRW.Input.Read.nIndex		 := CoEDrive_Ctrl_Adr.KISpeed.Index;
				CoeSdoRW.Input.Read.nSubIndex	 := CoEDrive_Ctrl_Adr.KISpeed.SunIndex ;
				CoeSdoRW.Input.Read.cbBufLen	 := CoEDrive_Ctrl_Adr.KISpeed.Size ;		

				IsRealValue 					 := CoEDrive_Ctrl_Adr.KISpeed.IsReal;
		
			enumMotionObject.VEL_KP:
			
				CoeSdoRW.Input.Read.nIndex		 := CoEDrive_Ctrl_Adr.KpSpeed.Index;
				CoeSdoRW.Input.Read.nSubIndex	 := CoEDrive_Ctrl_Adr.KpSpeed.SunIndex ;
				CoeSdoRW.Input.Read.cbBufLen	 := CoEDrive_Ctrl_Adr.KpSpeed.Size ;
				
				IsRealValue 					 := CoEDrive_Ctrl_Adr.KpSpeed.IsReal;
				
			enumMotionObject.TORQUE_OFFSET:
			
				CoeSdoRW.Input.Read.nIndex		 := CoEDrive_Ctrl_Adr.TorqueOffset.Index;
				CoeSdoRW.Input.Read.nSubIndex	 := CoEDrive_Ctrl_Adr.TorqueOffset.SunIndex ;
				CoeSdoRW.Input.Read.cbBufLen	 := CoEDrive_Ctrl_Adr.TorqueOffset.Size ;
				
				IsRealValue 					 := CoEDrive_Ctrl_Adr.TorqueOffset.IsReal;
				
			enumMotionObject.MAX_TORQUE:	
				CoeSdoRW.Input.Read.nIndex		 := CoEDrive_Ctrl_Adr.MaxTorque.Index;
				CoeSdoRW.Input.Read.nSubIndex	 := CoEDrive_Ctrl_Adr.MaxTorque.SunIndex;
				CoeSdoRW.Input.Read.cbBufLen	 := CoEDrive_Ctrl_Adr.MaxTorque.Size ;
				
				IsRealValue 					 := CoEDrive_Ctrl_Adr.MaxTorque.IsReal;
				
			enumMotionobject.GAIN_SCHEDULE:		
				CoeSdoRW.Input.Read.nIndex		 := CoEDrive_Ctrl_Adr.GainScheduler.Index;
				CoeSdoRW.Input.Read.nSubIndex	 := CoEDrive_Ctrl_Adr.GainScheduler.SunIndex;
				CoeSdoRW.Input.Read.cbBufLen	 := CoEDrive_Ctrl_Adr.GainScheduler.Size ;				
				IsRealValue 					 := CoEDrive_Ctrl_Adr.GainScheduler.IsReal;
			
			enumMotionobject.ACC_CLOSE_POS_ERR:
				CoeSdoRW.Input.Read.nIndex		 := CoEDrive_Ctrl_Adr.AccClosePosErr.Index;
				CoeSdoRW.Input.Read.nSubIndex	 := CoEDrive_Ctrl_Adr.AccClosePosErr.SunIndex;
				CoeSdoRW.Input.Read.cbBufLen	 := CoEDrive_Ctrl_Adr.AccClosePosErr.Size ;				
				IsRealValue 					 := CoEDrive_Ctrl_Adr.AccClosePosErr.IsReal;
			enumMotionobject.DC_VOLATAGE:
				CoeSdoRW.Input.Read.nIndex		 := CoEDrive_Ctrl_Adr.DCVoltage.Index;
				CoeSdoRW.Input.Read.nSubIndex	 := CoEDrive_Ctrl_Adr.DCVoltage.SunIndex;
				CoeSdoRW.Input.Read.cbBufLen	 := CoEDrive_Ctrl_Adr.DCVoltage.Size ;				
				IsRealValue 					 := CoEDrive_Ctrl_Adr.DCVoltage.IsReal;
			
				
				
		END_CASE
		
		IF IsRealValue THEN
			CoeSdoRW.Input.Read.pDstBuf   :=   ADR(RealValue);
		ELSE
			
			CASE CoeSdoRW.Input.Read.cbBufLen OF 
				1:
					CoeSdoRW.Input.Read.pDstBuf   :=   ADR(UsintValue);
				2:
					CoeSdoRW.Input.Read.pDstBuf   :=   ADR(UintValue );
				4:
				
					CoeSdoRW.Input.Read.pDstBuf   :=   ADR(UdintValue);
				8:
					CoeSdoRW.Input.Read.pDstBuf   :=   ADR(Ulong);
				
	
			END_CASE		
 		END_IF 
		  
		IF NOT  CoeSdoRW.Output.Read.Busy THEN
			EcCoeSdoRead (FALSE  ); 			
			ReadObjState := ReadObjState +1;
		END_IF	

	
	2:
			IF EcCoeSdoRead (TRUE  ) THEN
				
				 
				IF IsRealValue THEN
					Value := RealValue;
				ELSE
					CASE CoeSdoRW.Input.Read.cbBufLen OF 
						1:
							Value   :=   USINT_TO_LREAL(UsintValue);
						2:
							Value   :=   UINT_TO_LREAL(UintValue) ;
						4:				
							Value   :=   UDINT_TO_REAL(UdintValue);
						8:
							Value  :=   ULINT_TO_LREAL(Ulong);	
					END_CASE
				END_IF
			

				
			
			
			
			IF  Object = enumMotionObject.TORQUE_OFFSET OR
				Object = enumMotionObject.MAX_TORQUE THEN
				Value := DriveUnitsTorqueToRealValue(Value);
	
			END_IF	
			LogText := 'Meth_ReadObj Value';
			LogText	:= CONCAT(LogText, 'Index 0x');
			LogText	:= CONCAT(LogText, UDINT_TO_HEX_STRING(CoeSdoRW.Input.Read.nIndex));
			LogText	:= CONCAT(LogText, ', SubIndex=');
			LogText	:= CONCAT(LogText, UDINT_TO_STRING(CoeSdoRW.Input.Read.nSubIndex));
			LogText	:= CONCAT(LogText, ', Value =');
			
			IF IsRealValue THEN
				TempValue := TO_DINT(Value* 1000);	
				LogText	:= CONCAT(LogText, ',(Real*1000) ');			
			ELSE	
 				TempValue := TO_DINT(Value);	
			END_IF
			LogText	:= CONCAT(LogText, DINT_TO_STRING(TempValue));
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,LogText, 0,0,0);
		
			ReadObjState := ReadObjState +1;
			
			Meth_ReadObj := TRUE;
			
		END_IF
	
	
	3:
		Meth_ReadObj := TRUE;
		

END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_TorqueInDriveUnits" Id="{92fb9776-eb67-42eb-9cce-7d112f188ac3}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_TorqueInDriveUnits : LREAL
VAR_INPUT
	
	Torque: LREAL;	

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Meth_TorqueInDriveUnits := Torque;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_UpdateDriveParams" Id="{b932a8d6-29cd-0c8c-2cd4-3998e0757fcd}">
      <Declaration><![CDATA[METHOD Meth_UpdateDriveParams : BOOL
VAR_INPUT
	Execute:		BOOL;
END_VAR
VAR_INST
	UpdateDriveParamsTrig  : 	Trigger;
	UpdateDriveParamsState : INT;
	
	 
END_VAR	
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF UpdateDriveParamsTrig.EDGEPOS(Execute) THEN
	
	UpdateDriveParamsState := 0;
	AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus := enum_DriveUpdateStatus.NoAction;
	AxisCtrlPtr^.Output.monitor.FileUpdate.FileUpdate_Error   := 	enum_DriveUpdateError.NoError;
	AxisCtrlPtr^.Output.monitor.FileUpdate.ErrorID := 0;
END_IF



CASE UpdateDriveParamsState OF 
	0://init -wait	

		
		UpdateDriveParamsState:=UpdateDriveParamsState +1;
	
	1://read Version Drive Param Version	
		// := 'Read Version';			
							
		CoeSdoRW.Input.Read.nIndex 	  := CoEDrive_Ctrl_Adr.ParamsVersionObj.Index; 
		CoeSdoRW.Input.Read.nSubIndex := CoEDrive_Ctrl_Adr.ParamsVersionObj.SunIndex;
		CoeSdoRW.Input.Read.pDstBuf	  := ADR(FOE_Ctrl_Paramters.Version_From_Drive);
 		CoeSdoRW.Input.Read.cbBufLen  := SIZEOF(FOE_Ctrl_Paramters.Version_From_Drive);  

		FOE_Ctrl_Paramters.fbFileOpen.bExecute    := FALSE;
		FOE_Ctrl_Paramters.fbFileClose.bExecute   := FALSE;
		FOE_Ctrl_Paramters.fbEcFoeLoad_0.bExecute := FALSE;
		EcCoeSdoRead(FALSE);
		FOE_Ctrl_Paramters.Foe_File_Path:=AxisCtrlPtr^.Input.Parameter.Drive.sFoeParams_Path;
		UpdateDriveParamsState:= UpdateDriveParamsState +1;

		
	2://Download to Drive 
		// := 'Download to Drive';
		IF EcCoeSdoRead(TRUE) THEN		
  				
			AxisCtrlPtr^.Output.Status.Drive.ParamVer:=	FOE_Ctrl_Paramters.Version_From_Drive;	
			IF AxisCtrlPtr^.Output.Status.Drive.ParamVer <> AxisCtrlPtr^.Input.Parameter.Drive.LatestParamVer THEN				
				AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus:= enum_DriveUpdateStatus.Checking;
				UpdateDriveParamsState:=UpdateDriveParamsState +1;
			ELSE
				AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus:= enum_DriveUpdateStatus.Updated;
				UpdateDriveParamsState:=	100;										
			END_IF
						
		END_IF
		
	3: 
		
						
		FOE_Ctrl_Paramters.fbFileOpen.sNetId		:= ''; 
		FOE_Ctrl_Paramters.fbFileOpen.sPathName		:=FOE_Ctrl_Paramters.Foe_File_Path; 
		FOE_Ctrl_Paramters.fbFileOpen.nMode			:=FOPEN_MODEREAD; 
		FOE_Ctrl_Paramters.fbFileOpen.ePath			:=PATH_GENERIC ;
		
		FOE_Ctrl_Paramters.fbFileOpen.bExecute:=	TRUE; 

		UpdateDriveParamsState:=UpdateDriveParamsState +1;
	4:
		//Check Valid file Path
		// := 'Cheack Valid Path';
		
		IF FOE_Ctrl_Paramters.fbFileOpen.bBusy =FALSE AND FOE_Ctrl_Paramters.fbFileOpen.bError =FALSE THEN 
			FOE_Ctrl_Paramters.hFile := FOE_Ctrl_Paramters.fbFileOpen.hFile;
			FOE_Ctrl_Paramters.fbFileOpen.bExecute:=	FALSE;
			UpdateDriveParamsState:=UpdateDriveParamsState +1;
			
			
			
			
		ELSIF FOE_Ctrl_Paramters.fbFileOpen.bError =TRUE THEN 
			AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus 			  :=	enum_DriveUpdateStatus.Error;
			AxisCtrlPtr^.Output.monitor.FileUpdate.FileUpdate_Error   := 	enum_DriveUpdateError.FileNotFound;
			AxisCtrlPtr^.Output.monitor.FileUpdate.ErrorID 			  :=    FOE_Ctrl_Paramters.fbFileOpen.nErrId;
			UpdateDriveParamsState:=	11;				
		END_IF	
	5:
			FOE_Ctrl_Paramters.fbFileClose.bExecute:=	TRUE;	
			UpdateDriveParamsState:=UpdateDriveParamsState +1;
	6:	
		// := 'Close path';
		
		IF FOE_Ctrl_Paramters.fbFileClose.bBusy =FALSE AND FOE_Ctrl_Paramters.fbFileClose.bError =FALSE THEN 
			FOE_Ctrl_Paramters.fbFileClose.bExecute:=FALSE;	
			UpdateDriveParamsState:=UpdateDriveParamsState +1;

			
	
		ELSIF FOE_Ctrl_Paramters.fbFileClose.bError =TRUE THEN 
			AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus :=	enum_DriveUpdateStatus.Error;
			AxisCtrlPtr^.Output.monitor.FileUpdate.FileUpdate_Error   := 	enum_DriveUpdateError.FileClosedFailed;
			
			AxisCtrlPtr^.Output.monitor.FileUpdate.ErrorID:= FOE_Ctrl_Paramters.fbFileClose.nErrId;	
			UpdateDriveParamsState:=	12;	
		END_IF
		
	7:	
		// := 'Foe Read';
		
		FOE_Ctrl_Paramters.fbEcFoeLoad_0.bExecute:=TRUE;
		AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus:= enum_DriveUpdateStatus.UpDating;
		UpdateDriveParamsState:=UpdateDriveParamsState +1;
		
	8:		
	//	St_Elomo_Drive_List[Index].Progress:=FB_EcFoeLoad_0.nProgress;
		// := 'Load file';
		IF FOE_Ctrl_Paramters.fbEcFoeLoad_0.bBusy =FALSE THEN 		
			FOE_Ctrl_Paramters.fbEcFoeLoad_0.bExecute:=FALSE;		
			IF FOE_Ctrl_Paramters.fbEcFoeLoad_0.bError THEN 
				AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus :=	enum_DriveUpdateStatus.Error;				
				AxisCtrlPtr^.Output.monitor.FileUpdate.ErrorID:= FOE_Ctrl_Paramters.fbEcFoeLoad_0.nErrId;								
				AxisCtrlPtr^.Output.monitor.FileUpdate.FileUpdate_Error   := 	enum_DriveUpdateError.FileClosedFailed;
				UpdateDriveParamsState:=	130;
			ELSE
				UpdateDriveParamsState:=	100;
				AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus:= enum_DriveUpdateStatus.Updated;
			END_IF
						
		END_IF
		
	100:
		// := 'Load Done';

		

		Meth_UpdateDriveParams:=		TRUE;
	
END_CASE
//St_Elomo_Drive_List[Index].Status_String:=Local_Status_String[St_Elomo_Drive_List[Index].Update_Staus];


]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_WriteObj" Id="{cf40e030-cb35-4f60-81d8-cccf57ea4af8}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_WriteObj : BOOL
VAR_INPUT
	Execute   : BOOL;
	Object	  : enumMotionObject;
	Value	  : LREAL;
	
END_VAR


VAR


	
	TempValue: DINT;
END_VAR
VAR_INST
	WriteObjState  : USINT;
	WriteObjTrig: Trigger;
	IsRealValue:  BOOL;
END_VAR


VAR_OUTPUT
	Error : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF WriteObjTrig.EDGEPOS(Execute) THEN
	Meth_WriteObj := FALSE;
	WriteObjState := 1;
END_IF


IF WriteObjTrig.EDGENEG(Execute) THEN
	WriteObjState := 0;
	Meth_WriteObj := FALSE;
	EcCoeSdoWrite(FALSE);

END_IF

IF NOT AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN// SIM
	Meth_WriteObj := TRUE;	
ELSE

CASE WriteObjState OF 
	 
	1:
		
		CASE Object OF
			enumMotionObject.OPERATION_MODE :
			
				CoeSdoRW.Input.Write.nIndex		 := CoEDrive_Ctrl_Adr.OperationMode.Index;
				CoeSdoRW.Input.Write.nSubIndex	 := CoEDrive_Ctrl_Adr.OperationMode.SunIndex ;
				CoeSdoRW.Input.Write.cbBufLen	 := CoEDrive_Ctrl_Adr.OperationMode.Size ;
				IsRealValue 					 := CoEDrive_Ctrl_Adr.OperationMode.IsReal;
			enumMotionObject.VEL_KI:

				CoeSdoRW.Input.Write.nIndex		 := CoEDrive_Ctrl_Adr.KISpeed.Index;
				CoeSdoRW.Input.Write.nSubIndex	 := CoEDrive_Ctrl_Adr.KISpeed.SunIndex ;
				CoeSdoRW.Input.Write.cbBufLen	 := CoEDrive_Ctrl_Adr.KISpeed.Size ;	
				IsRealValue 					 := CoEDrive_Ctrl_Adr.KISpeed.IsReal;			
			enumMotionObject.VEL_KP:
			
				CoeSdoRW.Input.Write.nIndex		 := CoEDrive_Ctrl_Adr.KpSpeed.Index;
				CoeSdoRW.Input.Write.nSubIndex	 := CoEDrive_Ctrl_Adr.KpSpeed.SunIndex ;
				CoeSdoRW.Input.Write.cbBufLen	 := CoEDrive_Ctrl_Adr.KpSpeed.Size ;
				IsRealValue 					 := CoEDrive_Ctrl_Adr.KpSpeed.IsReal;
			enumMotionObject.TORQUE_OFFSET:
			
				CoeSdoRW.Input.Write.nIndex		 := CoEDrive_Ctrl_Adr.TorqueOffset.Index;
				CoeSdoRW.Input.Write.nSubIndex	 := CoEDrive_Ctrl_Adr.TorqueOffset.SunIndex ;
				CoeSdoRW.Input.Write.cbBufLen	 := CoEDrive_Ctrl_Adr.TorqueOffset.Size ;
				IsRealValue 					 := CoEDrive_Ctrl_Adr.TorqueOffset.IsReal;
				Value := Meth_TorqueInDriveUnits( Value);
				
			enumMotionObject.MAX_TORQUE:	
				CoeSdoRW.Input.Write.nIndex		 := CoEDrive_Ctrl_Adr.MaxTorque.Index;
				CoeSdoRW.Input.Write.nSubIndex	 := CoEDrive_Ctrl_Adr.MaxTorque.SunIndex;
				CoeSdoRW.Input.Write.cbBufLen	 := CoEDrive_Ctrl_Adr.MaxTorque.Size ;
				IsRealValue 					 := CoEDrive_Ctrl_Adr.MaxTorque.IsReal;
				Value := Meth_TorqueInDriveUnits( Value);
				
			enumMotionObject.GAIN_SCHEDULE:
				CoeSdoRW.Input.Write.nIndex		 := CoEDrive_Ctrl_Adr.GainScheduler.Index;
				CoeSdoRW.Input.Write.nSubIndex	 := CoEDrive_Ctrl_Adr.GainScheduler.SunIndex;
				CoeSdoRW.Input.Write.cbBufLen	 := CoEDrive_Ctrl_Adr.GainScheduler.Size ;
				IsRealValue 					 := CoEDrive_Ctrl_Adr.GainScheduler.IsReal;
				
			enumMotionObject.ACC_CLOSE_POS_ERR:
				CoeSdoRW.Input.Write.nIndex		 := CoEDrive_Ctrl_Adr.AccClosePosErr.Index;
				CoeSdoRW.Input.Write.nSubIndex	 := CoEDrive_Ctrl_Adr.AccClosePosErr.SunIndex;
				CoeSdoRW.Input.Write.cbBufLen	 := CoEDrive_Ctrl_Adr.AccClosePosErr.Size ;
				IsRealValue 					 := CoEDrive_Ctrl_Adr.AccClosePosErr.IsReal;		
				
		END_CASE
		
		IF IsRealValue THEN
				RealValue := LREAL_TO_REAL(Value);
				CoeSdoRW.Input.Write.pSrcBuf   :=   ADR(RealValue);			
		ELSE
			CASE CoeSdoRW.Input.Write.cbBufLen OF 
				1:
					UsintValue := LREAL_TO_USINT(Value);
					CoeSdoRW.Input.Write.pSrcBuf   :=   ADR(UsintValue);
				2:
					UintValue := LREAL_TO_UINT(Value);
					CoeSdoRW.Input.Write.pSrcBuf   :=   ADR(UintValue );
				4:
					UdintValue := LREAL_TO_UDINT(Value);
					CoeSdoRW.Input.Write.pSrcBuf   :=   ADR(UdintValue);
				8:
					Ulong := LREAL_TO_ULINT(Value);
					CoeSdoRW.Input.Write.pSrcBuf   :=   ADR(Ulong);
				
			END_CASE		
		END_IF
		IF NOT CoeSdoRW.Output.Write.Busy THEN			 
			EcCoeSdoWrite(FALSE , Error=> Error );
	
			
			LogText := 'Meth_WriteObj Value';
			LogText	:= CONCAT(LogText, 'Index 0x');
			LogText	:= CONCAT(LogText, UDINT_TO_HEX_STRING(CoeSdoRW.Input.Write.nIndex));
			LogText	:= CONCAT(LogText, ', SubIndex=');
			LogText	:= CONCAT(LogText, UDINT_TO_STRING(CoeSdoRW.Input.Write.nSubIndex));
			LogText	:= CONCAT(LogText, ', Value =');
			
			IF IsRealValue THEN
				LogText	:= CONCAT(LogText, ',(Real*1000) ');
				TempValue := TO_DINT(Value* 1000);				
			ELSE	
 				TempValue := TO_DINT(Value);	
			END_IF
			LogText	:= CONCAT(LogText, DINT_TO_STRING(TempValue));
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,LogText, 0,0,0);

			



			
			WriteObjState := WriteObjState +1;
		END_IF	
		
	2:
		IF EcCoeSdoWrite(TRUE , Error=> Error ) THEN
			EcCoeSdoWrite(FALSE , Error=> Error );
			WriteObjState := WriteObjState +1;
		END_IF
	
	3:
		
		Meth_WriteObj := TRUE;

END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadActualCurrent" Id="{4eaf10aa-e67f-0278-0508-a8f869a475cb}" FolderPath="MonitorMethods\">
      <Declaration><![CDATA[METHOD ReadActualCurrent : LREAL
VAR_INPUT
END_VAR
VAR_INST
		
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
AxisCtrlPtr^.Output.monitor.ActualCurrent	:=  ( (THIS^.io_ActualCurrent) / 1000.0)/SQRT(2.0) * (UDINT_TO_LREAL(CoeRead_RatedCurrent) / 1000.0);

//AxisCtrlPtr^.Output.monitor.ActualCurrent	:=  ( (THIS^.io_ActualCurrent) / 1000.0) * AxisCtrlPtr^.Input.Parameter.RatedCurrent;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadActualTorque" Id="{dacedec4-eb83-0801-392d-ce020129976e}" FolderPath="MonitorMethods\">
      <Declaration><![CDATA[METHOD ReadActualTorque : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//AxisCtrlPtr^.Output.monitor.ActualTorque	:=  (INT_TO_LREAL(THIS^.io_ActualTorque) / 1000.0)/SQRT(2.0) * (UDINT_TO_LREAL(CoeRead_RatedTorque) / 1000.0);

AxisCtrlPtr^.Output.monitor.ActualTorque	:=  ((THIS^.io_ActualTorque) / 1000.0) * AxisCtrlPtr^.Input.Parameter.Ratedtorque;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadDcVoltage" Id="{1bbbb11a-d7c3-4e4b-a2b2-71c4a4a3e9ba}" FolderPath="MonitorMethods\">
      <Declaration><![CDATA[METHOD ReadDcVoltage : BOOL
VAR_INPUT
END_VAR
VAR_INST
	ReadDcTimer : TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	ReadDcTimer.IN := TRUE;
	ReadDcTimer.PT := T#20S;
		
	IF ReadDcTimer.Q THEN			 
			ReadDcTimer.IN := FALSE;

 		IF  Meth_ReadObj(TRUE, enumMotionObject.DC_VOLATAGE, Value =>LRealValue, Error =>ReadObjError ) THEN
					AxisCtrlPtr^.Output.monitor.ActualDC :=    RealValue;
					Meth_ReadObj(FALSE, enumMotionObject.DC_VOLATAGE  );											
		END_IF
	END_IF
	
	ReadDcTimer();	
 
		]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadInitDriveParID" Id="{9d6d3132-753a-0c46-1a62-a42411a15d4d}">
      <Declaration><![CDATA[METHOD ReadInitDriveParID : BOOL
VAR_INPUT
	bStart : BOOL;
END_VAR

VAR_INST
	ExecuteTrig: 		Trigger;
	State_InitSpecific: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF ExecuteTrig.EDGEPOS(bStart) THEN
	ReadInitDriveParID		:= FALSE;
	State_InitSpecific	:= 1;		
END_IF

IF ExecuteTrig.EDGENEG(bStart) THEN
	State_InitSpecific	:= 0;	
	ReadInitDriveParID		:= FALSE;
END_IF

CASE State_InitSpecific OF

	 
	1:
		EcCoeSdoRead(FALSE);
		CoeSdoRW.Input.Read.nIndex		:= DINT_TO_WORD(eDS402DriveParID.MotorRatedCurrent);
		CoeSdoRW.Input.Read.nSubIndex	:= 0;
		CoeSdoRW.Input.Read.pDstBuf		:= ADR(CoeRead_RatedCurrent);
		CoeSdoRW.Input.Read.cbBufLen	:= SIZEOF(CoeRead_RatedCurrent);
		State_InitSpecific	:= 2;
		
	2:
		IF EcCoeSdoRead(TRUE) THEN	
			State_InitSpecific	:= 3;
		END_IF
		
	3:
		EcCoeSdoRead(FALSE);
		CoeSdoRW.Input.Read.nIndex		:= DINT_TO_WORD(eDS402DriveParID.MotorRatedTorque);
		CoeSdoRW.Input.Read.nSubIndex	:= 0;
		CoeSdoRW.Input.Read.pDstBuf		:= ADR(CoeRead_RatedTorque);
		CoeSdoRW.Input.Read.cbBufLen	:= SIZEOF(CoeRead_RatedTorque);
		State_InitSpecific	:= 4;
		
	4:
		IF EcCoeSdoRead(TRUE) THEN
			AxisCtrlPtr^.Input.Parameter.RatedCurrent	:= UDINT_TO_LREAL(CoeRead_RatedCurrent) / 1000.0;
			AxisCtrlPtr^.Input.Parameter.Ratedtorque	:= UDINT_TO_LREAL(CoeRead_RatedTorque) / 100.0;
			ReadInitDriveParID		:= TRUE;	
			State_InitSpecific	:= 0;
		END_IF
		
		
 
		
END_CASE ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CoE_BasicAxis_FB">
      <LineId Id="2092" Count="0" />
      <LineId Id="2155" Count="2" />
      <LineId Id="2159" Count="0" />
      <LineId Id="2158" Count="0" />
      <LineId Id="2093" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="2094" Count="0" />
      <LineId Id="2193" Count="1" />
      <LineId Id="2232" Count="0" />
      <LineId Id="2235" Count="1" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.CreateDriveErrMsgDetails">
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.DriveErrorHandling">
      <LineId Id="3" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="83" Count="3" />
      <LineId Id="333" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="366" Count="1" />
      <LineId Id="372" Count="2" />
      <LineId Id="364" Count="1" />
      <LineId Id="354" Count="0" />
      <LineId Id="356" Count="3" />
      <LineId Id="355" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="91" Count="1" />
      <LineId Id="218" Count="0" />
      <LineId Id="93" Count="3" />
      <LineId Id="337" Count="0" />
      <LineId Id="316" Count="1" />
      <LineId Id="319" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="362" Count="1" />
      <LineId Id="98" Count="5" />
      <LineId Id="275" Count="0" />
      <LineId Id="277" Count="3" />
      <LineId Id="276" Count="0" />
      <LineId Id="104" Count="16" />
      <LineId Id="295" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="121" Count="3" />
      <LineId Id="232" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="297" Count="1" />
      <LineId Id="126" Count="5" />
      <LineId Id="261" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="134" Count="3" />
      <LineId Id="334" Count="0" />
      <LineId Id="138" Count="16" />
      <LineId Id="336" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="390" Count="3" />
      <LineId Id="416" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="413" Count="1" />
      <LineId Id="394" Count="2" />
      <LineId Id="389" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="418" Count="2" />
      <LineId Id="417" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="155" Count="3" />
      <LineId Id="335" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="164" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.DriveHomeAbsSwitch">
      <LineId Id="459" Count="1" />
      <LineId Id="457" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="521" Count="14" />
      <LineId Id="518" Count="1" />
      <LineId Id="487" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="547" Count="0" />
      <LineId Id="479" Count="1" />
      <LineId Id="483" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="571" Count="0" />
      <LineId Id="573" Count="5" />
      <LineId Id="572" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="469" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.DriveHomeLagError">
      <LineId Id="20" Count="16" />
      <LineId Id="66" Count="0" />
      <LineId Id="75" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="77" Count="2" />
      <LineId Id="69" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="84" Count="5" />
      <LineId Id="82" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="94" Count="5" />
      <LineId Id="101" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="274" Count="22" />
      <LineId Id="203" Count="2" />
      <LineId Id="170" Count="22" />
      <LineId Id="167" Count="2" />
      <LineId Id="163" Count="0" />
      <LineId Id="160" Count="2" />
      <LineId Id="91" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="42" Count="2" />
      <LineId Id="54" Count="7" />
      <LineId Id="256" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="102" Count="10" />
      <LineId Id="74" Count="0" />
      <LineId Id="115" Count="7" />
      <LineId Id="114" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="217" Count="4" />
      <LineId Id="255" Count="0" />
      <LineId Id="223" Count="14" />
      <LineId Id="216" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="301" Count="22" />
      <LineId Id="299" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="139" Count="3" />
      <LineId Id="138" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.DriveHomeRefPulse">
      <LineId Id="459" Count="1" />
      <LineId Id="457" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="518" Count="3" />
      <LineId Id="487" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="479" Count="1" />
      <LineId Id="483" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="599" Count="1" />
      <LineId Id="602" Count="1" />
      <LineId Id="598" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="504" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="566" Count="4" />
      <LineId Id="565" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.DriveUnitsTorqueToRealValue">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.EcCoeSdoRead">
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="5" />
      <LineId Id="102" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="83" Count="5" />
      <LineId Id="82" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="144" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="63" Count="7" />
      <LineId Id="72" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.EcCoeSdoWrite">
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="2" />
      <LineId Id="132" Count="0" />
      <LineId Id="97" Count="2" />
      <LineId Id="102" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="83" Count="5" />
      <LineId Id="82" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="63" Count="7" />
      <LineId Id="72" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.GetCanOpenAdr">
      <LineId Id="26" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="111" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="113" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="149" Count="3" />
      <LineId Id="161" Count="0" />
      <LineId Id="164" Count="8" />
      <LineId Id="181" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="162" Count="1" />
      <LineId Id="96" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="91" Count="3" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.GetErrCanAdr">
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.IsHomingAttained">
      <LineId Id="6" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_ChangingOperationMode">
      <LineId Id="11" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="268" Count="1" />
      <LineId Id="23" Count="11" />
      <LineId Id="216" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="218" Count="1" />
      <LineId Id="227" Count="0" />
      <LineId Id="234" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="228" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="238" Count="1" />
      <LineId Id="229" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="240" Count="1" />
      <LineId Id="230" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="231" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="244" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_CngMaxTorque">
      <LineId Id="36" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="102" Count="2" />
      <LineId Id="27" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="105" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_CngTorqueOffset">
      <LineId Id="36" Count="2" />
      <LineId Id="79" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="121" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_CoEChangOperationMode">
      <LineId Id="11" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="13" />
      <LineId Id="56" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="46" Count="8" />
      <LineId Id="63" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="180" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="90" Count="2" />
      <LineId Id="44" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_ConfigHomeParamters">
      <LineId Id="11" Count="2" />
      <LineId Id="181" Count="0" />
      <LineId Id="21" Count="9" />
      <LineId Id="32" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="46" Count="8" />
      <LineId Id="63" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="72" Count="8" />
      <LineId Id="95" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="145" Count="8" />
      <LineId Id="128" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="138" Count="4" />
      <LineId Id="82" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="155" Count="8" />
      <LineId Id="109" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="118" Count="8" />
      <LineId Id="107" Count="1" />
      <LineId Id="102" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="85" Count="7" />
      <LineId Id="44" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_DriveFWUpdate">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="36" Count="3" />
      <LineId Id="203" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="184" Count="1" />
      <LineId Id="191" Count="0" />
      <LineId Id="196" Count="2" />
      <LineId Id="187" Count="2" />
      <LineId Id="53" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="192" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="66" Count="11" />
      <LineId Id="221" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="229" Count="3" />
      <LineId Id="234" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="222" Count="1" />
      <LineId Id="78" Count="2" />
      <LineId Id="227" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="246" Count="3" />
      <LineId Id="83" Count="1" />
      <LineId Id="287" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="225" Count="1" />
      <LineId Id="88" Count="5" />
      <LineId Id="267" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="289" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="97" Count="14" />
      <LineId Id="292" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="117" Count="8" />
      <LineId Id="127" Count="5" />
      <LineId Id="148" Count="1" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_FOE_fbCalls">
      <LineId Id="6" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="58" Count="4" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="65" Count="5" />
      <LineId Id="63" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="11" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_Homing">
      <LineId Id="11" Count="2" />
      <LineId Id="21" Count="1" />
      <LineId Id="335" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="23" Count="6" />
      <LineId Id="31" Count="3" />
      <LineId Id="56" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="194" Count="1" />
      <LineId Id="199" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="220" Count="3" />
      <LineId Id="219" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="292" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="315" Count="0" />
      <LineId Id="325" Count="1" />
      <LineId Id="316" Count="0" />
      <LineId Id="247" Count="1" />
      <LineId Id="271" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="355" Count="8" />
      <LineId Id="352" Count="0" />
      <LineId Id="244" Count="1" />
      <LineId Id="347" Count="1" />
      <LineId Id="364" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="371" Count="1" />
      <LineId Id="376" Count="0" />
      <LineId Id="374" Count="1" />
      <LineId Id="365" Count="2" />
      <LineId Id="350" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="226" Count="3" />
      <LineId Id="144" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="337" Count="2" />
      <LineId Id="341" Count="0" />
      <LineId Id="343" Count="2" />
      <LineId Id="340" Count="0" />
      <LineId Id="336" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_InitVelKI">
      <LineId Id="36" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="27" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="98" Count="8" />
      <LineId Id="77" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="128" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_InitVelKP">
      <LineId Id="29" Count="3" />
      <LineId Id="69" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="33" Count="8" />
      <LineId Id="114" Count="1" />
      <LineId Id="42" Count="8" />
      <LineId Id="158" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="51" Count="6" />
      <LineId Id="70" Count="1" />
      <LineId Id="61" Count="2" />
      <LineId Id="21" Count="0" />
      <LineId Id="116" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_ReadObj">
      <LineId Id="36" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="365" Count="1" />
      <LineId Id="27" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="181" Count="2" />
      <LineId Id="169" Count="0" />
      <LineId Id="272" Count="1" />
      <LineId Id="271" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="172" Count="0" />
      <LineId Id="274" Count="1" />
      <LineId Id="175" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="177" Count="1" />
      <LineId Id="176" Count="0" />
      <LineId Id="276" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="291" Count="1" />
      <LineId Id="294" Count="2" />
      <LineId Id="298" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="300" Count="4" />
      <LineId Id="299" Count="0" />
      <LineId Id="439" Count="3" />
      <LineId Id="438" Count="0" />
      <LineId Id="436" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="280" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="389" Count="2" />
      <LineId Id="213" Count="0" />
      <LineId Id="283" Count="1" />
      <LineId Id="216" Count="5" />
      <LineId Id="223" Count="0" />
      <LineId Id="289" Count="1" />
      <LineId Id="224" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="492" Count="1" />
      <LineId Id="498" Count="1" />
      <LineId Id="494" Count="0" />
      <LineId Id="496" Count="1" />
      <LineId Id="414" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="331" Count="1" />
      <LineId Id="329" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="204" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="100" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_TorqueInDriveUnits">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_UpdateDriveParams">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="36" Count="3" />
      <LineId Id="203" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="184" Count="1" />
      <LineId Id="191" Count="0" />
      <LineId Id="196" Count="2" />
      <LineId Id="187" Count="2" />
      <LineId Id="53" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="192" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="66" Count="11" />
      <LineId Id="221" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="229" Count="3" />
      <LineId Id="234" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="222" Count="1" />
      <LineId Id="78" Count="2" />
      <LineId Id="227" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="246" Count="3" />
      <LineId Id="83" Count="1" />
      <LineId Id="287" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="225" Count="1" />
      <LineId Id="88" Count="5" />
      <LineId Id="267" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="289" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="97" Count="14" />
      <LineId Id="292" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="117" Count="8" />
      <LineId Id="127" Count="5" />
      <LineId Id="148" Count="1" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.Meth_WriteObj">
      <LineId Id="105" Count="14" />
      <LineId Id="336" Count="1" />
      <LineId Id="120" Count="4" />
      <LineId Id="166" Count="11" />
      <LineId Id="270" Count="0" />
      <LineId Id="178" Count="11" />
      <LineId Id="309" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="190" Count="3" />
      <LineId Id="260" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="262" Count="2" />
      <LineId Id="261" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="281" Count="3" />
      <LineId Id="279" Count="1" />
      <LineId Id="195" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="274" Count="1" />
      <LineId Id="196" Count="2" />
      <LineId Id="228" Count="0" />
      <LineId Id="199" Count="1" />
      <LineId Id="229" Count="0" />
      <LineId Id="201" Count="3" />
      <LineId Id="265" Count="0" />
      <LineId Id="267" Count="1" />
      <LineId Id="266" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="425" Count="7" />
      <LineId Id="464" Count="0" />
      <LineId Id="433" Count="5" />
      <LineId Id="420" Count="4" />
      <LineId Id="419" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="231" Count="3" />
      <LineId Id="230" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="137" Count="2" />
      <LineId Id="104" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.ReadActualCurrent">
      <LineId Id="3" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.ReadActualTorque">
      <LineId Id="3" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.ReadDcVoltage">
      <LineId Id="26" Count="3" />
      <LineId Id="31" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="14" Count="1" />
    </LineIds>
    <LineIds Name="CoE_BasicAxis_FB.ReadInitDriveParID">
      <LineId Id="6" Count="13" />
      <LineId Id="21" Count="22" />
      <LineId Id="59" Count="1" />
      <LineId Id="44" Count="2" />
      <LineId Id="56" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
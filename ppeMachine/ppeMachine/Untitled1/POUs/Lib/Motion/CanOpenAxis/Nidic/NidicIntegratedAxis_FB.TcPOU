<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="NidicIntegratedAxis_FB" Id="{7e38e8dc-2963-4430-8373-393f639f57b8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC NidicIntegratedAxis_FB EXTENDS CoE_BasicAxis_FB  
VAR_INPUT		
		
END_VAR
VAR_IN_OUT	
END_VAR
VAR_OUTPUT	
END_VAR

VAR
	DebugError					: UINT;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
AxisCtrlPtr^.Input.Parameter.Drive.eDriveType := enumDriveType.eIntegratedNidec;	
AxisCtrlPtr^.Input.Parameter.Drive.VendorNameID := eVendorNameID.Nidec;	
SUPER^(AxisRef:=AxisRef);

AxisCtrlPtr^.Output.Status.DriveEnable			:= io_StatusWord.4 AND  (io_StatusWord.0) ;	// DS-402 Status word bit 0 = Ready to switch on
	
]]></ST>
    </Implementation>
    <Method Name="CreateDriveErrMsgDetails" Id="{deb186b6-70ae-43b0-9cbd-328800775daf}">
      <Declaration><![CDATA[METHOD CreateDriveErrMsgDetails : enumMotorEvents
VAR_INPUT
	ErrorId			: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE ErrorId OF
	
	16#0:
		CreateDriveErrMsgDetails := enumMotorEvents.NoEvents;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d  ,No error',UDINT_TO_DINT(ErrorId),0,0);
	16#2220:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Current, device outputside',UDINT_TO_DINT(ErrorId),0,0);	
	16#2250:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Short circuit/ground leakage',UDINT_TO_DINT(ErrorId),0,0);	

	16#2351:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'I2T THERMAL STATE LOAD EVEL WARNING',UDINT_TO_DINT(ErrorId),0,0);	
	
		
	16#3130:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Phase failure',UDINT_TO_DINT(ErrorId),0,0);
	
	16#3131:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Phase 1 failure',UDINT_TO_DINT(ErrorId),0,0);	

	16#3132:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Phase 2 failure',UDINT_TO_DINT(ErrorId),0,0);	
	
	16#3133:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Phase 3 failure',UDINT_TO_DINT(ErrorId),0,0);	
	

	16#3210:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d DC link over-voltage',UDINT_TO_DINT(ErrorId),0,0);	

		 
	16#3220:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d DC Link under voltage',UDINT_TO_DINT(ErrorId),0,0);
	
	16#3331:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d FIELD CIRCUIT INTERRUPTED',UDINT_TO_DINT(ErrorId),0,0);
	
	
	16#4210:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorOverTemp; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Excess temperature drive',UDINT_TO_DINT(ErrorId),0,0);
		
	16#4310:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorOverTemp; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Excess temperature device',UDINT_TO_DINT(ErrorId),0,0);		
		

	16#5300:
		 CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError;
		 fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Control device hardware',UDINT_TO_DINT(ErrorId),0,0);

	16#6010:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError;
 		fnLogMsg(ADR(LogMsg_0),LOG_ERROR, 'NidicInt Drive ErrorId %d Software reset',UDINT_TO_DINT(ErrorId),0,0);

	16#6320:
		CreateDriveErrMsgDetails := enumMotorEvents.PLCIllegalParam; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Parameter Error',UDINT_TO_DINT(ErrorId),0,0);


(*chopper 10 - Th Brake Res*)

	16#7121:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorStalled; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d  Motor error OR commutation malfunction',UDINT_TO_DINT(ErrorId),0,0);
	16#7300:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorFeedBackErr; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR, 'NidicInt Drive ErrorId %d Sensor Error',UDINT_TO_DINT(ErrorId),0,0);

	16#7500:
		CreateDriveErrMsgDetails := enumMotorEvents.DriveComError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'NidicInt Drive ErrorId %d Communication 90 - Power Comms',UDINT_TO_DINT(ErrorId),0,0);

	
		
	ELSE
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'unknown NidicInt Drive ErrorId %d ',UDINT_TO_DINT(ErrorId),0,0);
		CreateDriveErrMsgDetails := enumMotorEvents.NoEvents;
	END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="INIT_Specific" Id="{7498f1be-e9ec-49c9-9517-b374b5129cd3}">
      <Declaration><![CDATA[METHOD  INIT_Specific : BOOL 
VAR_INPUT
	bStart: 					BOOL;
END_VAR
VAR_INST	
	ComDelay:	TON;
	Nidec_Init_State : INT ;
	ExecuteTrig: 	Trigger;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ExecuteTrig.EDGEPOS(bStart) THEN
	INIT_Specific := FALSE ;
	IF AxisCtrlPtr^.Input.Parameter.Drive.bDisableFoE_Transfer THEN 
		Nidec_Init_State:= 5;//10;
	ELSE
		Nidec_Init_State:= 1;
	END_IF
END_IF


IF ExecuteTrig.EDGENEG(bStart) THEN
	Nidec_Init_State := 0;
END_IF	

	
CASE Nidec_Init_State OF							
						
	1:	
		Nidec_Init_State:= 5;			
	5:
		ReadInitDriveParID(FALSE);
		Nidec_Init_State:=	6;
		
	6:
		IF ReadInitDriveParID(TRUE) THEN
			Nidec_Init_State:=	10;
		END_IF
	
	
	10:
		
		Nidec_Init_State := 0 ;
		INIT_Specific := TRUE ;
		AxisCtrlPtr^.Output.Status.AxisInitDone := TRUE ;
		AxisCtrlPtr^.Output.Status.ReadyForCmd := TRUE ;
END_CASE
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadInitDriveParID" Id="{f41d77ab-ecc7-4731-be6e-6c6802960626}">
      <Declaration><![CDATA[METHOD ReadInitDriveParID : BOOL
VAR_INPUT
	bStart : BOOL;
END_VAR

VAR_INST
	ExecuteTrig_1: 		Trigger;
	State_InitSpecific_1: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF ExecuteTrig_1.EDGEPOS(bStart) THEN
	ReadInitDriveParID		:= FALSE;
	State_InitSpecific_1	:= 1;		
END_IF

IF ExecuteTrig_1.EDGENEG(bStart) THEN
	State_InitSpecific_1	:= 0;	
	ReadInitDriveParID		:= FALSE;
END_IF

CASE State_InitSpecific_1 OF

	0:
	
	1:
		SUPER^.EcCoeSdoRead(FALSE);
		CoeSdoRW.Input.Read.nIndex		:= DINT_TO_WORD(eNidecDriveParID.Menue05);
		CoeSdoRW.Input.Read.nSubIndex	:= 7;
		CoeSdoRW.Input.Read.pDstBuf		:= ADR(CoeRead_RatedCurrent);
		CoeSdoRW.Input.Read.cbBufLen	:= SIZEOF(CoeRead_RatedCurrent);
		State_InitSpecific_1	:= 2;
		
	2:
		IF SUPER^.EcCoeSdoRead(TRUE) THEN	
			State_InitSpecific_1	:= 3;
		END_IF
		
	3:
		SUPER^.EcCoeSdoRead(FALSE);
		CoeSdoRW.Input.Read.nIndex		:= DINT_TO_WORD(eNidecDriveParID.Menue04);
		CoeSdoRW.Input.Read.nSubIndex	:= 41;
		CoeSdoRW.Input.Read.pDstBuf		:= ADR(CoeRead_RatedTorque);
		CoeSdoRW.Input.Read.cbBufLen	:= SIZEOF(CoeRead_RatedTorque);
		State_InitSpecific_1	:= 4;
		
	4:
		IF SUPER^.EcCoeSdoRead(TRUE) THEN
			AxisCtrlPtr^.Input.Parameter.RatedCurrent	:= UDINT_TO_LREAL(CoeRead_RatedCurrent) / 1000.0;
			AxisCtrlPtr^.Input.Parameter.Ratedtorque	:= UDINT_TO_LREAL(CoeRead_RatedTorque) / 100.0;
			ReadInitDriveParID		:= TRUE;	
			State_InitSpecific_1	:= 0;
		END_IF
		
		
 
		
END_CASE ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="NidicIntegratedAxis_FB">
      <LineId Id="2092" Count="0" />
      <LineId Id="2144" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="2130" Count="0" />
      <LineId Id="2129" Count="0" />
      <LineId Id="2115" Count="0" />
      <LineId Id="2112" Count="0" />
    </LineIds>
    <LineIds Name="NidicIntegratedAxis_FB.CreateDriveErrMsgDetails">
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="4" />
      <LineId Id="21" Count="2" />
      <LineId Id="301" Count="3" />
      <LineId Id="306" Count="2" />
      <LineId Id="300" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="155" Count="1" />
      <LineId Id="314" Count="0" />
      <LineId Id="310" Count="2" />
      <LineId Id="319" Count="0" />
      <LineId Id="315" Count="3" />
      <LineId Id="320" Count="2" />
      <LineId Id="313" Count="0" />
      <LineId Id="169" Count="1" />
      <LineId Id="246" Count="1" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="326" Count="2" />
      <LineId Id="325" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="331" Count="1" />
      <LineId Id="330" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="179" Count="1" />
      <LineId Id="255" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="207" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="150" Count="2" />
      <LineId Id="292" Count="0" />
    </LineIds>
    <LineIds Name="NidicIntegratedAxis_FB.INIT_Specific">
      <LineId Id="179" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="199" Count="2" />
      <LineId Id="189" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="183" Count="3" />
      <LineId Id="188" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="213" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="219" Count="2" />
      <LineId Id="218" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="148" Count="6" />
      <LineId Id="156" Count="0" />
      <LineId Id="64" Count="0" />
    </LineIds>
    <LineIds Name="NidicIntegratedAxis_FB.ReadInitDriveParID">
      <LineId Id="6" Count="37" />
      <LineId Id="59" Count="1" />
      <LineId Id="44" Count="2" />
      <LineId Id="56" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
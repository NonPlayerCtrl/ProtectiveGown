<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="NidicBasicAxis_FB" Id="{786f17ee-8078-0e7c-10f2-d14185cfd5d1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC NidicBasicAxis_FB EXTENDS CoE_BasicAxis_FB  
VAR_INPUT		
		
END_VAR
VAR_IN_OUT	
END_VAR
VAR_OUTPUT	
END_VAR

VAR
	DebugError					: UINT;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
AxisCtrlPtr^.Input.Parameter.Drive.eDriveType := enumDriveType.eNidec;	
AxisCtrlPtr^.Input.Parameter.Drive.VendorNameID := eVendorNameID.Nidec;	
SUPER^(AxisRef:=AxisRef);

AxisCtrlPtr^.Output.Status.DriveEnable			:= io_StatusWord.0;	// DS-402 Status word bit 0 = Ready to switch on
	
]]></ST>
    </Implementation>
    <Method Name="CreateDriveErrMsgDetails" Id="{5f05df85-fb6f-0379-3708-a2bbc14a1308}">
      <Declaration><![CDATA[METHOD CreateDriveErrMsgDetails : enumMotorEvents
VAR_INPUT
	ErrorId			: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE ErrorId OF
	
	16#0:
		CreateDriveErrMsgDetails := enumMotorEvents.NoEvents;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d  ,No error',UDINT_TO_DINT(ErrorId),0,0);
	16#FF01: 
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Generic Error',UDINT_TO_DINT(ErrorId),0,0);
	16#2300:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Current, device outputside',UDINT_TO_DINT(ErrorId),0,0);	
	16#3130:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Phase failure',UDINT_TO_DINT(ErrorId),0,0);	
	
	16#2230:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Short circuit/ground leakage',UDINT_TO_DINT(ErrorId),0,0);	

	16#3210:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d DC link over-voltage',UDINT_TO_DINT(ErrorId),0,0);	

		 
	16#3230:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorStalled; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Load error, Low Load',UDINT_TO_DINT(ErrorId),0,0);
	16#4310:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorOverTemp; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Excess temperature drive',UDINT_TO_DINT(ErrorId),0,0);
	16#5112:
		 CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		 fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Supply low voltage' ,UDINT_TO_DINT(ErrorId),0,0);

	16#5200:
		 CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError;
		 fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Control device hardware',UDINT_TO_DINT(ErrorId),0,0);

	16#5400:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Power section',UDINT_TO_DINT(ErrorId),0,0);

	16#5510:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR, 'Nidic Drive ErrorId %d RAM Allocation',UDINT_TO_DINT(ErrorId),0,0);
	16#5530:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR, 'Nidic Drive ErrorId %d Data storage (Non-volatile)',UDINT_TO_DINT(ErrorId),0,0);

	16#5430:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d  Input stages 94 - Rectifier set up',UDINT_TO_DINT(ErrorId),0,0);
	16#5440:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR, 'Nidic Drive ErrorId %d Contacts 226 - Soft Start',UDINT_TO_DINT(ErrorId),0,0);
	16#6010:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError;
 		fnLogMsg(ADR(LogMsg_0),LOG_ERROR, 'Nidic Drive ErrorId %d Software reset',UDINT_TO_DINT(ErrorId),0,0);

	16#6320:
		CreateDriveErrMsgDetails := enumMotorEvents.PLCIllegalParam; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Parameter Error',UDINT_TO_DINT(ErrorId),0,0);

	16#7112:
		CreateDriveErrMsgDetails := enumMotorEvents.BreakResistorError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR, 'Nidic Drive ErrorId %d Brake chopper over',UDINT_TO_DINT(ErrorId),0,0);//????

	16#7113:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d  Protective circuit break',UDINT_TO_DINT(ErrorId),0,0);
(*chopper 10 - Th Brake Res*)
	16#7120: 
		CreateDriveErrMsgDetails := enumMotorEvents.DriveNotReady;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d  Motor Autotune',UDINT_TO_DINT(ErrorId),0,0);

	16#7122:
		CreateDriveErrMsgDetails := enumMotorEvents.DriveComError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d  Motor error OR commutation malfunction',UDINT_TO_DINT(ErrorId),0,0);
	16#7300:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorFeedBackErr; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR, 'Nidic Drive ErrorId %d Sensor Error',UDINT_TO_DINT(ErrorId),0,0);

	16#7310:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSpeedError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d  Speed 7 - Over speed',UDINT_TO_DINT(ErrorId),0,0);
	16#7500:
		CreateDriveErrMsgDetails := enumMotorEvents.DriveComError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Communication 90 - Power Comms',UDINT_TO_DINT(ErrorId),0,0);
(*103 - Interconnect*)
	16#7600:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError; 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Nidic Drive ErrorId %d Data storage (external)',UDINT_TO_DINT(ErrorId),0,0);	
		
		
	ELSE
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'unknown Nidic Drive ErrorId %d ',UDINT_TO_DINT(ErrorId),0,0);
		CreateDriveErrMsgDetails := enumMotorEvents.NoEvents;
	END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="INIT_Specific" Id="{b7185390-80a9-056c-34ad-df1c85cc44c6}">
      <Declaration><![CDATA[METHOD  INIT_Specific : BOOL 
VAR_INPUT
	bStart: 					BOOL;
END_VAR
VAR_INST	
	ComDelay:	TON;
	Nidec_Init_State : INT ;
	ExecuteTrig: 	Trigger;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ExecuteTrig.EDGEPOS(bStart) THEN
	INIT_Specific := FALSE ;
	IF AxisCtrlPtr^.Input.Parameter.Drive.bDisableFoE_Transfer THEN 
		Nidec_Init_State:= 5;//10;
	ELSE
		Nidec_Init_State:= 1;
	END_IF
END_IF


IF ExecuteTrig.EDGENEG(bStart) THEN
	Nidec_Init_State := 0;
END_IF	

	
CASE Nidec_Init_State OF							
						
	1:	
		Nidec_Init_State:= 5;			
	5:
		ReadInitDriveParID(FALSE);
		Nidec_Init_State:=	6;
		
	6:
		IF ReadInitDriveParID(TRUE) THEN
			Nidec_Init_State:=	10;
		END_IF
	
	
	10:
		
		Nidec_Init_State := 0 ;
		INIT_Specific := TRUE ;
		AxisCtrlPtr^.Output.Status.AxisInitDone := TRUE ;
		AxisCtrlPtr^.Output.Status.ReadyForCmd := TRUE ;
END_CASE
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadInitDriveParID" Id="{2de4eae4-2867-0fd0-2ed6-aa4ce25d7262}">
      <Declaration><![CDATA[METHOD ReadInitDriveParID : BOOL
VAR_INPUT
	bStart : BOOL;
END_VAR

VAR_INST
	ExecuteTrig_1: 		Trigger;
	State_InitSpecific_1: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF ExecuteTrig_1.EDGEPOS(bStart) THEN
	ReadInitDriveParID		:= FALSE;
	State_InitSpecific_1	:= 1;		
END_IF

IF ExecuteTrig_1.EDGENEG(bStart) THEN
	State_InitSpecific_1	:= 0;	
	ReadInitDriveParID		:= FALSE;
END_IF

CASE State_InitSpecific_1 OF

 
	
	1:
		SUPER^.EcCoeSdoRead(FALSE);
		CoeSdoRW.Input.Read.nIndex		:= DINT_TO_WORD(eNidecDriveParID.Menue05);
		CoeSdoRW.Input.Read.nSubIndex	:= 7;
		CoeSdoRW.Input.Read.pDstBuf		:= ADR(CoeRead_RatedCurrent);
		CoeSdoRW.Input.Read.cbBufLen	:= SIZEOF(CoeRead_RatedCurrent);
		State_InitSpecific_1	:= 2;
		
	2:
		IF SUPER^.EcCoeSdoRead(TRUE) THEN	
			State_InitSpecific_1	:= 3;
		END_IF
		
	3:
		SUPER^.EcCoeSdoRead(FALSE);
		CoeSdoRW.Input.Read.nIndex		:= DINT_TO_WORD(eNidecDriveParID.Menue04);
		CoeSdoRW.Input.Read.nSubIndex	:= 41;
		CoeSdoRW.Input.Read.pDstBuf		:= ADR(CoeRead_RatedTorque);
		CoeSdoRW.Input.Read.cbBufLen	:= SIZEOF(CoeRead_RatedTorque);
		State_InitSpecific_1	:= 4;
		
	4:
		IF SUPER^.EcCoeSdoRead(TRUE) THEN
			AxisCtrlPtr^.Input.Parameter.RatedCurrent	:= UDINT_TO_LREAL(CoeRead_RatedCurrent) / 1000.0;
			AxisCtrlPtr^.Input.Parameter.Ratedtorque	:= UDINT_TO_LREAL(CoeRead_RatedTorque) / 100.0;
			ReadInitDriveParID		:= TRUE;	
			State_InitSpecific_1	:= 0;
		END_IF
		
		
 
		
END_CASE ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="NidicBasicAxis_FB">
      <LineId Id="2092" Count="0" />
      <LineId Id="2144" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="2130" Count="0" />
      <LineId Id="2129" Count="0" />
      <LineId Id="2115" Count="0" />
      <LineId Id="2112" Count="0" />
    </LineIds>
    <LineIds Name="NidicBasicAxis_FB.CreateDriveErrMsgDetails">
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="10" />
      <LineId Id="153" Count="0" />
      <LineId Id="155" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="169" Count="1" />
      <LineId Id="246" Count="1" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="179" Count="1" />
      <LineId Id="255" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="193" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="197" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="263" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="207" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="269" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="217" Count="1" />
      <LineId Id="272" Count="1" />
      <LineId Id="287" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="279" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="150" Count="2" />
      <LineId Id="292" Count="0" />
    </LineIds>
    <LineIds Name="NidicBasicAxis_FB.INIT_Specific">
      <LineId Id="179" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="199" Count="2" />
      <LineId Id="189" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="183" Count="3" />
      <LineId Id="188" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="213" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="219" Count="2" />
      <LineId Id="218" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="148" Count="6" />
      <LineId Id="156" Count="0" />
      <LineId Id="64" Count="0" />
    </LineIds>
    <LineIds Name="NidicBasicAxis_FB.ReadInitDriveParID">
      <LineId Id="6" Count="37" />
      <LineId Id="59" Count="1" />
      <LineId Id="44" Count="2" />
      <LineId Id="56" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="BeckHoff8xxxAxis_FB" Id="{2cb267e6-48a9-4a04-800a-fe261429fe20}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC BeckHoff8xxxAxis_FB EXTENDS BeckHoffBasicAxis_FB  
VAR_INPUT		
	io_SafetyState: 	BYTE;	
END_VAR
VAR_IN_OUT	
END_VAR
VAR_OUTPUT	
END_VAR

VAR
//	DebugError					: UINT;
	Drive8000InitDone :BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT Drive8000InitDone THEN
	Meth_Init();
	Drive8000InitDone := TRUE;
END_IF

AxisCtrlPtr^.Input.Parameter.Drive.eDriveType := enumDriveType.e8xxxBeckhoff;	
AxisCtrlPtr^.Input.Parameter.Drive.VendorNameID := eVendorNameID.Beckhoff;

SUPER^(AxisRef:=AxisRef);

AxisCtrlPtr^.Output.Status.DriveEnable:=	BYTE_TO_BOOL(io_SafetyState);
	
]]></ST>
    </Implementation>
    <Method Name="CreateDriveErrMsgDetails" Id="{a94f66c2-fe74-446d-b8e5-cf524e217748}">
      <Declaration><![CDATA[METHOD CreateDriveErrMsgDetails : enumMotorEvents
VAR_INPUT
	ErrorId			: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE ErrorId OF
	
	16#0:
		CreateDriveErrMsgDetails := enumMotorEvents.NoEvents;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  ,No error',UDINT_TO_DINT(ErrorId),0,0);
	16#2340: 
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Short circuit (motor-side)',UDINT_TO_DINT(ErrorId),0,0);
	16#2380:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorOverCurrent ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Continuous over current -U',UDINT_TO_DINT(ErrorId),0,0);
	16#2381:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorOverCurrent ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Continuous over current - V',UDINT_TO_DINT(ErrorId),0,0);
	16#2382:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorOverCurrent ;	
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Continuous over current Ohase W',UDINT_TO_DINT(ErrorId),0,0);
		
	16#2383:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Phase U current offset out of range',UDINT_TO_DINT(ErrorId),0,0);
	16#2384:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Phase V current offset out of range',UDINT_TO_DINT(ErrorId),0,0);
	16#2385:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Phase W current offset out of range',UDINT_TO_DINT(ErrorId),0,0);
	16#3180..16#3181 :
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Phase failure motor',UDINT_TO_DINT(ErrorId),0,0);
	16#3210: 
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive ErrorId %d DC link overvoltage',UDINT_TO_DINT(ErrorId),0,0);
		
		
	16#3220:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d DC-Link undervoltage',UDINT_TO_DINT(ErrorId),0,0);
	16#3280:
 		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d 2  DC link is not ready',UDINT_TO_DINT(ErrorId),0,0);
	16#4310: 
		CreateDriveErrMsgDetails := enumMotorEvents.MotorOverTemp;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Drive overtemperature ',UDINT_TO_DINT(ErrorId),0,0);
	16#4380:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorOverTemp;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Fan speed seems to be zero',UDINT_TO_DINT(ErrorId),0,0);
	16#5112:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Supply undervoltage: supply +24V',UDINT_TO_DINT(ErrorId),0,0);
		
	16#5180:
		CreateDriveErrMsgDetails := enumMotorEvents.DriveNotEnabled;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Output stage STO active',UDINT_TO_DINT(ErrorId),0,0);
	16#5181:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Power supply controlword, torque off order',UDINT_TO_DINT(ErrorId),0,0);

	16#5182:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Power supply controlword, live counter inactive',UDINT_TO_DINT(ErrorId),0,0);

	16#5183:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Power supply controlword, NC handling order',UDINT_TO_DINT(ErrorId),0,0);
		
	16#5184:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Supply DC link circuit is not ready',UDINT_TO_DINT(ErrorId),0,0);
	
	16#5185:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Power supply controlword, non-regenerative brake order',UDINT_TO_DINT(ErrorId),0,0);
	16#5186:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Power supply controlword, regenerative brake order',UDINT_TO_DINT(ErrorId),0,0);
		
	16#5187:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Power supply communication is not established',UDINT_TO_DINT(ErrorId),0,0);
	16#5190:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Test 5V supply failed',UDINT_TO_DINT(ErrorId),0,0);

	16#5192:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Supply overvoltage: supply +24V',UDINT_TO_DINT(ErrorId),0,0);

	
	16#5441:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorPositionError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Positive limit switch active',UDINT_TO_DINT(ErrorId),0,0);
	16#5442:
		CreateDriveErrMsgDetails := enumMotorEvents.DriveComError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Negative limit switch active',UDINT_TO_DINT(ErrorId),0,0);

	16#5580..16#6181:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError  ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Beckhoff internal Error',UDINT_TO_DINT(ErrorId),0,0);
	16#6182..16#6190:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Internal Watchdog Error',UDINT_TO_DINT(ErrorId),0,0);
	16#6391..16#639F:
		CreateDriveErrMsgDetails := enumMotorEvents.PLCIllegalParam;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Operation mode incompatible to PDO',UDINT_TO_DINT(ErrorId),0,0);
	16#63A2..16#63A5:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorFeedBackErr;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  No position offset',UDINT_TO_DINT(ErrorId),0,0);

	16#63A6..16#63B3:
		CreateDriveErrMsgDetails := enumMotorEvents.PLCIllegalParam ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Jerk factor illegal',UDINT_TO_DINT(ErrorId),0,0);
	
	16#7180:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Current monitoring error',UDINT_TO_DINT(ErrorId),0,0);


	16#7380:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Current sensor motor phase U',UDINT_TO_DINT(ErrorId),0,0);
	16#7381:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Current sensor motor phase V',UDINT_TO_DINT(ErrorId),0,0);
	16#7382:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorSupplyError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Current sensor motor phase W',UDINT_TO_DINT(ErrorId),0,0);
	16#8180:
		CreateDriveErrMsgDetails := enumMotorEvents.DriveComError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d System restart or sync lost',UDINT_TO_DINT(ErrorId),0,0);
	16#8181:	
		CreateDriveErrMsgDetails := enumMotorEvents.DriveComError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Lost Distributed clocks Sync',UDINT_TO_DINT(ErrorId),0,0);

	16#8185:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  need an extended fault reset command',UDINT_TO_DINT(ErrorId),0,0);
	16#8611:	
		CreateDriveErrMsgDetails := enumMotorEvents.MotorPositionError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d Following error',UDINT_TO_DINT(ErrorId),0,0);

	
	16#8A80..16#8A81:
		CreateDriveErrMsgDetails := enumMotorEvents.PLCIllegalParam ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Illegal Modes Of Operation',UDINT_TO_DINT(ErrorId),0,0);
		
	16#A000..16#A00F :
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Sync Manager Address Error',UDINT_TO_DINT(ErrorId),0,0);
	
	16#A010..16#A043 :
		CreateDriveErrMsgDetails := enumMotorEvents.PLCIllegalParam ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d PDO/SDO Error',UDINT_TO_DINT(ErrorId),0,0);
	16#A082:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  , EtherCAT Slave Stack Error',UDINT_TO_DINT(ErrorId),0,0);
	
	
	16#FF08:
		CreateDriveErrMsgDetails := enumMotorEvents.BreakResistorError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Shorted Coils Brake',UDINT_TO_DINT(ErrorId),0,0);
	16#FF0C:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError ;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  TorqueOff with emergency brake',UDINT_TO_DINT(ErrorId),0,0);

	16#FFFF:
		CreateDriveErrMsgDetails := enumMotorEvents.MotorGeneralError;
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Beckhoff Drive8 ErrorId %d  Internal Error',UDINT_TO_DINT(ErrorId),0,0);
		
 	ELSE
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'unknown Beckhoff Drive8 ErrorId %d ',UDINT_TO_DINT(ErrorId),0,0);
		CreateDriveErrMsgDetails := enumMotorEvents.NoEvents;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetErrCanAdrTemp" Id="{ad08e1f8-5c77-4da4-9b7d-9a6e1549dd25}">
      <Declaration><![CDATA[METHOD GetErrCanAdrTemp : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Maybe this FB should be remove
CoeErrIdIndex		:= 16#583f;

		
//CoeErrIdIndex	:= 16#603F;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_Init" Id="{fd716804-ac76-4b80-8a40-0cd70dbe5dda}">
      <Declaration><![CDATA[METHOD Meth_Init : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ErrorMSgSize := 64;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="BeckHoff8xxxAxis_FB">
      <LineId Id="2092" Count="0" />
      <LineId Id="2145" Count="0" />
      <LineId Id="2147" Count="0" />
      <LineId Id="2146" Count="0" />
      <LineId Id="2162" Count="1" />
      <LineId Id="2161" Count="0" />
      <LineId Id="2093" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="2131" Count="0" />
      <LineId Id="2129" Count="0" />
      <LineId Id="2115" Count="0" />
      <LineId Id="2112" Count="0" />
    </LineIds>
    <LineIds Name="BeckHoff8xxxAxis_FB.CreateDriveErrMsgDetails">
      <LineId Id="13" Count="26" />
      <LineId Id="99" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="189" Count="2" />
      <LineId Id="187" Count="1" />
      <LineId Id="43" Count="8" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="1" />
      <LineId Id="193" Count="0" />
      <LineId Id="198" Count="1" />
      <LineId Id="197" Count="0" />
      <LineId Id="52" Count="2" />
      <LineId Id="201" Count="2" />
      <LineId Id="200" Count="0" />
      <LineId Id="204" Count="3" />
      <LineId Id="209" Count="2" />
      <LineId Id="171" Count="0" />
      <LineId Id="55" Count="2" />
      <LineId Id="213" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="214" Count="1" />
      <LineId Id="219" Count="2" />
      <LineId Id="212" Count="0" />
      <LineId Id="58" Count="2" />
      <LineId Id="183" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="222" Count="0" />
      <LineId Id="224" Count="2" />
      <LineId Id="223" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="61" Count="18" />
      <LineId Id="166" Count="0" />
      <LineId Id="83" Count="2" />
      <LineId Id="101" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="172" Count="1" />
      <LineId Id="105" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="115" Count="5" />
      <LineId Id="233" Count="2" />
      <LineId Id="231" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="121" Count="2" />
      <LineId Id="178" Count="0" />
      <LineId Id="181" Count="1" />
      <LineId Id="179" Count="1" />
      <LineId Id="124" Count="2" />
      <LineId Id="238" Count="1" />
      <LineId Id="241" Count="1" />
      <LineId Id="240" Count="0" />
      <LineId Id="244" Count="2" />
      <LineId Id="243" Count="0" />
      <LineId Id="249" Count="1" />
      <LineId Id="247" Count="1" />
      <LineId Id="127" Count="5" />
      <LineId Id="107" Count="0" />
      <LineId Id="133" Count="2" />
      <LineId Id="108" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BeckHoff8xxxAxis_FB.GetErrCanAdrTemp">
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="BeckHoff8xxxAxis_FB.Meth_Init">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="BeckHoffIntegratedAxis_FB" Id="{cc48838c-ccaf-4734-a3fc-c722405dac48}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC BeckHoffIntegratedAxis_FB EXTENDS BeckHoffBasicAxis_FB  
VAR_INPUT		
	io_SafetyState: 	BOOL;	
END_VAR

VAR_OUTPUT	
END_VAR

VAR
	 
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
CoEDrive_Ctrl_Adr.DCVoltage.Index 	 := 16#6079; 
CoEDrive_Ctrl_Adr.DCVoltage.SunIndex  := 0;
CoEDrive_Ctrl_Adr.DCVoltage.Size      := 4;

AxisCtrlPtr^.Input.Parameter.Drive.eDriveType := enumDriveType.eIntegratedBeckhoff;	
AxisCtrlPtr^.Input.Parameter.Drive.VendorNameID := eVendorNameID.Beckhoff;
	
 	
SUPER^(AxisRef:=AxisRef);

AxisCtrlPtr^.Output.Status.DriveEnable:=	io_SafetyState;
	
]]></ST>
    </Implementation>
    <Method Name="GetCanOpenAdr" Id="{feb15c12-59d0-4b03-bfd4-b192d208cd5a}">
      <Declaration><![CDATA[METHOD GetCanOpenAdr : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[    SUPER^.GetCanOpenAdr();	
	
	
	CoEDrive_Ctrl_Adr.DCVoltage.Index 	 := 16#9010; 
	CoEDrive_Ctrl_Adr.DCVoltage.SunIndex  := 12;
	CoEDrive_Ctrl_Adr.DCVoltage.Size      := 2;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeLagError" Id="{727a30cf-75d8-4a5d-8656-4ad01b62a172}">
      <Declaration><![CDATA[METHOD HomeLagError : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
	LagErrorState : INT;
	HomingLagErrorTrig: 		Trigger;
	io_TorqueLimitPersent_Mem:	UINT;
	PositionBias:				LREAL;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset:= Execute;
IF HomeTrig.EDGEPOS(Reset) THEN
	Reset:=	FALSE;
	LagErrorState:=1;
	HomingActive:= 	TRUE ;
	AxisCtrlPtr^.Output.Status.MC_Home.Done:= FALSE ;
	fbMC_MoveVel.Execute:= FALSE ;
	fbMC_MoveRel.Execute:= FALSE ;
END_IF

IF Execute THEN
	CASE LagErrorState OF
		
		1:		
			io_TorqueLimitPersent_Mem:=	io_TorqueLimitPersent;							
			io_TorqueLimitPersent:=	AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.TorqueLimitPersent;				
			LagErrorState:= LagErrorState +1;
						 		
		2:	
			IF WriteNC_AxisBoolParam(MC_AxisParameter:=MC_AxisParameter.EnablePosLagMonitoring,ParamValue:=FALSE) THEN
				LagErrorState:= LagErrorState +1;	
			END_IF
																
		3: 										
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.eNEGATIVE THEN								
				fbMC_MoveVel.Direction:= 	MC_Negative_Direction;  					
			ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.ePOSITIVE THEN								
				fbMC_MoveVel.Direction:= 	MC_Positive_Direction;										
			END_IF
			
			fbMC_MoveVel.Velocity:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.SwitchVelo;
	
			fbMC_MoveVel.Execute:= 	TRUE ;
			
			LagErrorState:= LagErrorState + 1;
			
		4: 	
			IF (ABS(AxisCtrlPtr^.Output.monitor.ActLagError) > AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.LagErr) THEN
				LagErrorState:= LagErrorState + 1;	
			END_IF
		
		5:	
			IF Stop() THEN
				LagErrorState:= LagErrorState + 2;
				Delay(IN:=	FALSE);					
			END_IF
(*					
		6:	InternalPowerHandle:=	TRUE;
			AxisCtrlPtr^.Input.Command.Power:= FALSE;
			IF AxisCtrlPtr^.Output.Status.AxisStatus.Disabled THEN
				LagErrorState:= LagErrorState + 1;	
			END_IF
*)			
		7:	Delay(IN:=	TRUE,PT:=T#1S);		
			IF Delay.Q THEN
				Delay(IN:=FALSE);	
				LagErrorState:= LagErrorState +2;
			END_IF
(*	
		8:	InternalPowerHandle:=	FALSE;
			AxisCtrlPtr^.Input.Command.Power:= TRUE;
			
			IF (AxisCtrlPtr^.Output.Status.AxisStatus.Disabled = FALSE) THEN
				
				io_TorqueLimitPersent:=	io_TorqueLimitPersent_Mem;	
				LagErrorState:= LagErrorState + 1;	
			END_IF
*)						
		9: 	io_TorqueLimitPersent:=	io_TorqueLimitPersent_Mem;	
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.eNEGATIVE THEN													
				fbMC_MoveRel.Distance:=		AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.TriggerOffsetPos ;					
			ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.ePOSITIVE THEN								
				fbMC_MoveRel.Distance:=		AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.TriggerOffsetPos*(-1) ;											
			END_IF
			fbMC_MoveRel.Velocity:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo;
			
			fbMC_MoveRel.Execute:= 	TRUE ;
			LagErrorState:= LagErrorState + 1;
	 		
					
		10:	
			IF fbMC_MoveRel.Done THEN
				AxisCtrlPtr^.Output.monitor.stAbsEncoder.BlockOffsetPosition := AxisCtrlPtr^.Output.monitor.ActPosition ;
				(*				
				fbMC_Home.HomingMode:= 	MC_Direct ;
				fbMC_Home.Position:= 	(AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeSetPos); 
				fbMC_Home.Execute:= 	TRUE;
				LagErrorState:= LagErrorState + 1;*)
				LagErrorState:= 100;
			END_IF
			
		11:	IF fbMC_Home.Done THEN			
				fbMC_Home.Execute:= 	FALSE;
				LagErrorState:= 100;	
			END_IF
																				
		100:			
			AxisCtrlPtr^.Input.Command.Home:= FALSE ;
			HomingActive:= 				FALSE;
			fbMC_Home.Execute:= 		FALSE;
			AxisCtrlPtr^.Output.Status.MC_Home.Done:= TRUE ;
			HomeLagError:=	TRUE;
			LagErrorState:= 0;		
	END_CASE

END_IF
 
			
fbMC_MoveVel.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Acc;  
fbMC_MoveVel.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Dcc;  
fbMC_MoveVel.Jerk			:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Jerk;
fbMC_MoveVel.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
fbMC_MoveVel.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;

fbMC_MoveRel.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Acc; 
fbMC_MoveRel.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Dcc;
fbMC_MoveRel.Jerk			:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Jerk;
fbMC_MoveRel.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
fbMC_MoveRel.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;

{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>

fbMC_Home(Axis:= AxisRef);	
fbMC_MoveVel(Axis:= AxisRef);
fbMC_MoveRel(Axis:= AxisRef);

fbMC_Stop.Deceleration:= 	AxisCtrlPtr^.Input.Parameter.Deceleration;
fbMC_Stop.Jerk:=			AxisCtrlPtr^.Input.Parameter.Jerk;
fbMC_Stop.Options:= 		AxisCtrlPtr^.Input.Parameter.Options;
fbMC_Stop(Axis := AxisRef) ;
{warning restore C0371}

THIS^.HomingGlobalHandle();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadActualTorque" Id="{68665f25-f4b8-4ecb-8c81-93943ea120e3}">
      <Declaration><![CDATA[METHOD ReadActualTorque : LREAL
VAR_INPUT
END_VAR
VAR_INST
		
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// Units [rms]

{warning disable C0371}
IF AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN
	AxisCtrlPtr^.Output.monitor.ActualTorque	:=  ( -(AxisRef.NcToPlc.ActTorque) / 100.0) * AxisCtrlPtr^.Input.Parameter.Ratedtorque;
ELSE
	AxisCtrlPtr^.Output.monitor.ActualTorque	:=  ((THIS^.io_ActualTorque) / 1000.0) * AxisCtrlPtr^.Input.Parameter.Ratedtorque;
END_IF	

{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="BeckHoffIntegratedAxis_FB">
      <LineId Id="2092" Count="0" />
      <LineId Id="2145" Count="1" />
      <LineId Id="2093" Count="0" />
      <LineId Id="2162" Count="1" />
      <LineId Id="2161" Count="0" />
      <LineId Id="2147" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="2131" Count="0" />
      <LineId Id="2129" Count="0" />
      <LineId Id="2115" Count="0" />
      <LineId Id="2112" Count="0" />
    </LineIds>
    <LineIds Name="BeckHoffIntegratedAxis_FB.GetCanOpenAdr">
      <LineId Id="5" Count="2" />
      <LineId Id="9" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="BeckHoffIntegratedAxis_FB.HomeLagError">
      <LineId Id="80" Count="43" />
      <LineId Id="292" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="293" Count="5" />
      <LineId Id="131" Count="5" />
      <LineId Id="216" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="220" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="155" Count="10" />
      <LineId Id="253" Count="0" />
      <LineId Id="166" Count="2" />
      <LineId Id="254" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="255" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="258" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="264" Count="1" />
      <LineId Id="175" Count="0" />
      <LineId Id="177" Count="3" />
      <LineId Id="236" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="183" Count="30" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="BeckHoffIntegratedAxis_FB.ReadActualTorque">
      <LineId Id="3" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="105" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
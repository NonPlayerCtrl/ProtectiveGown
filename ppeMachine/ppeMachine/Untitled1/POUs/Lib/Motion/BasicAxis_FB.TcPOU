<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="BasicAxis_FB" Id="{bfd33e35-3131-05c5-1af6-e544cf4d2ea4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC BasicAxis_FB// EXTENDS Tc2_EtherCAT_FB 
VAR_INPUT

	AxisCtrlPtr					: POINTER TO Basic_axis_typ ;
	AxisSercosTyp				: BOOL; 
	
	AxisActive						:BOOL := TRUE;
	
	io_HW_State					: UINT;
	io_EtherCatAddr				: WORD;
	io_ActualTemperature		: REAL;
	io_ActualTorque  			: LREAL;
	io_ActualCurrent 			: LREAL;
	io_TorqueLimitPersent 		: UINT;	//[%]
//	io_ActualTorqueReal AT %I* 	: REAL;
//	TorqueConstant				: LREAL; // [Nm/A] depends on drive, only if needed, 1 = if not needed
	ChangeStateLogEnable		: BOOL;
	
END_VAR
VAR_IN_OUT
	AxisRef			: AXIS_REF;
END_VAR

VAR_OUTPUT
	ErrorID			: UDINT ;
	io_TorqueLimit 	: UINT;
END_VAR
VAR
	LogMsgInit			: BOOL := TRUE;
	LogMsg_0 			: LogMsg ;
	
	fbMcPower 			: MC_Power;			// FB for enable and override
	//fbMC_ReadStatus		: MC_ReadStatus;		// FB for Read Statuses
	fbMC_Home			: MC_Home;
	fbMC_Stop			: MC_Stop;
	fbMC_MoveAbs		: MC_MoveAbsolute;
	fbMC_MoveAdd		: MC_MoveAdditive;
	fbMC_MoveRel		: MC_MoveRelative;
	fbMC_MoveVel		: MC_MoveVelocity;
	fbMC_MoveAbs1		: MC_MoveAbsolute;
	fbMC_MoveAdd1		: MC_MoveAdditive;
	fbMC_MoveRel1		: MC_MoveRelative;
	fbMC_MoveVel1		: MC_MoveVelocity;
	fbMC_Jog			: MC_Jog ;
	fbMC_Halt			: MC_Halt;
	fbMC_SetOverride	: MC_SetOverride;
	fbMC_Reset			: MC_Reset;
	FB_EcCoeSdoRead_0 	: FB_EcCoeSdoRead;
	FB_EcCoeSdoWrite_0 	: FB_EcCoeSdoWrite;
	StateCoeSdoRead		: UINT;
	StateCoeSdoWrite	: UINT;	
	
		
	SDOrw				:Tc2_EtherCAT_typ;
	CoeSdoRW			:EcCoeSdo_Ctrl_typ;
	
	rtReadStatusEnable : R_TRIG ;
	rtReadStatusErr : R_TRIG ;
	
	AxisState			: INT;
	LastAxisStep 		: INT ;
	HomingMode			: INT;
	SS_Init				: INT ;
	rtPowerOn			: R_TRIG;

	ErrorTrig  			: Trigger ;
	AbortTrig  			: Trigger ;
	AxisActiveTrig		: Trigger ;
	fbErrorID 			: UDINT ;
	AxisErrorID 		: UDINT ;
	LastErrorID 		: UDINT ;
		
	HomingActive 		: BOOL ;
	InternalPowerHandle : BOOL;
	
	FB_EcCoeSdoRead_Count	: SINT := 0 ;
	//FB_EcCoeSdoRead_0	: FB_EcCoeSdoRead;
	FB_SoEReadDiagNumber_0	: FB_SoEReadDiagNumber;
	//FB_EcSoERead_0	: FB_EcSoERead;
	FB_SoEReset_0		: FB_SoEReset;
	DriveErrorID 		: UDINT ;//DWORD
	DriveError 			: UDINT ;
	
	TempErrorID			: ARRAY[1..100] OF UDINT;
	TempErrorText		: ARRAY[1..100] OF STRING[2048];
	TempErrorIndex		: USINT := 1 ;
	TempLastErrorID		: UDINT ;
	FirstErrorCollectorTrig : Trigger ;
	
	DriveErrorTrig	:Trigger ;
	MC_Reset_counter	: INT;
	
	ErrorAck_Trigger	: Trigger;
	DriveErrorId_ReadOk_CanResetSercos	: BOOL;
	SercosReadDriveErrorIdDone			: BOOL ;
	CanReadDriveErrorIdDone				: BOOL ;
	driveReadErrorState					: INT ;
		
	tmp_ErrorEntry			: Eh_ErrorEntry_typ;
	strEcNetId				: STRING ; (* EtherCAT NetID - String*)

	// Paremters for homing
	State:INT;	
	HomeState:INT;	
	HomeTrig: Trigger;
	Reset:BOOL;	
	Delay:	TON;
	ScalingNumerator :LREAL;
	HomeRefTrig: Trigger;		
	HomingState : INT;
	
	
	ChangeModeOperTrig  : 	Trigger;

	InValidDataFromDrive: BOOL;
	InValidDataFromDriveTrig :Trigger;
	
	NCError18000 : BOOL;
	NCError18000TON: TON;
	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF LogMsgInit THEN
	LogMsg_0.ptrGlobalArray		:= 	ADR(LogGlobalArray);
	LogMsg_0.ptrEncoderAngle	:= 	ADR(AxisCtrlPtr^.Input.Parameter.PosForLog);	 
	LogMsgInit	:= FALSE;	
END_IF	
LogMsg_0.Enable				:=  AxisCtrlPtr^.Input.Command.LogEnable;
LogMsg_0.logData.category	:=	AxisCtrlPtr^.Input.Parameter.ThreadName;    

AxisCtrlPtr^.Output.Status.Drive.ActiveHW:=	 UINT_TO_BOOL(io_HW_State);
io_TorqueLimit:=	io_TorqueLimitPersent*10;

AxisCtrlPtr^.Input.Parameter.Drive.EtherCatAddr:= WORD_TO_UINT(io_EtherCatAddr);

AxisCtrlPtr^.Output.monitor.SetVelocity:=  	AxisRef.NcToPlc.SetVelo;	

IF NOT AxisCtrlPtr^.Input.Command.Power
	AND AxisCtrlPtr^.Output.Status.AxisInitDone 
		AND AxisCtrlPtr^.Output.Status.FAULT = FALSE 
			AND InternalPowerHandle = FALSE 
			AND InValidDataFromDrive = FALSE
			AND 
			(AxisState <> BASIC_STATE_HOME OR AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomingOnDrive =FALSE)
			THEN
	AxisState := BASIC_STATE_WAIT ;
END_IF
//0x100 bit comm error
IF (io_HW_State.9 = TRUE) AND AxisCtrlPtr^.Output.Status.Drive.ActiveHW  AND (AxisCtrlPtr^.Output.Status.CommunicationError = FALSE) THEN
	AxisCtrlPtr^.Output.Status.CommunicationError	:= TRUE;
	AxisState := ENTER_ETHERCAT_FAILURE ;	
ELSIF (io_HW_State.9 = FALSE) THEN
	AxisCtrlPtr^.Output.Status.CommunicationError	:= FALSE;	
END_IF	
	

IF (AxisCtrlPtr^.Input.Command.Stop = TRUE) THEN
		IF ((AxisState <> BASIC_STATE_READY) AND (AxisState <> BASIC_STATE_ERROR) AND (AxisState <> BASIC_STATE_STOP)) THEN
			(* reset all FB execute inputs we use *)

			ResetAll_MC_FB();			
			AxisState := BASIC_STATE_STOP;
		END_IF        
	END_IF  

IF InValidDataFromDriveTrig.EDGEPOS(InValidDataFromDrive) THEN
	AddNCError(18005,'InValidDataFromDrive : '); 
	AxisCtrlPtr^.Output.Status.AxisInitDone:= FALSE ;  
END_IF

IF 	AxisCtrlPtr^.Output.Error.ErrorCount <> 0 THEN	
	//LastAxisStep := AxisState ;s
	IF AxisState <> BASIC_STATE_ERROR THEN 
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Enter Error ',0,0,0);	
		AxisState := BASIC_STATE_ERROR;	
	END_IF


ELSIF AxisCtrlPtr^.Input.Command.AxisInit AND AxisState <> BASIC_STATE_ERROR THEN
	AxisCtrlPtr^.Input.Command.AxisInit := FALSE ;
	AxisCtrlPtr^.Output.Status.AxisInitDone := FALSE ;

	IF AxisCtrlPtr^.Output.Status.Drive.eUpdate_Staus <> enum_DriveUpdateStatus.UpDating THEN
		SS_Init := 0 ;
	END_IF
	
	fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Enter Init State',0,0,0);
	AxisState := BASIC_STATE_INIT ;
END_IF
IF AxisCtrlPtr^.Output.Status.AxisStatus.DriveDeviceError THEN 
	AxisCtrlPtr^.Output.Status.AxisInitDone := FALSE ;
	AxisCtrlPtr^.Output.Status.ReadyForCmd := FALSE ;
END_IF

IF AxisActive = FALSE THEN
	AxisState := BASIC_STATE_NOT_ACTIVE ;
END_IF

IF AxisActiveTrig.EDGENEG(AxisActive) THEN
	ResetAll_MC_FB() ;
	fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Axis Not Active',0,0,0);
END_IF

IF AxisActiveTrig.EDGEPOS(AxisActive) THEN
	AxisState := BASIC_STATE_INIT ;
	fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Axis is Active',0,0,0);
END_IF

CASE AxisState OF
	
	BASIC_STATE_INIT:
	
		IF THIS^.INIT() THEN
			AxisState := BASIC_STATE_WAIT;
		END_IF
		
	BASIC_STATE_WAIT:
		
		THIS^.WAIT();
		
	BASIC_STATE_POWER_ON:  (* STATE: Power on *)   
			//THIS^.Power(PowerOn := TRUE);
			IF (AxisCtrlPtr^.Output.Status.MC_Power.Status = TRUE) THEN
				AxisState := BASIC_STATE_READY;
			END_IF
	(******************** READY **********************)
	BASIC_STATE_READY:  (* STATE: Waiting for commands *)
		AxisCtrlPtr^.Output.Status.ReadyForCmd := TRUE ;
		AxisCtrlPtr^.Input.Command.ClearFault := FALSE ;
		IF AxisCtrlPtr^.Input.Command.Power AND NOT AxisCtrlPtr^.Output.Status.MC_Power.Status THEN
			AxisState := BASIC_STATE_POWER_ON;

		ELSIF (AxisCtrlPtr^.Input.Command.Home = TRUE)THEN
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Start Homing mode=%d',AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeMode,0,0);
			AxisCtrlPtr^.Input.Command.Home 		:= FALSE ;
			AxisCtrlPtr^.Output.Status.MC_Home.Done := FALSE ;
			THIS^.HomeDirect(FALSE);
			THIS^.HomeAbsSwitch(FALSE);
			HomeLagError(FALSE) ;
			HomeLagErrExternFeedBack(FALSE) ;
			HomeRefPulse(FALSE);
			DriveHomeRefPulse(FALSE);
			HomeAbsoluteEncoder(FALSE);
			HomeAbsEncLagError(FALSE);
			
			AxisState := BASIC_STATE_HOME;

		ELSIF (AxisCtrlPtr^.Input.Command.Stop = TRUE) THEN
			AxisCtrlPtr^.Output.Status.MC_Stop.Done := FALSE ;
			AxisState := BASIC_STATE_STOP;

		ELSIF (AxisCtrlPtr^.Input.Command.MoveJogPos = TRUE) THEN
			AxisState := BASIC_STATE_JOG_POSITIVE;

		ELSIF (AxisCtrlPtr^.Input.Command.MoveJogNeg = TRUE) THEN
			AxisState := BASIC_STATE_JOG_NEGATIVE;

		ELSIF (AxisCtrlPtr^.Input.Command.MoveAbsolute = TRUE) THEN
			AxisCtrlPtr^.Input.Command.MoveAbsolute := FALSE;
			AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.Done := FALSE ;
			AxisState := BASIC_STATE_MOVE_ABSOLUTE;

		ELSIF (AxisCtrlPtr^.Input.Command.MoveAdditive = TRUE) THEN
			AxisCtrlPtr^.Output.Status.MC_MoveAdditive.Done := FALSE ;
			AxisCtrlPtr^.Input.Command.MoveAdditive := FALSE;	
			AxisState := BASIC_STATE_MOVE_ADDITIVE;

		ELSIF (AxisCtrlPtr^.Input.Command.MoveRelative = TRUE) THEN
			AxisCtrlPtr^.Output.Status.MC_MoveRelative.Done := FALSE ;
			AxisCtrlPtr^.Input.Command.MoveRelative := FALSE;	
			AxisState := BASIC_STATE_MOVE_RELATIVE;
			
		ELSIF (AxisCtrlPtr^.Input.Command.MoveVelocity = TRUE) THEN
			AxisCtrlPtr^.Output.Status.MC_MoveVelocity.In_Velocity := FALSE ;
			AxisCtrlPtr^.Input.Command.MoveVelocity := FALSE;
			fbMC_MoveVel.Execute := FALSE;
			AxisState := BASIC_STATE_MOVE_VELOCITY;
  
		ELSIF (AxisCtrlPtr^.Input.Command.Halt = TRUE) THEN
			AxisCtrlPtr^.Input.Command.Halt := FALSE ;
			AxisCtrlPtr^.Output.Status.MC_Halt.Done := FALSE ;
			fbMC_Halt.Execute := FALSE;
			AxisState := BASIC_STATE_HALT; 	

		END_IF

	(******************** HOME **********************)
	BASIC_STATE_HOME:  (* STATE: start homing process *)
	
	//IF AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN 
			CASE AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeMode OF
					
				MC_DefaultHoming,(* default homing as defined in the SystemManager encoder parameters *)	           
 				MC_Direct:(* Static Homing forcing position from user reference *)  
				
					IF THIS^.HomeDirect(TRUE) THEN
						THIS^.HomeDirect(FALSE);
						AxisState := BASIC_STATE_READY;
					END_IF
					
    			MC_AbsSwitch:        (* Made in hp - Absolute Switch homing plus Limit switches *)
					 IF AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN(*Not simulator *)
						IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomingOnDrive THEN
							IF DriveHomeAbsSwitch(TRUE) THEN
								AxisCtrlPtr^.Output.Status.MC_Home.Done := TRUE;
								DriveHomeAbsSwitch(FALSE);
								AxisState := BASIC_STATE_READY;
							ELSE
								AxisCtrlPtr^.Output.Status.MC_Home.Done := FALSE;	
							END_IF
	
						ELSE
							IF HomeAbsSwitch(TRUE) THEN // Good for abs Encoder
								AxisCtrlPtr^.Output.Status.MC_Home.Done := TRUE;
								HomeAbsSwitch(FALSE);
								AxisState := BASIC_STATE_READY;
							ELSE
								AxisCtrlPtr^.Output.Status.MC_Home.Done := FALSE;	
							END_IF
						END_IF
					ELSE
						IF THIS^.HomeDirect(TRUE) THEN
							fnLogMsg(ADR(LogMsg_0),LOG_WARNING ,'There is no link simulate homing',0,0,0);
							THIS^.HomeDirect(FALSE);
							AxisState := BASIC_STATE_READY;
						END_IF
					END_IF	
	
					
    			MC_LimitSwitch:     (* Made in hp - Homing against Limit switches *)
				
   				MC_RefPulse:        (* Made in hp - Homing using encoder Reference Pulse "Zero Mark" *)
					IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomingOnDrive AND AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN
						IF DriveHomeRefPulse(TRUE) THEN
							AxisCtrlPtr^.Input.Command.Home 		:= FALSE;
							AxisCtrlPtr^.Output.Status.MC_Home.Done := TRUE;
							
							DriveHomeRefPulse(FALSE);
							AxisState := BASIC_STATE_READY;
						ELSE
							AxisCtrlPtr^.Output.Status.MC_Home.Done := FALSE;
						END_IF

					ELSE
						IF HomeRefPulse(TRUE) THEN


							HomeRefPulse(FALSE);
							AxisState := BASIC_STATE_READY;
						END_IF
					END_IF	
					
    			MC_Absolute:         (*   Static Homing forcing position from absolute encoder *)
				
						IF HomeAbsoluteEncoder(TRUE) THEN
							AxisCtrlPtr^.Output.Status.MC_Home.Done := TRUE;
							HomeAbsoluteEncoder(FALSE);
							AxisState := BASIC_STATE_READY;
						END_IF
						
				
   				MC_Block:            (* not implemented - Homing against hardware parts blocking movement *)
						IF AxisCtrlPtr^.Output.Status.Drive.ActiveHW THEN
							IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomingOnDrive THEN
								
								IF DriveHomeLagError(TRUE) THEN
									AxisState := BASIC_STATE_READY;
									DriveHomeLagError(FALSE);
								END_IF 
							ELSE
								IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.eEncoderType = E_EncoderType.Absolute THEN
									 IF HomeAbsEncLagError(TRUE) THEN		
										HomeAbsEncLagError(FALSE);					
										AxisState := BASIC_STATE_READY;
									END_IF
								ELSE	
									IF HomeLagError(TRUE) THEN		
										HomeLagError(FALSE);					
										AxisState := BASIC_STATE_READY;
									END_IF
								END_IF	
							END_IF							
						ELSE
							IF THIS^.HomeDirect(TRUE) THEN
								fnLogMsg(ADR(LogMsg_0),LOG_WARNING ,'There is no link simulate homing',0,0,0);
								THIS^.HomeDirect(FALSE);
								AxisState := BASIC_STATE_READY;
							END_IF
					END_IF		
						
   				MC_ForceCalibration: (* set the calibration flag without perfomring any motion or changing the position *)
    			MC_ResetCalibration : (* resets the calibration flag without perfomring any motion or changing the position *)
			
			END_CASE	
		

			
	(*	ELSE
			IF THIS^.HomeDirect(TRUE) THEN
				fnLogMsg(ADR(LogMsg_0),LOG_WARNING ,'There is no link simulate homing',0,0,0);
				THIS^.HomeDirect(FALSE);
				AxisState := BASIC_STATE_READY;
			END_IF
		END_IF*)
		IF AxisState = BASIC_STATE_READY AND BASIC_STATE_ERROR <>  AxisState THEN
			AxisCtrlPtr^.Input.Command.Home 		:= FALSE;
			AxisCtrlPtr^.Output.Status.MC_Home.Done := TRUE;
			HomingActive := FALSE;
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Home finished Type=%d',AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeMode,0,0);
		END_IF
	
	BASIC_STATE_STOP:
	
		IF THIS^.Stop() THEN
			AxisState := BASIC_STATE_READY;
		END_IF
		
	BASIC_STATE_HALT:
	
		fbMC_Halt.Execute := TRUE;
		
		AxisState := BASIC_STATE_READY;
		
	BASIC_STATE_MOVE_ABSOLUTE:
	
		IF NOT fbMC_MoveAbs.Active THEN
			fbMC_MoveAbs.Execute := TRUE;
		ELSE
			fbMC_MoveAbs1.Execute := TRUE;
		END_IF
		
		AxisState := BASIC_STATE_READY;
		
	BASIC_STATE_MOVE_ADDITIVE:
	
		IF NOT fbMC_MoveAdd.Active THEN
			fbMC_MoveAdd.Execute := TRUE;
		ELSE
			fbMC_MoveAdd1.Execute := TRUE;
		END_IF
		
		AxisState := BASIC_STATE_READY;
		
	BASIC_STATE_MOVE_RELATIVE:
	
		IF NOT fbMC_MoveRel.Active THEN
			fbMC_MoveRel.Execute := TRUE;
		ELSE(*IF NOT fbMC_MoveRel1.Active THEN*)
			fbMC_MoveRel1.Execute := TRUE;
		END_IF
		
		AxisState := BASIC_STATE_READY;
	
	BASIC_STATE_MOVE_VELOCITY:
		fbMC_MoveVel.Execute := TRUE;
		AxisState := BASIC_STATE_READY;
		
	BASIC_STATE_JOG_POSITIVE:
	
		IF THIS^.Jog() THEN
			AxisState := BASIC_STATE_READY;
		END_IF
		
	BASIC_STATE_JOG_NEGATIVE:
		IF THIS^.Jog() THEN
			AxisState := BASIC_STATE_READY;
		END_IF		
		
	BASIC_STATE_ERROR:
		AxisCtrlPtr^.Input.Command.Power := FALSE ;
		AxisCtrlPtr^.Output.Status.FAULT := TRUE ;	
		AxisCtrlPtr^.Output.Status.ReadyForCmd := FALSE ;
		IF AxisCtrlPtr^.Input.Command.ErrorAcknowledge  THEN
			AxisCtrlPtr^.Input.Command.ErrorAcknowledge	:= FALSE;
			AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPop();
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Error pop',0,0,0);
		END_IF	
		
		IF AxisCtrlPtr^.Input.Command.ClearFault = TRUE THEN
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'sClear fault',0,0,0);
			AxisCtrlPtr^.Input.Command.ClearFault := FALSE ;
			AxisCtrlPtr^.Output.Status.FAULT := FALSE ;
		END_IF
		
		IF AxisCtrlPtr^.Output.Error.ErrorCount = 0 AND AxisCtrlPtr^.Output.Status.FAULT = FALSE AND 
			((io_HW_State = 8) OR (AxisCtrlPtr^.Output.Status.Drive.ActiveHW = FALSE))   THEN
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Exit Error State',0,0,0);
			AxisState := BASIC_STATE_WAIT;
		END_IF
		
		(* reset all FB execute inputs we use *)
		THIS^.ResetAll_MC_FB();
		
		
	ENTER_ETHERCAT_FAILURE:
	
		AxisCtrlPtr^.Input.Command.Power := FALSE ;
		AxisCtrlPtr^.Output.Status.FAULT := TRUE ;	
		AxisCtrlPtr^.Output.Status.ReadyForCmd := FALSE ;
		
		tmp_ErrorEntry.ErrorId		:= ErrorId;
	    
		tmp_ErrorEntry.ErrorText	:= 'Ether Cat error';
		
		tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, UDINT_TO_STRING(tmp_ErrorEntry.ErrorId));
		tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, ' Task: ');
		tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, AxisCtrlPtr^.Input.Parameter.ThreadName);	
		tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, FC_NcErrorMsg(tmp_ErrorEntry.ErrorId));
	
		IF ErrorId <> 18000 THEN	
			fnLogMsg(ADR(LogMsg_0),LOG_ERROR,tmp_ErrorEntry.ErrorText,0,0,0);	
			
			tmp_ErrorEntry.MotorEvents := CreateNCErrMsgDetails(tmp_ErrorEntry.ErrorId);
			
			AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);
		ELSE
			NCError18000 := TRUE;
		END_IF
		
		(* reset all FB execute inputs we use *)
		THIS^.ResetAll_MC_FB();
		AxisState := BASIC_STATE_ERROR ;
		
END_CASE

IF (LastAxisStep <> AxisState) AND ChangeStateLogEnable THEN
	fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Cng State CurSt=%d LstSt=%d',AxisState,LastAxisStep,0);
	LastAxisStep := AxisState ;
END_IF	


THIS^.Power(PowerOn := AxisCtrlPtr^.Input.Command.Power OR AxisCtrlPtr^.Output.Status.AxisStatus.ErrorPropagationDelayed);
fbMC_Stop(Axis := AxisRef) ;
fbMC_Halt(Axis := AxisRef) ;


THIS^.ReadStatus(FALSE);

IF NOT HomingActive THEN
	MoveAbs();
	MoveAdd();
	MoveRelative();
	MoveVelo();
END_IF
Halt();

SetOverride();
DriveErrorHandling();	

AxisCtrlPtr^.Output.Error.ErrorCount := UDINT_TO_UINT(AxisCtrlPtr^.Output.Error.fbErrorHandler.EntriesCount);
AxisCtrlPtr^.Output.Error.ErrorEntry := AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorRead();

//AxisCtrlPtr^.Output.Error.ErrorID	 := tmp_ErrorEntry.ErrorId;
//AxisCtrlPtr^.Output.Error.ErrorText	 := tmp_ErrorEntry.ErrorText;
		
StatusUpdate();
MonitorUpdate();



//fnLogTransfer FUNCTION call
fnLogTransfer(ADR(LogMsg_0));

//InValidDataFromDrive:= AxisRef.NcToPlc.StateDWord.30;

]]></ST>
    </Implementation>
    <Folder Name="Homing" Id="{cbdb241c-c961-0349-2671-d2fed64446aa}" />
    <Folder Name="MonitorMethods" Id="{55a86469-779e-4cc4-831b-14539e71f05f}" />
    <Folder Name="MoveMethods" Id="{b6879feb-d388-4a49-8624-c34fca59352e}" />
    <Folder Name="ServiceFBs" Id="{2f5bb57e-88a2-45fe-9c15-5eae207e3835}" />
    <Folder Name="ServiceMethods" Id="{cf72f8d7-3441-4297-bb34-b27201aa381a}" />
    <Folder Name="StatusMethods" Id="{b0850375-a8a2-489e-b5a7-8ddbbc4547de}" />
    <Method Name="AddNCError" Id="{cc8e9609-08af-08cb-1d8d-9cb8dc6c1913}" FolderPath="ServiceMethods\">
      <Declaration><![CDATA[METHOD AddNCError : BOOL
VAR_INPUT
	ErrorId			: UDINT;
	ErrorPrefix     : STRING[100];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF io_HW_State=8 THEN
	
	tmp_ErrorEntry.ErrorId		:= ErrorId;
	
	tmp_ErrorEntry.ErrorText	:= ErrorPrefix;
	
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, UDINT_TO_STRING(tmp_ErrorEntry.ErrorId));
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, ' Task: ');
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, AxisCtrlPtr^.Input.Parameter.ThreadName);	
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, FC_NcErrorMsg(tmp_ErrorEntry.ErrorId));
	
	IF ErrorId <> 18000 THEN	
		fnLogMsg(ADR(LogMsg_0),LOG_ERROR,tmp_ErrorEntry.ErrorText,0,0,0);	
		
		tmp_ErrorEntry.MotorEvents := CreateNCErrMsgDetails(tmp_ErrorEntry.ErrorId);
		
		AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);
	ELSE
		NCError18000 := TRUE;
	END_IF
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveErrorHandling" Id="{11edde89-86e1-077f-3f32-cbfc07d8b444}">
      <Declaration><![CDATA[METHOD DriveErrorHandling : BOOL
 
VAR_INST

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveHomeAbsSwitch" Id="{b5806a64-e67f-07c7-2bde-229a6b648fb4}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD PROTECTED DriveHomeAbsSwitch : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
	State:INT;	
	HomeTrig: Trigger;
	Reset:BOOL;	
	sensorOn : BOOL ;//satatus of the sensor of the begining of the homing
	sensorOff : BOOL ;//satatus of the sensor of the begining of the homing
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveHomeLagError" Id="{f48cadbb-5b6e-09ff-1667-d11a0bb1dfcf}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD DriveHomeLagError : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
//	State:INT;	
//	HomeTrig: Trigger;
//	Reset:BOOL;	
//	Delay:	TON;		
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveHomeRefPulse" Id="{1ce2e532-26ae-0f40-31b7-bd89d813cd27}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD PROTECTED DriveHomeRefPulse : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST

END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="DriveUnitsTorqueToRealValue" Id="{069c8d84-fe4b-4b95-aefa-15cba6761173}" FolderPath="ServiceMethods\">
      <Declaration><![CDATA[METHOD DriveUnitsTorqueToRealValue : LREAL
VAR_INPUT
	
	Torque: LREAL;	

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DriveUnitsTorqueToRealValue := Torque;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Halt" Id="{8e920b1b-205b-0036-1749-506ecd948fe1}">
      <Declaration><![CDATA[METHOD PRIVATE Halt : BOOL
VAR_INPUT
	
END_VAR
VAR_INST
	errorTrig : Trigger ;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	Halt :=  FALSE ;
	fbMC_Halt.Deceleration 	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
	fbMC_Halt.Jerk 			:= AxisCtrlPtr^.Input.Parameter.Jerk;
	fbMC_Halt.Options 		:= AxisCtrlPtr^.Input.Parameter.Options;

	
	//fbMC_Halt.Execute := TRUE;
	//AxisCtrlPtr^.Output.Status.MC_Halt.Done := FALSE ;
	(* if axis is stopped go to ready state *)
	IF (fbMC_Halt.Done = TRUE) THEN
		Halt :=  TRUE ;
		AxisCtrlPtr^.Input.Command.Halt := FALSE;
		AxisCtrlPtr^.Output.Status.MC_Halt.Done := TRUE ;
		fbMC_Halt.Execute := FALSE;
	END_IF
	(* check if error occured *)
	IF errorTrig.EDGEPOS(fbMC_Halt.Error) THEN
		
		// Add FB Error to ErrorHandler
		AddNCError(fbMC_Halt.ErrorID , 'NC Error fbMC_Halt ErrorID: ');	
		
		Halt :=  FALSE ;
		AxisCtrlPtr^.Input.Command.Halt := FALSE;
		fbMC_Halt.Execute := FALSE;
		//AxisState := BASIC_STATE_ERROR;
	END_IF
	
	{warning disable C0371}
	//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
	fbMC_Halt(Axis := AxisRef) ;
	{warning restore C0371}
	
	IF fbMC_Halt.CommandAborted THEN
		AxisCtrlPtr^.Input.Command.Halt := FALSE;
		AxisCtrlPtr^.Output.Status.MC_Halt.Done := TRUE ;
		fbMC_Halt.Execute := FALSE;
	END_IF
	
	AxisCtrlPtr^.Output.Status.MC_Halt.Busy 			:= fbMC_Halt.Busy ;
	AxisCtrlPtr^.Output.Status.MC_Halt.CommandAborted 	:= fbMC_Halt.CommandAborted ;
	AxisCtrlPtr^.Output.Status.MC_Halt.Active 			:= fbMC_Halt.Active ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeAbsEncLagError" Id="{47657b23-7d43-4d50-a6d7-0c75efe4bd2d}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD HomeAbsEncLagError : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
	LagErrorState : INT;
	HomingLagErrorTrig: 		Trigger;
	io_TorqueLimitPersent_Mem:	UINT;
	PositionBias:				LREAL;	
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset:= Execute;
IF HomeTrig.EDGEPOS(Reset) THEN
	Reset:=	FALSE;
	LagErrorState:=1;
	HomingActive:= 	TRUE ;
	AxisCtrlPtr^.Output.Status.MC_Home.Done:= FALSE ;
	fbMC_MoveVel.Execute:= FALSE ;
	fbMC_MoveRel.Execute:= FALSE ;
END_IF

IF Execute THEN
	CASE LagErrorState OF
		
		1:		
						 		
	
			IF WriteNC_AxisBoolParam(MC_AxisParameter:=MC_AxisParameter.EnablePosLagMonitoring,ParamValue:=FALSE) THEN
				LagErrorState:= LagErrorState +1;	
			END_IF
																
		2: 										
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.eNEGATIVE THEN								
				fbMC_MoveVel.Direction:= 	MC_Negative_Direction;  					
			ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.ePOSITIVE THEN								
				fbMC_MoveVel.Direction:= 	MC_Positive_Direction;										
			END_IF
			
			fbMC_MoveVel.Velocity:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.SwitchVelo;
	
			fbMC_MoveVel.Execute:= 	TRUE ;
			
			LagErrorState:= LagErrorState + 1;
			
		3: 	
			IF (ABS(AxisCtrlPtr^.Output.monitor.ActLagError) > AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.LagErr) THEN
				LagErrorState:= LagErrorState + 1;	
			END_IF
		
		4:	
			IF Stop() THEN
				LagErrorState:= LagErrorState + 1;
				Delay(IN:=	FALSE);					
			END_IF
					
		5:	
			Delay(IN:=	TRUE,PT:=T#1S);		
			IF Delay.Q THEN
				Delay(IN:=FALSE);	
				LagErrorState:= LagErrorState +1;
			END_IF
				
		6: 
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.eNEGATIVE THEN													
				fbMC_MoveRel.Distance:=		AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.TriggerOffsetPos ;					
			ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.ePOSITIVE THEN								
				fbMC_MoveRel.Distance:=		AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.TriggerOffsetPos*(-1) ;											
			END_IF
			fbMC_MoveRel.Velocity:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo;
			
			fbMC_MoveRel.Execute:= 	TRUE ;
			LagErrorState:= LagErrorState + 1;
	 		
					
		7:	
			IF fbMC_MoveRel.Done THEN
				AxisCtrlPtr^.Output.monitor.stAbsEncoder.BlockOffsetPosition := AxisCtrlPtr^.Output.monitor.ActPosition ;
 
				LagErrorState:= 100;
			END_IF
			
 
																				
		100:			
			AxisCtrlPtr^.Input.Command.Home:= FALSE ;
			HomingActive:= 				FALSE;
			fbMC_Home.Execute:= 		FALSE;
			AxisCtrlPtr^.Output.Status.MC_Home.Done:= TRUE ;
			HomeAbsEncLagError:=	TRUE;
			LagErrorState:= 0;		
	END_CASE

END_IF
 
			
fbMC_MoveVel.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Acc;  
fbMC_MoveVel.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Dcc;  
fbMC_MoveVel.Jerk			:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Jerk;
fbMC_MoveVel.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
fbMC_MoveVel.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;

fbMC_MoveRel.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Acc; 
fbMC_MoveRel.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Dcc;
fbMC_MoveRel.Jerk			:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Jerk;
fbMC_MoveRel.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
fbMC_MoveRel.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;

{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>

fbMC_Home(Axis:= AxisRef);	
fbMC_MoveVel(Axis:= AxisRef);
fbMC_MoveRel(Axis:= AxisRef);

fbMC_Stop.Deceleration:= 	AxisCtrlPtr^.Input.Parameter.Deceleration;
fbMC_Stop.Jerk:=			AxisCtrlPtr^.Input.Parameter.Jerk;
fbMC_Stop.Options:= 		AxisCtrlPtr^.Input.Parameter.Options;
fbMC_Stop(Axis := AxisRef) ;
{warning restore C0371}

THIS^.HomingGlobalHandle();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeAbsoluteEncoder" Id="{bd961206-b728-4564-91b8-16a3672c4253}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD HomeAbsoluteEncoder : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR
VAR_INST
	adsReadFB : ADSRead;
	HomeAbsoluteEncState : INT;	
	PrevHomeAbsoluteEncState : INT;	
	fbReadParam_ScalingFactor:	MC_ReadParameter;
	OffsetPos :LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF HomeTrig.EDGEPOS(Execute) THEN
	HomeAbsoluteEncState := 1;
	HomingActive:= 		TRUE ;
	HomeAbsoluteEncoder := FALSE;

END_IF	
	
//
	CASE HomeAbsoluteEncState OF
		1:
			fbMC_Home.Execute:= FALSE;
			HomeAbsoluteEncState := HomeAbsoluteEncState+1;	
		2:
			
			fbMC_Home.Position 		:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeSetPos;
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Call Abs Encoder homing home direct Done',0,0,0);
			fbMC_Home.Execute:= TRUE;
			fbMC_Home.HomingMode 					:= MC_Direct ;
			fbMC_Home.Options.ClearPositionLag 		:= TRUE ;
			HomeAbsoluteEncState := HomeAbsoluteEncState+1;		 	
		(*	IF HomeDirect(TRUE) THEN
				fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Abs Encoder homing home direct Done ',0,0,0);
				HomeDirect(FALSE);
				HomeAbsoluteEncState := HomeAbsoluteEncState+1;		
			END_IF*)
			
		3:
		
			IF fbMC_Home.Done THEN
				AxisCtrlPtr^.Input.Command.Home 		:= FALSE;
				fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Wait home abs by direct done',0,0,0);
			 		 
				fbMC_Home.Execute := FALSE;
 				HomeAbsoluteEncState := HomeAbsoluteEncState+2;
				 
			END_IF
		(*	 IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.AlignPos <> AxisCtrlPtr^.Output.monitor.ActPosition THEN
				 fbMC_MoveAbs.Position :=  AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.AlignPos;
				 
				 fbMC_MoveAbs.Velocity :=  AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.SwitchVelo;
				 fbMC_MoveAbs.Acceleration := AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Acc;
				 fbMC_MoveAbs.Deceleration := AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.Dcc;
				 fbMC_MoveAbs.Execute := TRUE;
			 
				 HomeAbsoluteEncState := HomeAbsoluteEncState+1;
			 ELSE*)
				
				 
			// END_IF		 
		4:		
		    
			IF  fbMC_MoveAbs.Done THEN
				fbMC_MoveAbs.Execute := FALSE;			
		 		HomeAbsoluteEncState := HomeAbsoluteEncState+1;
			END_IF	
		5: 
			HomeAbsoluteEncoder:= TRUE;
			
	END_CASE
	
	
	IF PrevHomeAbsoluteEncState <> HomeAbsoluteEncState THEN
		fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Abs Encoder homing step %d',HomeAbsoluteEncState,0,0);
		PrevHomeAbsoluteEncState := HomeAbsoluteEncState;
	END_IF	
{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>	
fbMC_MoveAbs(Axis := AxisRef);

//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_Home(Axis:= AxisRef);



fbReadParam_ScalingFactor(Axis:=AxisRef);

{warning restore C0371}



adsReadFB();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeAbsSwitch" Id="{0f502225-5d3c-02eb-3841-61053c4f08db}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD PROTECTED HomeAbsSwitch : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
	State:INT;	
	PrevAbsHomeState:INT;
	HomeTrig: Trigger;
	Reset:BOOL;	
	sensorOn : BOOL ;//satatus of the sensor of the begining of the homing
	sensorOff : BOOL ;//satatus of the sensor of the begining of the homing
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset:= Execute;
IF HomeTrig.EDGEPOS(Reset) THEN
	Reset:=				FALSE;
	State:=				0;
	sensorOn:= 			FALSE ;
	sensorOff:= 		FALSE ;	
	HomeAbsSwitch:= 	FALSE ;
	HomingActive:= 		TRUE ;
	AxisCtrlPtr^.Output.Status.MC_Home.Done := FALSE ;
	fbMC_MoveVel.Execute:= FALSE ;
END_IF


IF Execute THEN
	CASE State OF
		
		0: 
							
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.pSignalInput^ THEN
			
				IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
					
						fbMC_MoveVel.Direction      := MC_Positive_Direction; 
						
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN
					
						fbMC_MoveVel.Direction      := MC_Negative_Direction;
				
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN
					
						fbMC_MoveVel.Direction      := MC_Positive_Direction;

				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
					
						fbMC_MoveVel.Direction      := MC_Negative_Direction;
					
				END_IF
				
				fbMC_MoveVel.Velocity      	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.SwitchVelo;
				fbMC_MoveVel.Execute 		:= TRUE ;
				sensorOn := TRUE ;
				State := 1 ;
				
			ELSE
				
				IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
						
						fbMC_MoveVel.Direction      := MC_Negative_Direction; 
						
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN
					
					fbMC_MoveVel.Direction      := MC_Positive_Direction;
						
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN
					
					fbMC_MoveVel.Direction      := MC_Negative_Direction;

				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
					
					fbMC_MoveVel.Direction      := MC_Positive_Direction;
					
				END_IF
				
				sensorOff := TRUE ;
				fbMC_MoveVel.Velocity      	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.SwitchVelo;
				fbMC_MoveVel.Execute 		:= TRUE ;
				State := 1 ;
				
			END_IF
					
			fbMC_MoveVel1.Execute 		:= FALSE ;
	
		1:
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.pSignalInput^ = FALSE AND sensorOn = TRUE  THEN
				
				IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
					
						fbMC_MoveVel1.Direction      := MC_Negative_Direction; 
						State := 3 ;
						
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN

						
						fbMC_MoveVel1.Direction      := MC_Positive_Direction;
						State := 3 ;
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN
						
						fbMC_MoveVel1.Direction      := MC_Negative_Direction;
						State := 2 ;
					
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
				
					
						fbMC_MoveVel1.Direction      := MC_Positive_Direction;
						State := 2 ;
				END_IF
				
				fbMC_MoveVel1.Velocity      	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo;
				fbMC_MoveVel1.Execute 		:= TRUE ;
				
			ELSIF  AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.pSignalInput^ = TRUE AND sensorOff = TRUE THEN
				
				IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
						IF THIS^.Stop() THEN
							fbMC_MoveVel1.Direction      := MC_Positive_Direction; 
							fbMC_MoveVel1.Velocity      	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo;
							fbMC_MoveVel1.Execute 		:= TRUE ;
							State := 2 ;
						END_IF
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
						AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN
							IF THIS^.Stop() THEN
								fbMC_MoveVel1.Direction      := MC_Negative_Direction;
								fbMC_MoveVel1.Velocity      	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo;
								fbMC_MoveVel1.Execute 		:= TRUE ;
								State := 2 ;
							END_IF
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN
						IF THIS^.Stop() THEN
							fbMC_MoveVel1.Direction      := MC_Positive_Direction;
							fbMC_MoveVel1.Velocity      	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo;
							fbMC_MoveVel1.Execute 		:= TRUE ;
							State := 4 ;
						END_IF
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
						IF THIS^.Stop() THEN
							fbMC_MoveVel1.Direction      := MC_Negative_Direction;
							fbMC_MoveVel1.Velocity      	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo;
							fbMC_MoveVel1.Execute 		:= TRUE ;
							State := 4 ;
						END_IF
				END_IF
				
				
				
				
			END_IF
		
		2:
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.pSignalInput^ = FALSE THEN
				
				IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
					
						fbMC_MoveVel.Direction      := MC_Negative_Direction; 
						fbMC_MoveVel.Execute 		:= TRUE ;
						State := 3 ;
						
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN
						
						fbMC_MoveVel.Direction      := MC_Positive_Direction;
						fbMC_MoveVel.Execute 		:= TRUE ;
						State := 3 ;
				END_IF
						
			ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.pSignalInput^ = TRUE  THEN			
				IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.eNEGATIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.ePOSITIVE THEN
						
						fbMC_MoveVel.Direction      := MC_Positive_Direction;
						fbMC_MoveVel.Execute 		:= TRUE ;
						State := 4 ;
					
				ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.SensorEdgeSignal = eHomeModeOption.ePOSITIVE 
					AND AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.Trigger_Direction = eHomeModeOption.eNEGATIVE THEN
					
						fbMC_MoveVel.Direction      := MC_Negative_Direction;
						fbMC_MoveVel.Execute 		:= TRUE ;
						State := 4 ;
				END_IF		
			END_IF
				
			fbMC_MoveVel.Velocity      	:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo;
			
						
		3:
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.pSignalInput^ = TRUE THEN			
				State := 5 ;				
			END_IF

		4:
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stAbsSwitch.pSignalInput^ = FALSE THEN
				State:= 5 ;
			END_IF
			
		5:	IF THIS^.Stop() THEN
				fbMC_Home.HomingMode:= 	MC_Direct ;		
				fbMC_Home.Position:= 	AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeSetPos;
				fbMC_Home.Execute:= 	TRUE;
				State := 100 ;
			END_IF	
			
		100:
			IF fbMC_Home.Done THEN
				AxisCtrlPtr^.Input.Command.Home 		:= FALSE ;
				HomingActive := FALSE ;
				HomeAbsSwitch := TRUE ;
				fbMC_Home.Execute := FALSE;
				AxisCtrlPtr^.Output.Status.MC_Home.Done := TRUE ;
				Execute := FALSE ;
				State := 0 ;
			END_IF
	END_CASE

END_IF



	IF PrevAbsHomeState <> State THEN
		fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Abs SW homing step %d',State,0,0);
		PrevAbsHomeState := State;
	END_IF	
{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_Home(Axis:= AxisRef);	

fbMC_MoveVel.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.Acceleration;
fbMC_MoveVel.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
fbMC_MoveVel.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
fbMC_MoveVel.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
fbMC_MoveVel.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;
fbMC_MoveVel(Axis:= AxisRef);

fbMC_MoveVel1.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.Acceleration;
fbMC_MoveVel1.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
fbMC_MoveVel1.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
fbMC_MoveVel1.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
fbMC_MoveVel1.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;
fbMC_MoveVel1(Axis:= AxisRef);
{warning restore C0371}


THIS^.HomingGlobalHandle();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeDirect" Id="{3d1aaff9-b664-0fdf-0f27-e141e59b8817}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD PROTECTED HomeDirect : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
	State:INT;	
	HomeTrig: Trigger;
	Reset:BOOL;	
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset:= Execute;
IF HomeTrig.EDGEPOS(Reset) THEN
	State:=0;
	HomeDirect:= FALSE ;
	HomingActive:= TRUE ;
	AxisCtrlPtr^.Output.Status.MC_Home.Done := FALSE ;
END_IF



IF Execute THEN
	CASE State OF
		0:
			AxisCtrlPtr^.Input.Command.Home 		:= FALSE ;
			fbMC_Home.HomingMode 					:= MC_Direct ;
			fbMC_Home.Options.ClearPositionLag 		:= TRUE ;
			IF MC_Block <> AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeMode THEN
				fbMC_Home.Position 						:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeSetPos;
				fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Home Direct',0,0,0);
			ELSE
				fbMC_Home.Position 						:= AxisCtrlPtr^.Output.monitor.ActPosition;
				fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Home Direct Set Act Pos For block',0,0,0);
			END_IF		
			fbMC_Home.Execute:= TRUE;
			State := 1 ;
			
		1:
			IF fbMC_Home.Done THEN
				AxisCtrlPtr^.Input.Command.Home 		:= FALSE;
				HomingActive := FALSE ;
				HomeDirect := TRUE ;
				fbMC_Home.Execute := FALSE;
				AxisCtrlPtr^.Output.Status.MC_Home.Done := TRUE;
				State := 0 ;
			END_IF
	END_CASE

END_IF

{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_Home(Axis:= AxisRef);
{warning restore C0371}

THIS^.HomingGlobalHandle();
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeLagErrExternFeedBack" Id="{1d59e922-10b1-06a0-0d20-401eba29a568}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD HomeLagErrExternFeedBack : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST

		
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeLagError" Id="{7ac34fd0-426a-0949-1c32-d5aa9bbb98fb}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD HomeLagError : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
//	State:INT;	
//	HomeTrig: Trigger;
//	Reset:BOOL;	
//	Delay:	TON;	
	LagErrorPrevState : INT;	
	MonitorValue : BOOL;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset:= Execute;
IF HomeTrig.EDGEPOS(Reset) THEN
	Reset:=	FALSE;
	State:=0;
	HomeLagError:= FALSE ;
	HomingActive:= 	TRUE ;
	AxisCtrlPtr^.Output.Status.MC_Home.Done:= FALSE ;
	fbMC_MoveVel.Execute:= FALSE ;
	fbMC_MoveRel.Execute:= FALSE ;
END_IF


IF Execute THEN
	CASE State OF
		0:
			IF ReadNC_AxisBoolParam(MC_AxisParameter:=MC_AxisParameter.EnablePosLagMonitoring,
				ParamValue => MonitorValue 
				) THEN
				
				State:= State +1;	
			END_IF
		1:	
			IF WriteNC_AxisBoolParam(MC_AxisParameter:=MC_AxisParameter.EnablePosLagMonitoring,ParamValue:=FALSE) THEN
				State:= State +1;	
			END_IF
							
		2: 										
			IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.eNEGATIVE THEN								
				fbMC_MoveVel.Direction:= 	MC_Negative_Direction; 					
			ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.ePOSITIVE THEN								
				fbMC_MoveVel.Direction:= 	MC_Positive_Direction;										
			END_IF
			
			fbMC_MoveVel.Velocity:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.SwitchVelo;
	
			fbMC_MoveVel.Execute:= 	TRUE ;
			
			State:= State + 1;
			
		3: 	
			IF (ABS(AxisCtrlPtr^.Output.monitor.ActLagError) > AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.LagErr) THEN
				State:= State + 1;	
			END_IF
		
		4:	
			IF THIS^.Stop() THEN			
				State:= State + 1;	
			END_IF
			
		5:	
			IF MonitorValue THEN
				IF WriteNC_AxisBoolParam(MC_AxisParameter:=MC_AxisParameter.EnablePosLagMonitoring,ParamValue:=TRUE) THEN
					Delay(IN:=FALSE);	
					State:= State +1;	
				END_IF
			ELSE
				State:= State +1;
			END_IF	
			
		6:	Delay(IN:=	TRUE,PT:=	T#2S);		
			IF Delay.Q THEN
				State:= State +1;
			END_IF
																
		7:		
			fbMC_Home.HomingMode:= 	MC_Direct ;
			fbMC_Home.Position:= 	0;
			fbMC_Home.Execute:= 	TRUE;	
			State:= State + 1;
							
		8:	
			IF fbMC_Home.Done THEN
				fbMC_Home.Execute := FALSE;		
				IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.TriggerOffsetPos <> 0 THEN
					IF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.eNEGATIVE THEN													
						fbMC_MoveRel.Distance:=		AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.TriggerOffsetPos ;					
					ELSIF AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.StartDirection = eHomeModeOption.ePOSITIVE THEN								
						fbMC_MoveRel.Distance:=		AxisCtrlPtr^.Input.Parameter.HomeOptions.stLagErr.TriggerOffsetPos*(-1) ;											
					END_IF
					fbMC_MoveRel.Velocity:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.TriggerVelo;				
					State:= State + 1;	
				ELSE
					State := 90 ;
				END_IF
			END_IF
		9:
			fbMC_MoveRel.Execute:= 	TRUE ;
			State:= State + 1;	
	
		10:	IF fbMC_MoveRel.Done THEN
				State := 90 ;
			END_IF
			
		90:	
			fbMC_Home.HomingMode:= 	MC_Direct ;
			fbMC_Home.Position:= 	AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeSetPos - AxisCtrlPtr^.Output.monitor.ActLagError; 
			fbMC_Home.Execute:= 	TRUE;	
			State := 100 ;
																											
		100:
			IF fbMC_Home.Done THEN
				AxisCtrlPtr^.Input.Command.Home:= FALSE ;
				HomingActive:= 		FALSE;
				HomeLagError:= 		TRUE;
				fbMC_Home.Execute:= FALSE;
				AxisCtrlPtr^.Output.Status.MC_Home.Done:= TRUE ;
				Execute:= 			FALSE ;
				State:= 0 ;
			END_IF
	END_CASE
	
 	IF LagErrorPrevState <> State THEN
		fnLogMsg(ADR(LogMsg_0),LOG_INFO,'PLC Level Lag Err step %d',State,0,0);
		LagErrorPrevState := State;
	END_IF	
END_IF
 

fbMC_MoveVel.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.Acceleration;
fbMC_MoveVel.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
fbMC_MoveVel.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
fbMC_MoveVel.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
fbMC_MoveVel.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;

fbMC_MoveRel.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.Acceleration;
fbMC_MoveRel.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
fbMC_MoveRel.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
fbMC_MoveRel.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
fbMC_MoveRel.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;

{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_Home(Axis:= AxisRef);	
fbMC_MoveVel(Axis:= AxisRef);
fbMC_MoveRel(Axis:= AxisRef);
{warning restore C0371}



THIS^.HomingGlobalHandle();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeRefPulse" Id="{9d6f4bb0-0bfc-0d8d-0a0e-add33bbea694}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD PROTECTED HomeRefPulse : BOOL
VAR_INPUT
	Execute: BOOL;
END_VAR

VAR_INST
	adsReadFB : ADSRead;
	HomeRefState : INT;
	
	fbReadParam_ScalingFactor:	MC_ReadParameter;
	OffsetPos :LREAL;
END_VAR
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF HomeTrig.EDGEPOS(Execute) THEN
	HomeRefState := 1;
	HomingActive:= 		TRUE ;
	HomeRefPulse := FALSE;
END_IF	
	
//
	CASE HomeRefState OF
		1:
		
		
			
			fbReadParam_ScalingFactor.ReadMode:=	READMODE_ONCE;
			fbReadParam_ScalingFactor.ParameterNumber:= AxisEncoderScalingNumerator;

			IF NOT fbReadParam_ScalingFactor.Busy THEN
				fbReadParam_ScalingFactor.Enable:=	TRUE;
				HomeRefState := HomeRefState+1;
			END_IF

			

		2:	
			IF NOT fbReadParam_ScalingFactor.Valid THEN
				fbReadParam_ScalingFactor.Enable:=	TRUE;
			END_IF
			
			IF fbReadParam_ScalingFactor.Valid THEN
				fbReadParam_ScalingFactor.Enable:=	FALSE;
				ScalingNumerator :=fbReadParam_ScalingFactor.Value;
				//OffsetPos  := LMOD(AxisCtrlPtr^.Output.monitor.ActPosition,ScalingNumerator);
				HomeRefState := HomeRefState+1;
			END_IF
		3:
		
			AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeSetPos := 0;
			HomeRefState := HomeRefState+1;
			fbMC_Home.Execute:= FALSE;
			
		4:
			fbMC_Home.Position 		:= AxisCtrlPtr^.Input.Parameter.HomeOptions.stBasic.HomeSetPos;
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Call Home Ref homing home direct Done',0,0,0);
			fbMC_Home.Execute:= TRUE;
			fbMC_Home.HomingMode 					:= MC_Direct ;
			fbMC_Home.Options.ClearPositionLag 		:= TRUE ;
			
			HomeRefState := HomeRefState+1;
		5:
			
			IF fbMC_Home.Done THEN
				AxisCtrlPtr^.Input.Command.Home 		:= FALSE;
				fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Wait Home Ref homing by direct done',0,0,0);
				fbMC_Home.Execute := FALSE;				
				HomeRefState := HomeRefState+1;			
			END_IF
			
		6:
			 fbMC_MoveAbs.Position :=  - OffsetPos;
			 
			 fbMC_MoveAbs.Velocity := ScalingNumerator/2;
			 fbMC_MoveAbs.Acceleration := ScalingNumerator/2;
			 fbMC_MoveAbs.Deceleration := ScalingNumerator/2;
			 fbMC_MoveAbs.Execute := TRUE;
			 
			 HomeRefState := HomeRefState+1;
		7:		
		    
			IF  fbMC_MoveAbs.Done THEN
				fbMC_MoveAbs.Execute := FALSE;			
		 		HomeRefState := HomeRefState+1;
				fbMC_Home.Execute:= FALSE;
			END_IF	
		8:
		
			fbMC_Home.Position 		:= 0;
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Call Home Ref homing home direct Done',0,0,0);
			fbMC_Home.Execute:= TRUE;
			fbMC_Home.HomingMode 					:= MC_Direct ;
			fbMC_Home.Options.ClearPositionLag 		:= TRUE ;
			
			HomeRefState := HomeRefState+1;
		9:
			
			IF fbMC_Home.Done THEN
				AxisCtrlPtr^.Input.Command.Home 		:= FALSE;
				fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Wait Home Ref homing by direct done',0,0,0);
					 
				fbMC_Home.Execute := FALSE;				
				HomeRefState := HomeRefState+1;			
			END_IF

		10:
				
			HomeRefPulse:= TRUE;
			
	END_CASE
{warning disable C0371}	
fbMC_MoveAbs(Axis := AxisRef);
fbReadParam_ScalingFactor(Axis:=AxisRef);
fbMC_Home(Axis:= AxisRef);
 

{warning restore C0371}

adsReadFB();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomingGlobalHandle" Id="{5a6793f5-8f53-0bb0-2577-2a2b1c3e488b}" FolderPath="Homing\">
      <Declaration><![CDATA[METHOD  HomingGlobalHandle : BOOL
VAR_INPUT
END_VAR

VAR_INST
	rtError : R_TRIG ;
	rtCommandAborted : R_TRIG ;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
AxisCtrlPtr^.Output.Status.MC_Home.Busy 			:= fbMC_Home.Busy ;
AxisCtrlPtr^.Output.Status.MC_Home.CommandAborted 	:= fbMC_Home.CommandAborted ;
AxisCtrlPtr^.Output.Status.MC_Home.Active			:= fbMC_Home.Active ;

rtError(CLK := fbMC_Home.Error) ;
rtCommandAborted(CLK := fbMC_Home.CommandAborted) ;

IF rtCommandAborted.Q THEN
	fbMC_Home.Execute := FALSE;
END_IF

 (* if a homing error occured go to error state *)
IF rtError.Q THEN
	
	// Add FB Error to ErrorHandler
	
	AddNCError(fbMC_Home.ErrorID , 'NC Error fbMC_Home ErrorID: ');	
	
	AxisCtrlPtr^.Input.Command.Home 		:= FALSE ;
	fbMC_Home.Execute := FALSE;
	HomingActive := FALSE ;
	
END_IF


//-----------------------------------------------------------

IF (fbMC_MoveVel.Busy = TRUE) THEN		
	fbMC_MoveVel.Execute := FALSE;
END_IF

(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_MoveVel.Error) THEN
	
	// Add FB Error to ErrorHandler
	AddNCError(fbMC_MoveVel.ErrorId,'NC Error fbMC_MoveVel At homing  ErrorID: ');	
		
	fbMC_MoveVel.Execute := FALSE;
	
END_IF

IF AbortTrig.EDGEPOS(fbMC_MoveVel.CommandAborted)THEN
	fbMC_MoveVel.Execute := FALSE;
END_IF


//---------------------------------------------------------------------------

IF (fbMC_MoveRel.Done = TRUE) THEN		
	fbMC_MoveRel.Execute := FALSE;
END_IF

(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_MoveRel.Error) THEN
	
	// Add FB Error to ErrorHandler
	
	AddNCError(fbMC_MoveRel.ErrorId,'NC Error fbMC_MoveRel ErrorID: ');
	
	fbMC_MoveRel.Execute := FALSE;
END_IF


IF AbortTrig.EDGEPOS(fbMC_MoveRel.CommandAborted)THEN
	fbMC_MoveRel.Execute := FALSE;
END_IF


//---------------------------------------------------------------------------

IF (fbMC_Stop.Done = TRUE) THEN		
	fbMC_Stop.Execute := FALSE;
END_IF

(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_Stop.Error) THEN
	
	// Add FB Error to ErrorHandler
	AddNCError( fbMC_Stop.ErrorID,'NC Error fbMC_Stop ErrorID: ');
	
	fbMC_Stop.Execute := FALSE;
END_IF


IF AbortTrig.EDGEPOS(fbMC_Stop.CommandAborted)THEN
	fbMC_Stop.Execute := FALSE;
END_IF


//---------------------------------------------------------------------------]]></ST>
      </Implementation>
    </Method>
    <Method Name="INIT" Id="{2f2d1139-3c05-0912-3b07-8d7fec6c17e9}">
      <Declaration><![CDATA[METHOD  INIT : BOOL 
VAR_INPUT
END_VAR
VAR_INST	
	ComStableDelay:	TON;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	INIT := FALSE ;
	CASE SS_Init OF

		0:
			ComStableDelay(IN:= TRUE, PT:=T#3S , Q=> , ET=> );
			IF ComStableDelay.Q THEN
				ComStableDelay(IN:= FALSE);
				AxisCtrlPtr^.Output.Status.AxisInitDone := FALSE ;
				SS_Init:= SS_Init + 1;
  			END_IF
			
		1:	
			IF AxisCtrlPtr^.Output.Status.AxisStatus.NcCycleCounter <> 0 THEN		
				ComStableDelay(IN:= FALSE);
				SS_Init:= SS_Init + 1;
			ELSE
				fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Axis doesnt have PLC Link',0,0,0);
				SS_Init:= 0;								
			END_IF
					
		2:				
			IF InValidDataFromDrive THEN
				fnLogMsg(ADR(LogMsg_0),LOG_ERROR,'Axis Drive Data Not Valid',0,0,0);
				SS_Init:= 0;
			ELSE
				SS_Init:= SS_Init + 1;
			END_IF	
		
		3:		
			IF (NOT AxisCtrlPtr^.Output.Status.Drive.ActiveHW) THEN
				fnLogMsg(ADR(LogMsg_0),LOG_WARNING,'Axis doesnt have Info Data "State" link',0,0,0);
			END_IF						
			SS_Init:= SS_Init + 1;				
						
		4:
			IF (AxisCtrlPtr^.Input.Parameter.ecNetIdArr[4] = 0)
				AND (AxisCtrlPtr^.Input.Parameter.ecNetIdArr[5] = 0) THEN
				fnLogMsg(ADR(LogMsg_0),LOG_WARNING,'Axis doesnt have ecNetIdArr(InfoData ADS) Link',0,0,0);	
			END_IF								
			SS_Init:= SS_Init + 1;				
													
			
		5:(************************ MC_READSTATUS *************************)
			
			strEcNetId:= F_CreateAmsNetId(AxisCtrlPtr^.Input.Parameter.ecNetIdArr);				 
			ReadStatus(enable := TRUE);
			IF AxisCtrlPtr^.Output.Status.AxisStatus.Error THEN
				THIS^.ReadStatus(enable := FALSE);	
				//Issue Log		
			ELSE
				IF (AxisCtrlPtr^.Output.Status.Drive.ActiveHW) THEN 															
					INIT_Specific(bStart:=FALSE);
					SS_Init:= SS_Init + 1;;
				ELSE
					SS_Init:= 100;		
				END_IF	
			END_IF												
		6:
			IF INIT_Specific(bStart:=TRUE) THEN
				SS_Init:=  100;
			END_IF
		100:
			
			SS_Init := 0 ;
			INIT := TRUE ;
			AxisCtrlPtr^.Output.Status.AxisInitDone := TRUE ;
			AxisCtrlPtr^.Output.Status.ReadyForCmd := TRUE ;
	END_CASE
	
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="INIT_Specific" Id="{3500f88f-cf2a-0304-2df5-9a72ea1d014a}">
      <Declaration><![CDATA[METHOD INIT_Specific : BOOL
VAR_INPUT
	bStart : BOOL;
END_VAR

VAR_STAT
	ExecuteTrig: 	Trigger;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[INIT_Specific := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Jog" Id="{d141a3e2-64df-0dbf-3b77-3edb7aff0c1d}" FolderPath="MoveMethods\">
      <Declaration><![CDATA[METHOD PRIVATE Jog : BOOL
VAR_INPUT
END_VAR
VAR_INST
	errorTrig : Trigger ;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Jog := FALSE ;
fbMC_Jog.JogForward     := AxisCtrlPtr^.Input.Command.MoveJogPos; 
fbMC_Jog.JogBackwards   := AxisCtrlPtr^.Input.Command.MoveJogNeg;
fbMC_Jog.Velocity      	:= AxisCtrlPtr^.Input.Parameter.JogVelocity;
fbMC_Jog.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.Acceleration;
fbMC_Jog.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
fbMC_Jog.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
fbMC_Jog.Mode			:= AxisCtrlPtr^.Input.Parameter.JogMod;
fbMC_Jog.Position		:= AxisCtrlPtr^.Input.Parameter.JogPosition;


AxisCtrlPtr^.Output.Status.MC_Jog.Done := FALSE ;

{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_Jog(Axis := AxisRef);
{warning restore C0371}


IF (fbMC_Jog.Done = TRUE) THEN
	Jog :=  TRUE ;
	AxisCtrlPtr^.Input.Command.MoveJogPos := FALSE;
	AxisCtrlPtr^.Input.Command.MoveJogNeg := FALSE;
	AxisCtrlPtr^.Output.Status.MC_Jog.Done := TRUE ;
END_IF

(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_Jog.Error) THEN
	
	// Add FB Error to ErrorHandler
	AddNCError(fbMC_Jog.ErrorID,'NC Error fbMC_Jog ErrorID: ');
	
	Jog :=  FALSE ;
	AxisCtrlPtr^.Input.Command.MoveJogPos := FALSE;
	AxisCtrlPtr^.Input.Command.MoveJogNeg := FALSE;
	//AxisState := BASIC_STATE_ERROR;
END_IF

AxisCtrlPtr^.Output.Status.MC_Jog.Busy				:= fbMC_Jog.Busy ;
AxisCtrlPtr^.Output.Status.MC_Jog.CommandAborted	:= fbMC_Jog.CommandAborted ;
AxisCtrlPtr^.Output.Status.MC_Jog.Active			:= fbMC_Jog.Active ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_ChangingOperationMode" Id="{b55cce99-57f0-448e-9873-5ea783e74ccb}">
      <Declaration><![CDATA[METHOD Meth_ChangingOperationMode : BOOL
VAR_INPUT
	Execute   : BOOL;
	OperMode :eDriveModeOfOperation; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_CheckTemperatureLimit" Id="{91b2b063-f6e4-45ce-be26-e5fdcd28cd0e}" FolderPath="MonitorMethods\">
      <Declaration><![CDATA[METHOD Meth_CheckTemperatureLimit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF AxisCtrlPtr^.Input.Command.MonitorTemperatureEnable AND AxisCtrlPtr^.Input.Parameter.Limits.MaxTemperature <> 0 AND AxisCtrlPtr^.Input.Command.Power THEN
	
		   IF io_ActualTemperature > AxisCtrlPtr^.Input.Parameter.Limits.MaxTemperature THEN
				tmp_ErrorEntry.ErrorText	:= AxisCtrlPtr^.Input.Parameter.ThreadName;
				tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText,' Over Temperature ');
 				
				tmp_ErrorEntry.MotorEvents  := enumMotorEvents.MotorOverTemp;
				fnLogMsg(ADR(LogMsg_0),LOG_ERROR,tmp_ErrorEntry.ErrorText,0,0,0);
 	
				AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);
				AxisCtrlPtr^.Input.Command.Power := FALSE;
			END_IF	


 	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_CngMaxTorque" Id="{39bec360-0e58-453d-9d55-e18f5648389e}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_CngMaxTorque : BOOL
VAR_INPUT
	Execute   : BOOL;
	Value	  : LREAL;
END_VAR

VAR_OUTPUT
	Error : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_CngTorqueOffset" Id="{b743eb7e-ac00-46d7-8280-104276beb5fd}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_CngTorqueOffset : BOOL // For FF
VAR_INPUT
	Execute   : BOOL;
	Value	  : LREAL;
END_VAR

VAR_OUTPUT
	Error : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_DCMonitor" Id="{207dfbcd-fda3-460d-81ce-943b3f86233d}" FolderPath="MonitorMethods\">
      <Declaration><![CDATA[METHOD Meth_DCMonitor : BOOL
VAR_INPUT
END_VAR

VAR_INST
	DC_ErrorTrig : Trigger ;
	DCError : BOOL;	
	WaitForStart : TON;	
	WaitForStartDone : BOOL;
	ReadDcTimer : TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF AxisCtrlPtr^.Input.Command.MonitorDCEnable THEN 
	ReadDcVoltage();

	IF WaitForStartDone THEN
 		
		
		DCError := AxisCtrlPtr^.Input.Parameter.Limits.MinDC <> 0  
					AND NOT AxisCtrlPtr^.Input.Command.Power AND AxisCtrlPtr^.Output.monitor.ActualDC < AxisCtrlPtr^.Input.Parameter.Limits.MinDC; 
		
		
		IF DC_ErrorTrig.EDGEPOS(DCError) THEN
			 tmp_ErrorEntry.ErrorText	:= AxisCtrlPtr^.Input.Parameter.ThreadName;
			 tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText,'Dc Supply Error');
				 
			 tmp_ErrorEntry.MotorEvents  := enumMotorEvents.MotorSupplyError ;
			 fnLogMsg(ADR(LogMsg_0),LOG_ERROR,tmp_ErrorEntry.ErrorText,0,0,0);
				
			 AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);
		END_IF
	ELSE
		WaitForStart.IN := TRUE;
		WaitForStart.PT := T#30S;
		
		IF WaitForStart.Q THEN
			WaitForStartDone := TRUE;
			WaitForStart.IN := FALSE;
		END_IF	
		WaitForStart();		
	END_IF
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_InitVelKI" Id="{4ee7ba3d-d402-4421-856c-40de4b4f8a46}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_InitVelKI : BOOL
VAR_INPUT
	Execute   : BOOL;
	Value	  : LREAL;
END_VAR

VAR_OUTPUT
	Error : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_InitVelKP" Id="{4dbef930-312e-49d6-b4fb-54c219eb5dc3}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_InitVelKP : BOOL
VAR_INPUT
	Execute   : BOOL;
	Value	  : LREAL;
END_VAR

VAR_OUTPUT
	Error : BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_MonitorErro18000" Id="{64fa8d77-f471-4dc4-9c4e-2e4e3389972e}" FolderPath="MonitorMethods\">
      <Declaration><![CDATA[METHOD Meth_MonitorErro18000 : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NCError18000 THEN
	{warning disable C0371}		
	
	IF AxisRef.Status.DriveDeviceError THEN
		NCError18000 := FALSE;
	END_IF
	{warning restore C0371}	
END_IF

NCError18000TON.PT := T#1200MS;
NCError18000TON.IN := NCError18000;
IF NCError18000TON.Q THEN
	NCError18000 := FALSE;	
	 fnLogMsg(ADR(LogMsg_0),LOG_ERROR,tmp_ErrorEntry.ErrorText,0,0,0);
	 //ETZ to Add method for Log			
	 AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);
END_IF
NCError18000TON();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_ReadObj" Id="{a8727af8-7a81-4f51-b3a8-ff4c3cba3b7b}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD Meth_ReadObj : BOOL
VAR_INPUT
	Execute   : BOOL;
	Object	  : enumMotionObject;

END_VAR

VAR_INST
	
END_VAR
VAR
 
	
END_VAR
VAR_OUTPUT
	Error : BOOL;
	Value : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_WriteObj" Id="{cc216c3f-7c9a-4da2-b6e8-a95bf44ce22b}" FolderPath="ServiceFBs\">
      <Declaration><![CDATA[METHOD PUBLIC Meth_WriteObj : BOOL
VAR_INPUT
	Execute   : BOOL;
	Object	  : enumMotionObject;
	Value	  : LREAL;
END_VAR


VAR


	
END_VAR
VAR_INST

	
END_VAR


VAR_OUTPUT
	Error : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Meth_WriteObj := TRUE; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="MonitorUpdate" Id="{cde0aad3-5a37-4d75-bdfb-42134a01ca18}" FolderPath="StatusMethods\">
      <Declaration><![CDATA[METHOD MonitorUpdate : BOOL
VAR_INPUT
END_VAR
VAR_INST
	Trigger_0	: Trigger;
	AddNcTimer  : TON;  
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
AxisCtrlPtr^.Output.monitor.ActPosition		:= AxisRef.NcToPlc.ActPos ;
//AxisCtrlPtr^.Output.monitor.ActualTorque	:= ReadActualTorque() ;
AxisCtrlPtr^.Output.monitor.ActVelocity		:= AxisRef.NcToPlc.ActVelo ;
AxisCtrlPtr^.Output.monitor.ModuloActPos	:= AxisRef.NcToPlc.ModuloActPos ;
AxisCtrlPtr^.Output.monitor.ModuloSetPos	:= AxisRef.NcToPlc.ModuloSetPos ;
AxisCtrlPtr^.Output.monitor.SetPos          := AxisRef.NcToPlc.SetPos ;
AxisCtrlPtr^.Output.monitor.SetVel          :=  AxisRef.NcToPlc.SetVelo;

AxisCtrlPtr^.Output.monitor.ActLagError		:= AxisRef.NcToPlc.PosDiff ;
//AxisCtrlPtr^.Output.monitor.ActualCurrent	:= io_ActualCurrent;
AddNcTimer.PT := T#100MS;

AddNcTimer.IN := TRUE;
// Add NC Error
IF Trigger_0.EDGEPOS(AxisRef.NcToPlc.ErrorCode <> 0) THEN
	// Add NC Error to ErrorHandler
	IF AddNcTimer.Q THEN
		AddNCError(AxisRef.NcToPlc.ErrorCode , 'Monitor NC Error: ');
		AddNcTimer.IN := FALSE;		
	END_IF
	
	
END_IF

AddNcTimer();

{warning restore C0371}
Meth_MonitorErro18000();

Meth_CheckTemperatureLimit();
Meth_DCMonitor();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveAbs" Id="{8e67a982-c876-098b-39b7-2f2ef3641597}" FolderPath="MoveMethods\">
      <Declaration><![CDATA[METHOD PRIVATE MoveAbs : BOOL
VAR_INPUT
END_VAR
VAR_INST
	errorTrig : Trigger ;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
MoveAbs := FALSE ;


IF NOT fbMC_MoveAbs.Active THEN
	fbMC_MoveAbs.Position      	:= AxisCtrlPtr^.Input.Parameter.Position; 
	fbMC_MoveAbs.Velocity      	:= AxisCtrlPtr^.Input.Parameter.Velocity;
	fbMC_MoveAbs.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.Acceleration;
	fbMC_MoveAbs.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
	fbMC_MoveAbs.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
	fbMC_MoveAbs.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
	fbMC_MoveAbs.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;
ELSE 
	fbMC_MoveAbs1.Position      := AxisCtrlPtr^.Input.Parameter.Position; 
	fbMC_MoveAbs1.Velocity      := AxisCtrlPtr^.Input.Parameter.Velocity;
	fbMC_MoveAbs1.Acceleration  := AxisCtrlPtr^.Input.Parameter.Acceleration;
	fbMC_MoveAbs1.Deceleration  := AxisCtrlPtr^.Input.Parameter.Deceleration;
	fbMC_MoveAbs1.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
	fbMC_MoveAbs1.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
	fbMC_MoveAbs1.BufferMode	:= AxisCtrlPtr^.Input.Parameter.BufferMode;
END_IF

	
//fbMC_MoveAbs.Execute := TRUE;


{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_MoveAbs(Axis := AxisRef);
fbMC_MoveAbs1(Axis := AxisRef);
{warning restore C0371}


IF (fbMC_MoveAbs.Done = TRUE) THEN
	MoveAbs :=  TRUE ;
	AxisCtrlPtr^.Input.Command.MoveAbsolute := FALSE;
	IF NOT fbMC_MoveAbs1.Active THEN
		AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.Done := TRUE ;
	END_IF
	fbMC_MoveAbs.Execute := FALSE;	
END_IF

IF (fbMC_MoveAbs1.Done = TRUE) THEN
	MoveAbs :=  TRUE ;
	AxisCtrlPtr^.Input.Command.MoveAbsolute := FALSE;
	IF NOT fbMC_MoveAbs.Active THEN
		AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.Done := TRUE ;
	END_IF
	fbMC_MoveAbs1.Execute := FALSE;
END_IF

(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_MoveAbs.Error) THEN
	
	// Add FB Error to ErrorHandler

	AddNCError(fbMC_MoveAbs.ErrorID,'NC Error fbMC_MoveAbs ErrorID: ');
	
	MoveAbs :=  FALSE ;	
	AxisCtrlPtr^.Input.Command.MoveAbsolute := FALSE;
	fbMC_MoveAbs.Execute := FALSE;
	fbMC_MoveAbs1.Execute := FALSE;
	//AxisState := BASIC_STATE_ERROR;
END_IF
IF errorTrig.EDGEPOS(fbMC_MoveAbs1.Error) THEN
	
	// Add FB Error to ErrorHandler	
	AddNCError(fbMC_MoveAbs1.ErrorID,'NC Error fbMC_MoveAbs1 ErrorID: ');
	
	MoveAbs :=  FALSE ;
	AxisCtrlPtr^.Input.Command.MoveAbsolute := FALSE;
	fbMC_MoveAbs.Execute := FALSE;
	fbMC_MoveAbs1.Execute := FALSE;
	//AxisState := BASIC_STATE_ERROR;
END_IF

IF AbortTrig.EDGEPOS(fbMC_MoveAbs.CommandAborted)THEN
	MoveAbs :=  FALSE ;
	fbMC_MoveAbs.Execute := FALSE;
END_IF

IF AbortTrig.EDGEPOS(fbMC_MoveAbs1.CommandAborted)THEN
	MoveAbs :=  FALSE ;
	fbMC_MoveAbs1.Execute := FALSE;
END_IF

IF fbMC_MoveAbs.Active THEN
	AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.Busy				:= fbMC_MoveAbs.Busy ;
	AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.CommandAborted	:= fbMC_MoveAbs.CommandAborted ;
	AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.Active			:= fbMC_MoveAbs.Active ;
ELSE
	AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.Busy				:= fbMC_MoveAbs1.Busy ;
	AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.CommandAborted	:= fbMC_MoveAbs1.CommandAborted ;
	AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.Active			:= fbMC_MoveAbs1.Active ;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveAdd" Id="{ac240e2d-509b-09c4-0ef0-aecebbbb3cd9}" FolderPath="MoveMethods\">
      <Declaration><![CDATA[METHOD PRIVATE MoveAdd : BOOL
VAR_INPUT
END_VAR
VAR_INST
	errorTrig : Trigger ;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
MoveAdd := FALSE ;
IF NOT fbMC_MoveAdd.Active THEN
	fbMC_MoveAdd.Distance      	:= AxisCtrlPtr^.Input.Parameter.Distance; 
	fbMC_MoveAdd.Velocity      	:= AxisCtrlPtr^.Input.Parameter.Velocity;
	fbMC_MoveAdd.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.Acceleration;
	fbMC_MoveAdd.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
	fbMC_MoveAdd.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
	fbMC_MoveAdd.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
	fbMC_MoveAdd.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;
ELSE
	fbMC_MoveAdd1.Distance      := AxisCtrlPtr^.Input.Parameter.Distance; 
	fbMC_MoveAdd1.Velocity      := AxisCtrlPtr^.Input.Parameter.Velocity;
	fbMC_MoveAdd1.Acceleration  := AxisCtrlPtr^.Input.Parameter.Acceleration;
	fbMC_MoveAdd1.Deceleration  := AxisCtrlPtr^.Input.Parameter.Deceleration;
	fbMC_MoveAdd1.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
	fbMC_MoveAdd1.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
	fbMC_MoveAdd1.BufferMode	:= AxisCtrlPtr^.Input.Parameter.BufferMode;
END_IF

{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_MoveAdd(Axis := AxisRef);
fbMC_MoveAdd1(Axis := AxisRef);
{warning restore C0371}


IF (fbMC_MoveAdd.Done = TRUE) THEN
	MoveAdd :=  TRUE ;
	AxisCtrlPtr^.Input.Command.MoveAdditive := FALSE;
	IF NOT fbMC_MoveAdd1.Active THEN
		AxisCtrlPtr^.Output.Status.MC_MoveAdditive.Done := TRUE ;
	END_IF	
	fbMC_MoveAdd.Execute := FALSE;
END_IF
IF (fbMC_MoveAdd1.Done = TRUE) THEN
	MoveAdd :=  TRUE ;
	AxisCtrlPtr^.Input.Command.MoveAdditive := FALSE;
	IF NOT fbMC_MoveAdd.Active THEN
		AxisCtrlPtr^.Output.Status.MC_MoveAdditive.Done := TRUE ;
	END_IF	
	fbMC_MoveAdd1.Execute := FALSE;
END_IF

(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_MoveAdd.Error) THEN
	
	// Add FB Error to ErrorHandler
	
	AddNCError(fbMC_MoveAdd.ErrorID,'NC Error fbMC_MoveAdd ErrorID: ');
	
	MoveAdd :=  FALSE ;
	AxisCtrlPtr^.Input.Command.MoveAdditive := FALSE;
	fbMC_MoveAdd.Execute := FALSE;
	fbMC_MoveAdd1.Execute := FALSE;
	//AxisState := BASIC_STATE_ERROR;
END_IF

(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_MoveAdd1.Error) THEN
	
	// Add FB Error to ErrorHandler

	AddNCError(fbMC_MoveAdd1.ErrorID,'NC Error fbMC_MoveAdd1 ErrorID: ');
	
	MoveAdd :=  FALSE ;
	AxisCtrlPtr^.Input.Command.MoveAdditive := FALSE;
	fbMC_MoveAdd.Execute := FALSE;
	fbMC_MoveAdd1.Execute := FALSE;
	//AxisState := BASIC_STATE_ERROR;
END_IF

IF AbortTrig.EDGEPOS(fbMC_MoveAdd.CommandAborted)THEN
	MoveAdd :=  FALSE ;
	fbMC_MoveAdd.Execute := FALSE;
END_IF

IF AbortTrig.EDGEPOS(fbMC_MoveAdd1.CommandAborted)THEN
	MoveAdd :=  FALSE ;
	fbMC_MoveAdd1.Execute := FALSE;
END_IF
IF fbMC_MoveAdd.Active THEN
	AxisCtrlPtr^.Output.Status.MC_MoveAdditive.Busy				:= fbMC_MoveAdd.Busy ;
	AxisCtrlPtr^.Output.Status.MC_MoveAdditive.CommandAborted	:= fbMC_MoveAdd.CommandAborted ;
	AxisCtrlPtr^.Output.Status.MC_MoveAdditive.Active			:= fbMC_MoveAdd.Active ;
ELSE
	AxisCtrlPtr^.Output.Status.MC_MoveAdditive.Busy				:= fbMC_MoveAdd1.Busy ;
	AxisCtrlPtr^.Output.Status.MC_MoveAdditive.CommandAborted	:= fbMC_MoveAdd1.CommandAborted ;
	AxisCtrlPtr^.Output.Status.MC_MoveAdditive.Active			:= fbMC_MoveAdd1.Active ;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRelative" Id="{9eedba1c-58e9-07b8-3068-f69dd55d516b}" FolderPath="MoveMethods\">
      <Declaration><![CDATA[METHOD PRIVATE MoveRelative : BOOL
VAR_INPUT
END_VAR

VAR_INST
	errorTrig : Trigger ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[MoveRelative := FALSE ;
IF NOT fbMC_MoveRel.Active THEN
	fbMC_MoveRel.Distance      	:= AxisCtrlPtr^.Input.Parameter.Distance; 
	fbMC_MoveRel.Velocity      	:= AxisCtrlPtr^.Input.Parameter.Velocity;
	fbMC_MoveRel.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.Acceleration;
	fbMC_MoveRel.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
	fbMC_MoveRel.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
	fbMC_MoveRel.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
	fbMC_MoveRel.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;
ELSE
	fbMC_MoveRel1.Distance      := AxisCtrlPtr^.Input.Parameter.Distance; 
	fbMC_MoveRel1.Velocity      := AxisCtrlPtr^.Input.Parameter.Velocity;
	fbMC_MoveRel1.Acceleration  := AxisCtrlPtr^.Input.Parameter.Acceleration;
	fbMC_MoveRel1.Deceleration  := AxisCtrlPtr^.Input.Parameter.Deceleration;
	fbMC_MoveRel1.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
	fbMC_MoveRel1.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
	fbMC_MoveRel1.BufferMode	:= AxisCtrlPtr^.Input.Parameter.BufferMode;
END_IF

{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_MoveRel(Axis := AxisRef);
fbMC_MoveRel1(Axis := AxisRef);
{warning restore C0371}


(*IF fbMC_MoveRel.Execute AND NOT fbMC_MoveRel.Active THEN
	fbMC_MoveRel.Execute := FALSE ;
	fbMC_MoveRel(Axis := AxisRef);
END_IF

IF fbMC_MoveRel1.Execute AND NOT fbMC_MoveRel1.Active THEN
	fbMC_MoveRel1.Execute := FALSE ;
	fbMC_MoveRel1(Axis := AxisRef);
END_IF*)

IF (fbMC_MoveRel.Done = TRUE) THEN
	MoveRelative :=  TRUE ;
	AxisCtrlPtr^.Input.Command.MoveRelative := FALSE;
	IF NOT fbMC_MoveRel1.Active THEN
		AxisCtrlPtr^.Output.Status.MC_MoveRelative.Done := TRUE ;
	END_IF	
	fbMC_MoveRel.Execute := FALSE;
END_IF
IF (fbMC_MoveRel1.Done = TRUE) THEN
	MoveRelative :=  TRUE ;
	AxisCtrlPtr^.Input.Command.MoveRelative := FALSE;
	IF NOT fbMC_MoveRel.Active THEN
		AxisCtrlPtr^.Output.Status.MC_MoveRelative.Done := TRUE ;
	END_IF	
	fbMC_MoveRel1.Execute := FALSE;
END_IF


(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_MoveRel.Error) THEN
	
	// Add FB Error to ErrorHandler	
	AddNCError(fbMC_MoveRel.ErrorID,'NC Error fbMC_MoveRel ErrorID: ');
	
	MoveRelative :=  FALSE ;
	AxisCtrlPtr^.Input.Command.MoveRelative := FALSE;
	fbMC_MoveRel.Execute := FALSE;
END_IF
(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_MoveRel1.Error) THEN
	
	// Add FB Error to ErrorHandler
	AddNCError(fbMC_MoveRel1.ErrorID,'NC Error fbMC_MoveRel1 ErrorID: ');
	
	MoveRelative :=  FALSE ;
	AxisCtrlPtr^.Input.Command.MoveRelative := FALSE;
	fbMC_MoveRel.Execute := FALSE;
	fbMC_MoveRel1.Execute := FALSE;
END_IF

IF AbortTrig.EDGEPOS(fbMC_MoveRel.CommandAborted)THEN
	MoveRelative :=  FALSE ;
	fbMC_MoveRel.Execute := FALSE;
END_IF

IF AbortTrig.EDGEPOS(fbMC_MoveRel1.CommandAborted)THEN
	MoveRelative :=  FALSE ;
	fbMC_MoveRel1.Execute := FALSE;
END_IF

IF fbMC_MoveRel.Active THEN
	AxisCtrlPtr^.Output.Status.MC_MoveRelative.Busy				:= fbMC_MoveRel.Busy ;
	AxisCtrlPtr^.Output.Status.MC_MoveRelative.CommandAborted	:= fbMC_MoveRel.CommandAborted ;
	AxisCtrlPtr^.Output.Status.MC_MoveRelative.Active			:= fbMC_MoveRel.Active ;;
ELSE
	AxisCtrlPtr^.Output.Status.MC_MoveRelative.Busy				:= fbMC_MoveRel1.Busy ;
	AxisCtrlPtr^.Output.Status.MC_MoveRelative.CommandAborted	:= fbMC_MoveRel1.CommandAborted ;
	AxisCtrlPtr^.Output.Status.MC_MoveRelative.Active			:= fbMC_MoveRel1.Active ;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveVelo" Id="{05496e30-1343-0ce4-30c8-1390f48a9d12}" FolderPath="MoveMethods\">
      <Declaration><![CDATA[METHOD PRIVATE MoveVelo : BOOL
VAR_INPUT
	
END_VAR
VAR_INST
	errorTrig : Trigger ;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
MoveVelo := FALSE ;

fbMC_MoveVel.Direction      := AxisCtrlPtr^.Input.Parameter.Direction; 
fbMC_MoveVel.Velocity      	:= AxisCtrlPtr^.Input.Parameter.Velocity;
fbMC_MoveVel.Acceleration  	:= AxisCtrlPtr^.Input.Parameter.Acceleration;
fbMC_MoveVel.Deceleration  	:= AxisCtrlPtr^.Input.Parameter.Deceleration;
fbMC_MoveVel.Jerk			:= AxisCtrlPtr^.Input.Parameter.Jerk;
fbMC_MoveVel.Options		:= AxisCtrlPtr^.Input.Parameter.Options;
fbMC_MoveVel.BufferMode		:= AxisCtrlPtr^.Input.Parameter.BufferMode;

{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_MoveVel(Axis := AxisRef);
{warning restore C0371}



IF (fbMC_MoveVel.InVelocity = TRUE) THEN
	MoveVelo :=  TRUE ;
	AxisCtrlPtr^.Input.Command.MoveVelocity := FALSE;
	fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Set Flag InVelocity',0,0,0);	
	AxisCtrlPtr^.Output.Status.MC_MoveVelocity.In_Velocity := TRUE ;
	fbMC_MoveVel.Execute := FALSE;
END_IF

(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_MoveVel.Error) THEN
	
	// Add FB Error to ErrorHandler
	AddNCError(fbMC_MoveVel.ErrorID,'NC Error fbMC_MoveVel ErrorID: ');
		
	MoveVelo :=  FALSE ;
	AxisCtrlPtr^.Input.Command.MoveVelocity := FALSE;
	fbMC_MoveVel.Execute := FALSE;
	//AxisState := BASIC_STATE_ERROR;
END_IF

IF AbortTrig.EDGEPOS(fbMC_MoveVel.CommandAborted)THEN
	MoveVelo :=  FALSE ;
	fbMC_MoveVel.Execute := FALSE;
END_IF

AxisCtrlPtr^.Output.Status.MC_MoveVelocity.Busy				:= fbMC_MoveVel.Busy ;
AxisCtrlPtr^.Output.Status.MC_MoveVelocity.CommandAborted	:= fbMC_MoveVel.CommandAborted ;
AxisCtrlPtr^.Output.Status.MC_MoveVelocity.Active			:= fbMC_MoveVel.Active ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Power" Id="{252f2fd6-98d6-0204-160e-a7f30133bb7d}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Power'}
METHOD PRIVATE Power  
VAR_INPUT
	PowerOn	: BOOL;
END_VAR

VAR_INST
	OverideTest:	LREAL:= 100;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

	fbMcPower.Enable := PowerOn ;
	fbMcPower.Enable_Positive := TRUE ;
	fbMcPower.Enable_Negative := TRUE ;
	fbMcPower.Override := 100 ;
	
	
	(* if a power error occured go to error state *)
	IF (fbMCPower.Error = TRUE
		AND (fbMCPower.ErrorID <> 19209)
		AND NOT AxisCtrlPtr^.Output.Status.AxisStatus.Coupled) THEN
		fbMcPower.Enable := FALSE ;
	END_IF
	
	{warning disable C0371}
	//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
	fbMcPower(Axis := AxisRef);
	{warning restore C0371}
	
	(*IF (fbMcPower.Status = TRUE) THEN
		AxisCtrlPtr^.Output.Status.MC_Power.Status := TRUE ;
	ELSE
		AxisCtrlPtr^.Output.Status.MC_Power.Status := FALSE ;	
	END_IF*)
	
	AxisCtrlPtr^.Output.Status.MC_Power.Status := fbMcPower.Status ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadActualTorque" Id="{419bf570-b54f-03cb-02f6-8092e0911cd1}" FolderPath="StatusMethods\">
      <Declaration><![CDATA[METHOD ReadActualTorque : LREAL
VAR_INPUT
END_VAR
VAR_INST

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadDcVoltage" Id="{5b8a0550-e847-445d-8622-5f6dfc099f9c}" FolderPath="MonitorMethods\">
      <Declaration><![CDATA[METHOD ReadDcVoltage : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadNC_AxisBoolParam" Id="{c00b65b1-d52c-4ab2-b6fd-beafa1b9dbc5}" FolderPath="ServiceMethods\">
      <Declaration><![CDATA[METHOD ReadNC_AxisBoolParam : BOOL
VAR_INPUT
	MC_AxisParameter:	MC_AxisParameter;
				
END_VAR
VAR_INST
	State:		INT;
	fbMC_ReadBoolParameter:	MC_ReadBoolParameter;		
END_VAR
VAR_OUTPUT
	ParamValue:			BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE State OF
	
	0:	ReadNC_AxisBoolParam:=	FALSE;
		fbMC_ReadBoolParameter.ParameterNumber:= MC_AxisParameter; 	
		fbMC_ReadBoolParameter.Enable :=	TRUE;	 			
		State:= State +1;
		
	1:	IF fbMC_ReadBoolParameter.Valid THEN
			fbMC_ReadBoolParameter.Enable :=	FALSE;
			ParamValue := fbMC_ReadBoolParameter.Value;
			ReadNC_AxisBoolParam:=	TRUE;
			State:=0;
		ELSIF fbMC_ReadBoolParameter.Error THEN
			State:=0;
		END_IF
	
	
END_CASE


{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_ReadBoolParameter(Axis:=AxisRef);
{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadNC_AxisParam" Id="{b6558273-1b92-4fab-8d37-4cbf3123a5e8}" FolderPath="ServiceMethods\">
      <Declaration><![CDATA[METHOD PUBLIC ReadNC_AxisParam : BOOL
VAR_INPUT
	MC_AxisParameter:	MC_AxisParameter;
		
END_VAR
VAR_INST
	State:		INT;
	fbMC_ReadParameter:	MC_ReadParameter;	
END_VAR
VAR_OUTPUT

	ParamValue:			LREAL;			
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE State OF
	
	0:	ReadNC_AxisParam:=	FALSE;
		fbMC_ReadParameter.ParameterNumber:= MC_AxisParameter; 
		fbMC_ReadParameter.ReadMode := E_ReadMode.READMODE_ONCE;
		fbMC_ReadParameter.Enable:=	TRUE;	 			
		State:= State +1;
		
	1:	IF fbMC_ReadParameter.Valid THEN
			ParamValue := fbMC_ReadParameter.Value;			
			fbMC_ReadParameter.Enable:=	FALSE;
			ReadNC_AxisParam:=	TRUE;
			State:=0;
		ELSIF fbMC_ReadParameter.Error THEN
			State:=0;
		END_IF
	
	
END_CASE


{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_ReadParameter(Axis:=AxisRef);
{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadStatus" Id="{c70c8097-87a3-0233-195d-1cf99c5f53d7}" FolderPath="StatusMethods\">
      <Declaration><![CDATA[{attribute 'object_name' := 'ReadStatus'}
METHOD PROTECTED ReadStatus 
VAR_INPUT
	enable	: BOOL;
END_VAR
VAR
	
END_VAR

VAR_INST
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
(*
	rtReadStatusEnable.CLK := enable ;
	rtReadStatusEnable() ;
	
	IF rtReadStatusEnable.Q THEN
		fbMC_ReadStatus.Enable := TRUE ;		
	END_IF

	fbMC_ReadStatus(Axis:= AxisRef);
	
	rtReadStatusErr.CLK := fbMC_ReadStatus.Error ;
	rtReadStatusErr() ;
	
	IF (rtReadStatusErr.Q) THEN
		AxisCtrlPtr^.Output.Status.AxisInitDone := FALSE ;
		//fbMC_ReadStatus.Enable := FALSE ;
		//AxisCtrlPtr^.Output.Error.ErrorID := fbMC_ReadStatus.ErrorID ;
		fbErrorID := fbMC_ReadStatus.ErrorID ;
	END_IF	
  *)
	{warning disable C0371}
	//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
	AxisRef.ReadStatus();
	{warning restore C0371}
  ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetAll_MC_FB" Id="{c7e77f00-f851-0674-2b71-ff7d9b24bed0}">
      <Declaration><![CDATA[METHOD PRIVATE ResetAll_MC_FB : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[		fbMC_Stop.Execute 		:= FALSE;
		fbMC_Home.Execute 		:= FALSE;
		fbMC_MoveAbs.Execute 	:= FALSE;
		fbMC_MoveAdd.Execute 	:= FALSE;
		fbMC_MoveVel.Execute 	:= FALSE;
		fbMC_MoveAbs1.Execute 	:= FALSE;
		fbMC_MoveAdd1.Execute 	:= FALSE;
		fbMC_MoveRel.Execute 	:= FALSE;
		fbMC_MoveRel1.Execute 	:= FALSE;
		fbMC_MoveVel1.Execute 	:= FALSE;
		fbMC_Jog.JogBackwards 	:= FALSE;
		fbMC_Jog.JogForward 	:= FALSE;
		fbMC_SetOverride.Enable := FALSE;
		fbMC_Reset.Execute 		:= FALSE;
		
		(* reset user commands *)
		IF THIS^.State = BASIC_STATE_ERROR THEN
			AxisCtrlPtr^.Input.Command.Stop 						:= FALSE;
			AxisCtrlPtr^.Input.Command.Halt			 				:= FALSE;
		END_IF
		
		AxisCtrlPtr^.Input.Command.Home 						:= FALSE;
		AxisCtrlPtr^.Input.Command.MoveJogPos 					:= FALSE;
		AxisCtrlPtr^.Input.Command.MoveJogNeg 					:= FALSE;
		AxisCtrlPtr^.Input.Command.MoveVelocity 				:= FALSE;
		AxisCtrlPtr^.Input.Command.MoveAbsolute 				:= FALSE;
		AxisCtrlPtr^.Input.Command.MoveAdditive 				:= FALSE;
		AxisCtrlPtr^.Input.Command.MoveRelative					:= FALSE;
		
		AxisCtrlPtr^.Input.Command.SetOverride	 				:= FALSE;
		
		AxisCtrlPtr^.Output.Status.MC_MoveVelocity.In_Velocity 	:= FALSE ;
		AxisCtrlPtr^.Output.Status.MC_Halt.Done 				:= FALSE ;
		AxisCtrlPtr^.Output.Status.MC_Home.Done 				:= FALSE ;
		AxisCtrlPtr^.Output.Status.MC_MoveAbsolut.Done 			:= FALSE ;
		AxisCtrlPtr^.Output.Status.MC_MoveAdditive.Done 		:= FALSE ;
		AxisCtrlPtr^.Output.Status.MC_MoveRelative.Done 		:= FALSE ;
		AxisCtrlPtr^.Output.Status.MC_Reset.Done 				:= FALSE ;
		AxisCtrlPtr^.Output.Status.MC_Stop.Done 				:= FALSE ;
		
		HomingActive := FALSE ;
		HomeAbsSwitch(FALSE);
		THIS^.HomeDirect(FALSE);
		HomeLagError(FALSE) ;
		
		IF ChangeStateLogEnable THEN
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Reset All Cmds',0,0,0);
		END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetOverride" Id="{45a63d99-757b-0295-0479-036b3ecda1f1}">
      <Declaration><![CDATA[METHOD PRIVATE SetOverride : BOOL
VAR_INPUT
END_VAR
VAR_INST
	errorTrig : Trigger ;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetOverride := FALSE ;
//fbMC_SetOverride.AccFactor      := AxisCtrlPtr^.Input.Parameter.AccFactor; 
//fbMC_SetOverride.JerkFactor     := AxisCtrlPtr^.Input.Parameter.JerkFactor;
fbMC_SetOverride.VelFactor  	:= AxisCtrlPtr^.Input.Parameter.VelFactor;

fbMC_SetOverride.Enable			:= AxisCtrlPtr^.Input.Command.SetOverride;

{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_SetOverride(Axis := AxisRef);
{warning restore C0371}


IF (fbMC_SetOverride.Enabled = TRUE) THEN
	SetOverride :=  TRUE ;
	//fbMC_SetOverride.Enable := FALSE;
END_IF

(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_SetOverride.Error) THEN
	
	// Add FB Error to ErrorHandler
	AddNCError(fbMC_SetOverride.ErrorID,'NC Error fbMC_SetOverride ErrorID: ');
	
	SetOverride :=  FALSE ;
	fbMC_SetOverride.Enable	:= FALSE ;
	AxisCtrlPtr^.Input.Command.SetOverride := FALSE ;
	//AxisState := BASIC_STATE_ERROR;
END_IF

AxisCtrlPtr^.Output.Status.MC_SetOverride.Busy		:= fbMC_SetOverride.Busy ;
AxisCtrlPtr^.Output.Status.MC_SetOverride.Enabled	:= fbMC_SetOverride.Enabled ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StatusUpdate" Id="{a56a4f49-4e67-4a6e-afac-a3a98a9afe29}" FolderPath="StatusMethods\">
      <Declaration><![CDATA[METHOD StatusUpdate : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	(*AxisCtrlPtr^.Output.Status.Accelerating 		:= fbMC_ReadStatus.Accelerating ;
	AxisCtrlPtr^.Output.Status.Busy 				:= fbMC_ReadStatus.Busy ;
	AxisCtrlPtr^.Output.Status.ConstantVelocity 	:= fbMC_ReadStatus.ConstantVelocity ;
	AxisCtrlPtr^.Output.Status.ContinuousMotion 	:= fbMC_ReadStatus.ContinuousMotion ;
	AxisCtrlPtr^.Output.Status.Decelerating 		:= fbMC_ReadStatus.Decelerating ;
	AxisCtrlPtr^.Output.Status.Disabled				:= fbMC_ReadStatus.Disabled ;
	AxisCtrlPtr^.Output.Status.DiscreteMotion 		:= fbMC_ReadStatus.DiscreteMotion ;
  	AxisCtrlPtr^.Output.Status.Error 				:= fbMC_ReadStatus.Error ;
	//AxisCtrlPtr^.Output.Status.ErrorId 			:= fbMC_ReadStatus.ErrorId ;
	AxisCtrlPtr^.Output.Status.ErrorStop 			:= fbMC_ReadStatus.ErrorStop ;
	AxisCtrlPtr^.Output.Status.Homing 				:= fbMC_ReadStatus.Homing ;
	AxisCtrlPtr^.Output.Status.AxisStatus.StandStill 			:= fbMC_ReadStatus.StandStill ;
	AxisCtrlPtr^.Output.Status.AxisStatus 			:= fbMC_ReadStatus.Status ;
	AxisCtrlPtr^.Output.Status.Stopping 			:= fbMC_ReadStatus.Stopping ;
	AxisCtrlPtr^.Output.Status.AxisStatus.SynchronizedMotion 	:= fbMC_ReadStatus.SynchronizedMotion ;
	AxisCtrlPtr^.Output.Status.Valid 				:= fbMC_ReadStatus.Valid ;
	 *)
	{warning disable C0371}
	//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
	AxisCtrlPtr^.Output.Status.AxisStatus 			:= AxisRef.Status ;
	
	{warning restore C0371}
	

	AxisCtrlPtr^.Output.Status.MC_Home.Busy 		:= fbMC_Home.Busy ;
	AxisCtrlPtr^.Output.Status.MC_Home.CommandAborted := fbMC_Home.CommandAborted ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{1e9f7e73-889a-00dd-254e-4ddf196c37c5}">
      <Declaration><![CDATA[METHOD Stop : BOOL
VAR_INPUT
END_VAR
VAR_INST
	errorTrig : Trigger ;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	Stop :=  FALSE ;
	fbMC_Stop.Deceleration := AxisCtrlPtr^.Input.Parameter.Deceleration;
	fbMC_Stop.Jerk := AxisCtrlPtr^.Input.Parameter.Jerk;
	fbMC_Stop.Options := AxisCtrlPtr^.Input.Parameter.Options;
	{warning disable C0371}
	//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
	IF AxisRef.Status.ExtSetPointGenEnabled = FALSE THEN
		fbMC_Stop.Execute := TRUE;
	END_IF
	{warning restore C0371}
	AxisCtrlPtr^.Output.Status.MC_Stop.Done := FALSE ;
	(* if axis is stopped go to ready state *)
	IF (fbMC_Stop.Done = TRUE) THEN
		Stop :=  TRUE ;
		AxisCtrlPtr^.Input.Command.Stop := FALSE;
		AxisCtrlPtr^.Output.Status.MC_Stop.Done := TRUE ;
		fbMC_Stop.Execute := FALSE;
	END_IF
	(* check if error occured *)
	IF errorTrig.EDGEPOS(fbMC_Stop.Error) THEN
		
		// Add FB Error to ErrorHandler
		AddNCError(fbMC_Stop.ErrorID,'NC Error fbMC_Stop ErrorID: ');
		
		Stop :=  FALSE ;
		AxisCtrlPtr^.Input.Command.Stop := FALSE;
		fbMC_Stop.Execute := FALSE;
		//AxisState := BASIC_STATE_ERROR;
	END_IF
	
	{warning disable C0371}
	//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
	fbMC_Stop(Axis := AxisRef) ;
	{warning restore C0371}
	
	AxisCtrlPtr^.Output.Status.MC_Stop.Busy := fbMC_Stop.Busy ;
	AxisCtrlPtr^.Output.Status.MC_Stop.CommandAborted := fbMC_Stop.CommandAborted ;
	AxisCtrlPtr^.Output.Status.MC_Stop.Active := fbMC_Stop.Active ;
	
	IF AxisCtrlPtr^.Output.Status.MC_Stop.CommandAborted THEN		
		IF AxisCtrlPtr^.Output.Status.AxisStatus.StandStill	OR AxisCtrlPtr^.Output.Status.AxisStatus.Disabled THEN
			AxisCtrlPtr^.Output.Status.MC_Stop.Done := TRUE ;
			fbMC_Stop.Execute := FALSE;
			Stop := TRUE;
		END_IF
	END_IF
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="UDINT_TO_HEX_STRING" Id="{6b6eb250-521b-02e0-346c-88d7b5250472}" FolderPath="ServiceMethods\">
      <Declaration><![CDATA[METHOD PROTECTED UDINT_TO_HEX_STRING : STRING(8)
VAR_INPUT
	UdintNum	: UDINT;
END_VAR
VAR
	ByteVar	: BYTE;
	index	: INT;
	tmpChar	: STRING(1);
	tmpString	: STRING(8);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[UDINT_TO_HEX_STRING	:= '';
FOR index := 0 TO 7 DO
	ByteVar	:= UDINT_TO_BYTE(SHR(UdintNum, 7*4 - index*4) AND 16#0000000F);
	CASE ByteVar OF
		0..9:	
			tmpString	:=	CONCAT(tmpString,BYTE_TO_STRING(ByteVar));
		10:
			tmpString	:=	CONCAT(tmpString, 'A');
		11:
			tmpString	:=	CONCAT(tmpString, 'B');
		12:
			tmpString	:=	CONCAT(tmpString, 'C');
		13:
			tmpString	:=	CONCAT(tmpString, 'D');
		14:
			tmpString	:=	CONCAT(tmpString, 'E');
		15:
			tmpString	:=	CONCAT(tmpString, 'F');
	END_CASE
END_FOR

UDINT_TO_HEX_STRING	:= tmpString;]]></ST>
      </Implementation>
    </Method>
    <Method Name="WAIT" Id="{b371799a-bb03-05a0-2f47-9714e81e4c98}">
      <Declaration><![CDATA[METHOD PRIVATE WAIT : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	
	IF AxisCtrlPtr^.Output.Status.AxisInitDone AND NOT AxisCtrlPtr^.Output.Status.AxisStatus.Disabled AND AxisCtrlPtr^.Input.Command.Power THEN
		AxisCtrlPtr^.Output.Status.ReadyForCmd := TRUE ;  
		AxisState := BASIC_STATE_READY;
	END_IF

	rtPowerOn(CLK := AxisCtrlPtr^.Input.Command.Power);
	
	IF InValidDataFromDrive THEN
		AxisState := BASIC_STATE_INIT 	;
	ELSIF (rtPowerOn.Q AND AxisCtrlPtr^.Output.Status.AxisInitDone) THEN
			AxisState := BASIC_STATE_POWER_ON;
	ELSIF NOT AxisCtrlPtr^.Input.Command.Power THEN
		THIS^.Power(PowerOn := FALSE);
		AxisState := BASIC_STATE_WAIT	;	
	END_IF
	
(*	
	IF AxisCtrlPtr^.Output.Status.AxisStatus.Error  THEN
		AxisCtrlPtr^.Output.Status.ReadyForCmd := FALSE ;
		AxisCtrlPtr^.Output.Status.AxisInitDone := FALSE ;
		AxisState := BASIC_STATE_WAIT	;
		SS_Init := 0 ;
	END_IF*)
	
	(* reset all FB execute inputs we use *)
	fbMC_Home.Execute := FALSE;
	(*MC_Stop_0.Execute := FALSE;
	MC_MoveAbsolute_0.Execute := FALSE;
	MC_MoveAdditive_0.Execute := FALSE;
	MC_MoveVelocity_0.Execute := FALSE;
	MC_Halt_0.Execute := FALSE;
	MC_ReadAxisError_0.Acknowledge := FALSE;
	MC_Reset_0.Execute := FALSE;
	MC_SetOverride_0.Enable := FALSE ;
	
	MC_Reset_0();
	*)
	(* reset user commands *)
	AxisCtrlPtr^.Input.Command.Stop := FALSE;
	AxisCtrlPtr^.Input.Command.Home := FALSE;
	AxisCtrlPtr^.Input.Command.MoveJogPos := FALSE;
	AxisCtrlPtr^.Input.Command.MoveJogNeg := FALSE;
	AxisCtrlPtr^.Input.Command.MoveVelocity := FALSE;
	AxisCtrlPtr^.Input.Command.MoveAbsolute := FALSE;
	AxisCtrlPtr^.Input.Command.MoveAdditive := FALSE;
	AxisCtrlPtr^.Input.Command.SetOverride := FALSE ;
				
	//AxisCtrlPtr^.Output.Error.ErrorID := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteNC_AxisBoolParam" Id="{a3edf7cf-e628-0b17-1f11-f6e8e5ff3fa0}" FolderPath="ServiceMethods\">
      <Declaration><![CDATA[METHOD WriteNC_AxisBoolParam : BOOL
VAR_INPUT
	MC_AxisParameter:	MC_AxisParameter;
	ParamValue:			BOOL;			
END_VAR
VAR_INST
	State:		INT;
	fbMC_WriteBoolParameter:	MC_WriteBoolParameter;		
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE State OF
	
	0:	WriteNC_AxisBoolParam:=	FALSE;
		fbMC_WriteBoolParameter.ParameterNumber:= MC_AxisParameter; 
		fbMC_WriteBoolParameter.Value:=	ParamValue;		
		fbMC_WriteBoolParameter.Execute:=	TRUE;	 			
		State:= State +1;
		
	1:	IF fbMC_WriteBoolParameter.Done THEN
			fbMC_WriteBoolParameter.Execute:=	FALSE;
			WriteNC_AxisBoolParam:=	TRUE;
			State:=0;
		ELSIF fbMC_WriteBoolParameter.Error THEN
			State:=0;
		END_IF
	
	
END_CASE


{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_WriteBoolParameter(Axis:=AxisRef);
{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteNC_AxisParam" Id="{5de590ae-6630-4712-8f5d-c1d37b1ce46f}" FolderPath="ServiceMethods\">
      <Declaration><![CDATA[METHOD WriteNC_AxisParam : BOOL
VAR_INPUT
	MC_AxisParameter:	MC_AxisParameter;
	ParamValue:			LREAL;			
END_VAR
VAR_INST
	State:		INT;
		
	fbMC_WriteParameter:	MC_WriteParameter;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE State OF
	
	0:	WriteNC_AxisParam:=	FALSE;
		fbMC_WriteParameter.ParameterNumber:= MC_AxisParameter; 
		fbMC_WriteParameter.Value:=	ParamValue;		
		fbMC_WriteParameter.Execute:=	TRUE;	 			
		State:= State +1;
		
	1:	IF fbMC_WriteParameter.Done THEN
			fbMC_WriteParameter.Execute:=	FALSE;
			WriteNC_AxisParam:=	TRUE;
			State:=0;
		ELSIF fbMC_WriteParameter.Error THEN
			State:=0;
		END_IF
	
	
END_CASE


{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_WriteParameter(Axis:=AxisRef);
{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="BasicAxis_FB">
      <LineId Id="1508" Count="0" />
      <LineId Id="2677" Count="0" />
      <LineId Id="2679" Count="0" />
      <LineId Id="2676" Count="0" />
      <LineId Id="2957" Count="0" />
      <LineId Id="6197" Count="0" />
      <LineId Id="1512" Count="0" />
      <LineId Id="4066" Count="1" />
      <LineId Id="4186" Count="0" />
      <LineId Id="4304" Count="0" />
      <LineId Id="4187" Count="0" />
      <LineId Id="5027" Count="0" />
      <LineId Id="5026" Count="0" />
      <LineId Id="1514" Count="1" />
      <LineId Id="1886" Count="1" />
      <LineId Id="1516" Count="0" />
      <LineId Id="5146" Count="0" />
      <LineId Id="3142" Count="1" />
      <LineId Id="3141" Count="0" />
      <LineId Id="1884" Count="0" />
      <LineId Id="1517" Count="0" />
      <LineId Id="5915" Count="0" />
      <LineId Id="1518" Count="0" />
      <LineId Id="6075" Count="0" />
      <LineId Id="5909" Count="0" />
      <LineId Id="6076" Count="1" />
      <LineId Id="5908" Count="0" />
      <LineId Id="1519" Count="4" />
      <LineId Id="2812" Count="0" />
      <LineId Id="3838" Count="0" />
      <LineId Id="1553" Count="2" />
      <LineId Id="5264" Count="1" />
      <LineId Id="5263" Count="0" />
      <LineId Id="5268" Count="0" />
      <LineId Id="1556" Count="0" />
      <LineId Id="5267" Count="0" />
      <LineId Id="1557" Count="1" />
      <LineId Id="3479" Count="0" />
      <LineId Id="3360" Count="0" />
      <LineId Id="1559" Count="0" />
      <LineId Id="3481" Count="0" />
      <LineId Id="1560" Count="4" />
      <LineId Id="3593" Count="0" />
      <LineId Id="3590" Count="0" />
      <LineId Id="1565" Count="0" />
      <LineId Id="3591" Count="1" />
      <LineId Id="3370" Count="0" />
      <LineId Id="1566" Count="5" />
      <LineId Id="6319" Count="1" />
      <LineId Id="6322" Count="2" />
      <LineId Id="6321" Count="0" />
      <LineId Id="6325" Count="0" />
      <LineId Id="6328" Count="0" />
      <LineId Id="6326" Count="0" />
      <LineId Id="6329" Count="0" />
      <LineId Id="6331" Count="0" />
      <LineId Id="6456" Count="0" />
      <LineId Id="6333" Count="0" />
      <LineId Id="6330" Count="0" />
      <LineId Id="1572" Count="25" />
      <LineId Id="3702" Count="0" />
      <LineId Id="1598" Count="4" />
      <LineId Id="2398" Count="0" />
      <LineId Id="4421" Count="2" />
      <LineId Id="5787" Count="1" />
      <LineId Id="1603" Count="37" />
      <LineId Id="1646" Count="5" />
      <LineId Id="3065" Count="11" />
      <LineId Id="4908" Count="0" />
      <LineId Id="4540" Count="0" />
      <LineId Id="3078" Count="16" />
      <LineId Id="4542" Count="0" />
      <LineId Id="4545" Count="0" />
      <LineId Id="4548" Count="0" />
      <LineId Id="4546" Count="1" />
      <LineId Id="4544" Count="0" />
      <LineId Id="4543" Count="0" />
      <LineId Id="4541" Count="0" />
      <LineId Id="3095" Count="5" />
      <LineId Id="6580" Count="0" />
      <LineId Id="6579" Count="0" />
      <LineId Id="3101" Count="8" />
      <LineId Id="6586" Count="0" />
      <LineId Id="6584" Count="0" />
      <LineId Id="3110" Count="5" />
      <LineId Id="5386" Count="0" />
      <LineId Id="5399" Count="0" />
      <LineId Id="6317" Count="0" />
      <LineId Id="5400" Count="2" />
      <LineId Id="5387" Count="1" />
      <LineId Id="3116" Count="0" />
      <LineId Id="3122" Count="0" />
      <LineId Id="5520" Count="0" />
      <LineId Id="5522" Count="1" />
      <LineId Id="5527" Count="0" />
      <LineId Id="5526" Count="0" />
      <LineId Id="5525" Count="0" />
      <LineId Id="5521" Count="0" />
      <LineId Id="5780" Count="0" />
      <LineId Id="5784" Count="2" />
      <LineId Id="5783" Count="0" />
      <LineId Id="5781" Count="0" />
      <LineId Id="3123" Count="0" />
      <LineId Id="5528" Count="0" />
      <LineId Id="3125" Count="1" />
      <LineId Id="5782" Count="0" />
      <LineId Id="5524" Count="0" />
      <LineId Id="4667" Count="5" />
      <LineId Id="4666" Count="0" />
      <LineId Id="3127" Count="9" />
      <LineId Id="3949" Count="0" />
      <LineId Id="3137" Count="3" />
      <LineId Id="1994" Count="0" />
      <LineId Id="6587" Count="1" />
      <LineId Id="6318" Count="0" />
      <LineId Id="3839" Count="1" />
      <LineId Id="1678" Count="64" />
      <LineId Id="3362" Count="0" />
      <LineId Id="1743" Count="2" />
      <LineId Id="3363" Count="0" />
      <LineId Id="1746" Count="4" />
      <LineId Id="6074" Count="0" />
      <LineId Id="3361" Count="0" />
      <LineId Id="1751" Count="1" />
      <LineId Id="5954" Count="0" />
      <LineId Id="1754" Count="1" />
      <LineId Id="5910" Count="2" />
      <LineId Id="5942" Count="0" />
      <LineId Id="5944" Count="1" />
      <LineId Id="5943" Count="0" />
      <LineId Id="5946" Count="0" />
      <LineId Id="5917" Count="16" />
      <LineId Id="5916" Count="0" />
      <LineId Id="5939" Count="1" />
      <LineId Id="5938" Count="0" />
      <LineId Id="5914" Count="0" />
      <LineId Id="5941" Count="0" />
      <LineId Id="1757" Count="0" />
      <LineId Id="4790" Count="0" />
      <LineId Id="3364" Count="0" />
      <LineId Id="3367" Count="0" />
      <LineId Id="3369" Count="0" />
      <LineId Id="3368" Count="0" />
      <LineId Id="3365" Count="0" />
      <LineId Id="1758" Count="14" />
      <LineId Id="3251" Count="0" />
      <LineId Id="1773" Count="1" />
      <LineId Id="2098" Count="0" />
      <LineId Id="2095" Count="1" />
      <LineId Id="2294" Count="0" />
      <LineId Id="2097" Count="0" />
      <LineId Id="1775" Count="3" />
      <LineId Id="5660" Count="0" />
      <LineId Id="5649" Count="0" />
      <LineId Id="1779" Count="1" />
      <LineId Id="808" Count="0" />
      <LineId Id="5145" Count="0" />
      <LineId Id="2830" Count="0" />
      <LineId Id="2843" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.AddNCError">
      <LineId Id="29" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.DriveErrorHandling">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.DriveHomeAbsSwitch">
      <LineId Id="148" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.DriveHomeLagError">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.DriveHomeRefPulse">
      <LineId Id="148" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.DriveUnitsTorqueToRealValue">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Halt">
      <LineId Id="3" Count="18" />
      <LineId Id="71" Count="0" />
      <LineId Id="25" Count="6" />
      <LineId Id="80" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="34" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.HomeAbsEncLagError">
      <LineId Id="17" Count="109" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.HomeAbsoluteEncoder">
      <LineId Id="6" Count="3" />
      <LineId Id="121" Count="0" />
      <LineId Id="10" Count="3" />
      <LineId Id="173" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="150" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="47" Count="4" />
      <LineId Id="161" Count="0" />
      <LineId Id="163" Count="1" />
      <LineId Id="170" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="167" Count="2" />
      <LineId Id="162" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="52" Count="7" />
      <LineId Id="91" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="60" Count="5" />
      <LineId Id="74" Count="3" />
      <LineId Id="115" Count="1" />
      <LineId Id="118" Count="2" />
      <LineId Id="117" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="157" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="152" Count="2" />
      <LineId Id="81" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.HomeAbsSwitch">
      <LineId Id="15" Count="1" />
      <LineId Id="363" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="365" Count="2" />
      <LineId Id="364" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="47" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="240" Count="2" />
      <LineId Id="238" Count="1" />
      <LineId Id="243" Count="2" />
      <LineId Id="235" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="125" Count="9" />
      <LineId Id="248" Count="9" />
      <LineId Id="124" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="136" Count="4" />
      <LineId Id="329" Count="0" />
      <LineId Id="141" Count="2" />
      <LineId Id="463" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="144" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="261" Count="4" />
      <LineId Id="269" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="469" Count="4" />
      <LineId Id="268" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="153" Count="3" />
      <LineId Id="414" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="158" Count="3" />
      <LineId Id="412" Count="1" />
      <LineId Id="162" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="274" Count="3" />
      <LineId Id="410" Count="1" />
      <LineId Id="278" Count="5" />
      <LineId Id="408" Count="1" />
      <LineId Id="273" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="163" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="197" Count="2" />
      <LineId Id="213" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="323" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="204" Count="3" />
      <LineId Id="324" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="321" Count="1" />
      <LineId Id="294" Count="0" />
      <LineId Id="296" Count="3" />
      <LineId Id="325" Count="0" />
      <LineId Id="300" Count="5" />
      <LineId Id="326" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="209" Count="2" />
      <LineId Id="191" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="387" Count="1" />
      <LineId Id="390" Count="2" />
      <LineId Id="386" Count="0" />
      <LineId Id="33" Count="7" />
      <LineId Id="346" Count="0" />
      <LineId Id="41" Count="4" />
      <LineId Id="462" Count="0" />
      <LineId Id="456" Count="4" />
      <LineId Id="441" Count="0" />
      <LineId Id="431" Count="1" />
      <LineId Id="434" Count="1" />
      <LineId Id="490" Count="5" />
      <LineId Id="489" Count="0" />
      <LineId Id="436" Count="4" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.HomeDirect">
      <LineId Id="22" Count="2" />
      <LineId Id="116" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="89" Count="2" />
      <LineId Id="149" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="97" Count="6" />
      <LineId Id="95" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="128" Count="2" />
      <LineId Id="138" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.HomeLagErrExternFeedBack">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.HomeLagError">
      <LineId Id="6" Count="1" />
      <LineId Id="291" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="288" Count="2" />
      <LineId Id="287" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="416" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="516" Count="1" />
      <LineId Id="510" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="418" Count="2" />
      <LineId Id="417" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="247" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="268" Count="2" />
      <LineId Id="340" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="394" Count="1" />
      <LineId Id="421" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="424" Count="3" />
      <LineId Id="513" Count="2" />
      <LineId Id="428" Count="3" />
      <LineId Id="422" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="343" Count="2" />
      <LineId Id="339" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="255" Count="1" />
      <LineId Id="250" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="483" Count="1" />
      <LineId Id="478" Count="0" />
      <LineId Id="281" Count="1" />
      <LineId Id="251" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="535" Count="1" />
      <LineId Id="538" Count="2" />
      <LineId Id="306" Count="0" />
      <LineId Id="211" Count="10" />
      <LineId Id="476" Count="0" />
      <LineId Id="473" Count="2" />
      <LineId Id="222" Count="8" />
      <LineId Id="273" Count="4" />
      <LineId Id="272" Count="0" />
      <LineId Id="445" Count="2" />
      <LineId Id="458" Count="1" />
      <LineId Id="456" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.HomeRefPulse">
      <LineId Id="170" Count="1" />
      <LineId Id="304" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="172" Count="4" />
      <LineId Id="215" Count="2" />
      <LineId Id="222" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="234" Count="4" />
      <LineId Id="253" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="351" Count="3" />
      <LineId Id="349" Count="0" />
      <LineId Id="357" Count="1" />
      <LineId Id="350" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="362" Count="2" />
      <LineId Id="359" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="306" Count="1" />
      <LineId Id="298" Count="0" />
      <LineId Id="290" Count="2" />
      <LineId Id="303" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="381" Count="15" />
      <LineId Id="367" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="299" Count="1" />
      <LineId Id="198" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="199" Count="1" />
      <LineId Id="148" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.HomingGlobalHandle">
      <LineId Id="6" Count="15" />
      <LineId Id="265" Count="0" />
      <LineId Id="277" Count="1" />
      <LineId Id="26" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="62" Count="6" />
      <LineId Id="270" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="75" Count="4" />
      <LineId Id="81" Count="2" />
      <LineId Id="88" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="105" Count="1" />
      <LineId Id="112" Count="1" />
      <LineId Id="123" Count="4" />
      <LineId Id="274" Count="0" />
      <LineId Id="280" Count="1" />
      <LineId Id="134" Count="1" />
      <LineId Id="148" Count="2" />
      <LineId Id="152" Count="1" />
      <LineId Id="168" Count="0" />
      <LineId Id="223" Count="10" />
      <LineId Id="273" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="244" Count="8" />
      <LineId Id="222" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.INIT">
      <LineId Id="108" Count="6" />
      <LineId Id="289" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="242" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="254" Count="1" />
      <LineId Id="247" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="283" Count="4" />
      <LineId Id="279" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="290" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="121" Count="5" />
      <LineId Id="190" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="160" Count="2" />
      <LineId Id="151" Count="8" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.INIT_Specific">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Jog">
      <LineId Id="3" Count="12" />
      <LineId Id="74" Count="2" />
      <LineId Id="16" Count="13" />
      <LineId Id="68" Count="0" />
      <LineId Id="33" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_ChangingOperationMode">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_CheckTemperatureLimit">
      <LineId Id="24" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="11" Count="2" />
      <LineId Id="17" Count="4" />
      <LineId Id="26" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_CngMaxTorque">
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_CngTorqueOffset">
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_DCMonitor">
      <LineId Id="56" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="36" Count="2" />
      <LineId Id="42" Count="5" />
      <LineId Id="40" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="66" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_InitVelKI">
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_InitVelKP">
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_MonitorErro18000">
      <LineId Id="6" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="10" Count="5" />
      <LineId Id="18" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_ReadObj">
      <LineId Id="100" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Meth_WriteObj">
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.MonitorUpdate">
      <LineId Id="6" Count="5" />
      <LineId Id="30" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="14" Count="4" />
      <LineId Id="67" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="60" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.MoveAbs">
      <LineId Id="3" Count="25" />
      <LineId Id="145" Count="1" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="23" />
      <LineId Id="133" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="59" Count="8" />
      <LineId Id="138" Count="1" />
      <LineId Id="72" Count="24" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.MoveAdd">
      <LineId Id="3" Count="18" />
      <LineId Id="144" Count="2" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="22" />
      <LineId Id="120" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="51" Count="10" />
      <LineId Id="135" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="66" Count="23" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.MoveRelative">
      <LineId Id="3" Count="17" />
      <LineId Id="145" Count="2" />
      <LineId Id="150" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="33" />
      <LineId Id="136" Count="1" />
      <LineId Id="61" Count="7" />
      <LineId Id="72" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="73" Count="25" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.MoveVelo">
      <LineId Id="3" Count="9" />
      <LineId Id="52" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="14" Count="6" />
      <LineId Id="63" Count="0" />
      <LineId Id="21" Count="7" />
      <LineId Id="31" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Power">
      <LineId Id="3" Count="6" />
      <LineId Id="31" Count="0" />
      <LineId Id="10" Count="5" />
      <LineId Id="55" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="19" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.ReadActualTorque">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.ReadDcVoltage">
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.ReadNC_AxisBoolParam">
      <LineId Id="10" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="47" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.ReadNC_AxisParam">
      <LineId Id="10" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="21" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="47" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.ReadStatus">
      <LineId Id="3" Count="20" />
      <LineId Id="37" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.ResetAll_MC_FB">
      <LineId Id="3" Count="15" />
      <LineId Id="48" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="19" Count="17" />
      <LineId Id="2" Count="0" />
      <LineId Id="40" Count="4" />
      <LineId Id="55" Count="3" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.SetOverride">
      <LineId Id="3" Count="6" />
      <LineId Id="51" Count="2" />
      <LineId Id="10" Count="11" />
      <LineId Id="25" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="26" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.StatusUpdate">
      <LineId Id="6" Count="24" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.Stop">
      <LineId Id="3" Count="4" />
      <LineId Id="84" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="11" Count="11" />
      <LineId Id="26" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="27" Count="4" />
      <LineId Id="65" Count="0" />
      <LineId Id="62" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="2" />
      <LineId Id="2" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="94" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.UDINT_TO_HEX_STRING">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.WAIT">
      <LineId Id="3" Count="4" />
      <LineId Id="9" Count="2" />
      <LineId Id="54" Count="1" />
      <LineId Id="12" Count="37" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.WriteNC_AxisBoolParam">
      <LineId Id="10" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="21" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="2" />
      <LineId Id="47" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="BasicAxis_FB.WriteNC_AxisParam">
      <LineId Id="70" Count="23" />
      <LineId Id="58" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
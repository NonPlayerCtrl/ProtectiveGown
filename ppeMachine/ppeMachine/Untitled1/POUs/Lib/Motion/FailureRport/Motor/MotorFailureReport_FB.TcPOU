<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="MotorFailureReport_FB" Id="{20eea4f0-96bf-0356-09b1-09cafda83e4c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MotorFailureReport_FB
VAR_INPUT
	AxisCtrlPtr			: POINTER TO Basic_axis_typ ;
	StationID 			: eStationNo;
	
	(*Ref_ev_MOTOR_POSITION   : REFERENCE TO ev_MOTOR_POSITION_ERROR REF= ev_MOTOR_POSITION_ERROR;
	Ref_ev_MOTOR_Speed      : REFERENCE TO ev_MOTOR_SPEED_ERROR    REF= ev_MOTOR_SPEED_ERROR;	
	Ref_ev_HOME_NOT_FOUND   : REFERENCE TO ev_MOTOR_HOME_NOT_FOUND REF= ev_MOTOR_HOME_NOT_FOUND;
	Ref_ev_OVER_CURRENT     : REFERENCE TO ev_MOTOR_OVER_CURRENT   REF= ev_MOTOR_OVER_CURRENT;

	Ref_ev_MOTOR_OVER_TEMP      : REFERENCE TO  ev_MOTOR_OVER_TEMP        REF= ev_MOTOR_OVER_TEMP;
	Ref_ev_MOTOR_FEEDBACK_ERROR : REFERENCE TO	ev_MOTOR_FEEDBACK_ERROR   REF=  ev_MOTOR_FEEDBACK_ERROR ;
	Ref_ev_MOTOR_GENERAL_ERROR 	: REFERENCE TO	ev_MOTOR_GENERAL_ERROR    REF=  ev_MOTOR_GENERAL_ERROR ;
	Ref_ev_MOTOR_STALLED		: REFERENCE TO  ev_MOTOR_STALLED          REF=  ev_MOTOR_STALLED;
	Ref_ev_MOTOR_SUPPLY_ERROR 	: REFERENCE TO	ev_MOTOR_SUPPLY_ERROR     REF=  ev_MOTOR_SUPPLY_ERROR ;
 	Ref_ev_PLC_ILLEGAL_MSG  	: REFERENCE TO	ev_PLC_ILLEGAL_MSG        REF= 	ev_PLC_ILLEGAL_MSG  ;
	Ref_ev_PLC_ILLEGAL_PARAM 	: REFERENCE TO	ev_PLC_ILLEGAL_PARAM      REF= 	ev_PLC_ILLEGAL_PARAM ;
	Ref_ev_Drive_Not_Enabled 	: REFERENCE TO  ev_MOTOR_DRIVE_NOT_ENABLED REF= 	ev_MOTOR_DRIVE_NOT_ENABLED ;
	
	Ref_ev_DRIVE_NOT_READY    	: REFERENCE TO	ev_MOTOR_DRIVE_NOT_READY  REF= 	ev_MOTOR_DRIVE_NOT_READY ;
	Ref_ev_Drive_ComError		: REFERENCE TO  ev_MOTOR_DRIVE_COM_ERROR  REF= 	ev_MOTOR_DRIVE_COM_ERROR ;
	Ref_ev_BRAKE_RESISTOR_ERROR : REFERENCE TO  ev_BRAKE_RESISTOR_ERROR   REF= 	ev_BRAKE_RESISTOR_ERROR ;
	*)
	

                                                                            
	                                                                        


	
	
END_VAR
VAR
	LastErrorId			: UDINT;
	PrevErrorId			: UDINT;
	AxisLastErrorCount  : UDINT := 0;
	Pop_Delay	 		: TON;
	ErrorID_Delay 		: TON;
	lastEventID: enumMotorEvents;
	MotorErrorQ			: Queue;
	QErrorCounter       : UDINT;
	//
	LogMsgInit          : BOOL := TRUE;
	LogMsg_0 			: LogMsg ;
	//Get old events from Q
	PrevMotorEvents		: Eh_ErrorEntry_typ;
	ThreadName		    : STRING[20];	
	fbPrgmBasic			:FB_PrgmBasic;
	
	//EventParameters:EventParam_Typ;	
	//EventHeader:EventHeader_Typ;	
	
END_VAR

//Classifier
//Method]]></Declaration>
    <Implementation>
      <ST><![CDATA[




IF AxisCtrlPtr <> 0 THEN
		
	IF LogMsgInit THEN      
		LogMsgInit := FALSE ;
		ThreadName := AxisCtrlPtr^.Input.Parameter.ThreadName;
		CONCAT(  ThreadName,'Re');
		fnLogMsgInit(ADR(LogMsg_0), ThreadName, ADR(LogGlobalArray), ADR(CONST_ZERO));
		LogMsg_0.Enable:= 		TRUE;
	END_IF

	IF AxisCtrlPtr^.Output.Error.ErrorCount > 0 AND AxisCtrlPtr^.Input.Command.ErrorAcknowledge = FALSE THEN
		ErrorID_Delay.PT := T#25MS ;	
		Pop_Delay.IN := TRUE;	
			
			
	END_IF
	
	
	IF Pop_Delay.Q THEN
		Pop_Delay.IN := FALSE;
		AxisCtrlPtr^.Input.Command.ErrorAcknowledge := TRUE;
	END_IF	
	Pop_Delay();
	
	//Add code for clear error	
	ErrorID_Delay.IN := AxisCtrlPtr^.Output.Error.ErrorCount  = 0 AND AxisCtrlPtr^.Output.Status.FAULT ;
	ErrorID_Delay.PT := T#100MS ;
	ErrorID_Delay();
						
	IF ErrorID_Delay.Q THEN
		
		AxisCtrlPtr^.Input.Command.ClearFault := TRUE;
		
	END_IF
	

	//Check if there is new error
	IF AxisCtrlPtr^.Output.Error.fbErrorHandler.EntriesCount <> 0 AND
	  lastEventID<> AxisCtrlPtr^.Output.Error.ErrorEntry.MotorEvents AND 
	  AxisCtrlPtr^.Output.Error.ErrorEntry.MotorEvents <> enumMotorEvents.NoEvents THEN		
		
		AxisLastErrorCount := AxisCtrlPtr^.Output.Error.fbErrorHandler.EntriesCount;
	 	
		IF Meth_GetEvent( AxisCtrlPtr^.Output.Error.ErrorEntry ) = FALSE THEN
			
			MotorErrorQ.Enqueue(ADR(AxisCtrlPtr^.Output.Error.ErrorEntry),SIZEOF(Eh_ErrorEntry_typ));	
			IF AxisCtrlPtr^.Input.Parameter.pFlowID <> 0 THEN
			   fnLogMsg(ADR(LogMsg_0), LOG_INFO, 'Event is locked keep msg in Q Send Event ID %d,ErrorId =%d, flowid %d',
								AxisCtrlPtr^.Output.Error.ErrorEntry.MotorEvents  ,
								UDINT_TO_DINT(AxisCtrlPtr^.Output.Error.ErrorEntry.ErrorId),							
								AxisCtrlPtr^.Input.Parameter.pFlowID^);
			ELSE
				
			   fnLogMsg(ADR(LogMsg_0), LOG_INFO, 'Event is locked keep msg in Q Send Event ID %d,ErrorId =%d THERE IS NO LINK TO FLOW ID:',
								AxisCtrlPtr^.Output.Error.ErrorEntry.MotorEvents  ,
								UDINT_TO_DINT(AxisCtrlPtr^.Output.Error.ErrorEntry.ErrorId),							
								0);
			END_IF							
		ELSE

							
			IF AxisCtrlPtr^.Output.Error.ErrorEntry.ErrorId <>0 THEN
				
				LastErrorId := 	AxisCtrlPtr^.Output.Error.ErrorEntry.ErrorId;	
				
			END_IF
			
			PrevErrorId := AxisCtrlPtr^.Output.Error.ErrorEntry.ErrorId;
	
		END_IF
		
		lastEventID := 	AxisCtrlPtr^.Output.Error.ErrorEntry.MotorEvents;
		
	ELSIF MotorErrorQ.CheckQReadAvailable() THEN
					
	
			IF MotorErrorQ.ReadCurrentEntry(ADR(PrevMotorEvents),SIZEOF(Eh_ErrorEntry_typ)) THEN	
	
				IF Meth_GetEvent( PrevMotorEvents )  THEN
						
					MotorErrorQ.Dequeue(ADR(PrevMotorEvents),SIZEOF(PrevMotorEvents));
					
					fnLogMsg(ADR(LogMsg_0), LOG_INFO, 'Dequeue Event ID %d,ErrorId =%d',
								PrevMotorEvents.MotorEvents  ,
								UDINT_TO_DINT(PrevMotorEvents.ErrorId),							
								0);
	
				END_IF
			END_IF
	END_IF
	
END_IF
//fnLogTransfer FUNCTION call
fbPrgmBasic();

fnLogTransfer(ADR(LogMsg_0));]]></ST>
    </Implementation>
    <Method Name="Meth_GetEvent" Id="{ca711a49-4463-08c1-0a73-929709d939e4}">
      <Declaration><![CDATA[METHOD Meth_GetEvent : BOOL
VAR_INPUT
	ErrorEntry		: Eh_ErrorEntry_typ;
END_VAR
VAR
	EventSentOk:  	BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[   EventSentOk := FALSE;

	CASE ErrorEntry.MotorEvents OF
		enumMotorEvents.NoEvents				:
			 EventSentOk := TRUE;//No Event	
		enumMotorEvents.MotorPositionError      :
			
			IF Meth_SendEvent( Ref_ev_MOTOR_POSITION ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
				
		enumMotorEvents.MotorSpeedError	        :
			IF Meth_SendEvent(  Ref_ev_MOTOR_Speed ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.MotorHomeNotFound	    :
			IF Meth_SendEvent( Ref_ev_HOME_NOT_FOUND ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.MotorOverCurrent	    :
			IF Meth_SendEvent( Ref_ev_OVER_CURRENT ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.MotorOverTemp		    :
			IF Meth_SendEvent(Ref_ev_MOTOR_OVER_TEMP ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.MotorFeedBackErr	    :
			IF Meth_SendEvent( Ref_ev_MOTOR_FEEDBACK_ERROR ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.MotorGeneralError		:
			IF Meth_SendEvent(Ref_ev_MOTOR_GENERAL_ERROR ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.MotorStalled			:
			IF Meth_SendEvent( Ref_ev_MOTOR_STALLED ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.MotorSupplyError		:
			IF Meth_SendEvent( Ref_ev_MOTOR_SUPPLY_ERROR ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.PLCillegalMsg			:
			IF Meth_SendEvent(Ref_ev_PLC_ILLEGAL_MSG ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.PLCIllegalParam			:
			IF Meth_SendEvent( Ref_ev_PLC_ILLEGAL_PARAM ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.DriveNotEnabled		    :
			IF Meth_SendEvent(Ref_ev_Drive_Not_Enabled ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.DriveNotReady           :
			IF Meth_SendEvent(Ref_ev_DRIVE_NOT_READY  ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.DriveComError           :
			IF Meth_SendEvent(Ref_ev_Drive_ComError ) = FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		enumMotorEvents.BreakResistorError:
			IF Meth_SendEvent( Ref_ev_BRAKE_RESISTOR_ERROR)= FALSE THEN
				EventSentOk := FALSE;
			ELSE
				EventSentOk := TRUE;
			END_IF
		
	END_CASE
	
		IF EventSentOk  AND ErrorEntry.MotorEvents <> enumMotorEvents.NoEvents THEN
			IF AxisCtrlPtr^.Input.Parameter.pFlowID <> 0 THEN
				fnLogMsg(ADR(LogMsg_0), LOG_INFO, 'Send Event ID %d,ErrorId =%d, FlowId=%d',
					AxisCtrlPtr^.Output.Error.ErrorEntry.MotorEvents  ,
					UDINT_TO_DINT(AxisCtrlPtr^.Output.Error.ErrorEntry.ErrorId),							
					AxisCtrlPtr^.Input.Parameter.pFlowID^);
			ELSE
				fnLogMsg(ADR(LogMsg_0), LOG_INFO, 'Send Event ID %d,ErrorId =%d, THERE IS NO LINK TO FLOWID',
					AxisCtrlPtr^.Output.Error.ErrorEntry.MotorEvents  ,
					UDINT_TO_DINT(AxisCtrlPtr^.Output.Error.ErrorEntry.ErrorId),							
					0);
		
			END_IF		
		END_IF

	Meth_GetEvent := EventSentOk;
							

	
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_SendEvent" Id="{17a229e8-5c5e-0243-0858-7f4311c71782}">
      <Declaration><![CDATA[METHOD Meth_SendEvent : BOOL
VAR_INPUT
	RefEvent : REFERENCE TO EventHelper;
END_VAR
VAR

	Dummy :DINT :=0;
//	pFlowID :POINTER TO DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(RefEvent) THEN
		
		EventHeader.SubsysID :=			 AxisCtrlPtr^.Input.Parameter.SubsysID; 
		IF AxisCtrlPtr^.Input.Parameter.pFlowID <> 0 THEN
			EventHeader.pFlowID :=  AxisCtrlPtr^.Input.Parameter.pFlowID;					 // Flow ID
		ELSE
			EventHeader.pFlowID :=  ADR(Dummy);
		END_IF	
		EventParameters.MotorID := 		 AxisCtrlPtr^.Input.Parameter.MotorID; 	// Motor ID
		EventParameters.VendorNameID :=  AxisCtrlPtr^.Input.Parameter.Drive.VendorNameID;	// Vendor name ID

		fbPrgmBasic.mEventThrow(RefEvent,ADR(EventHeader),ADR(EventParameters) );			//RefEvent();
		Meth_SendEvent := TRUE;

END_IF	]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MotorFailureReport_FB">
      <LineId Id="380" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="381" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="391" Count="1" />
      <LineId Id="463" Count="1" />
      <LineId Id="393" Count="1" />
      <LineId Id="206" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="471" Count="1" />
      <LineId Id="467" Count="1" />
      <LineId Id="473" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="212" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="400" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="409" Count="1" />
      <LineId Id="363" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="577" Count="3" />
      <LineId Id="576" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="406" Count="1" />
      <LineId Id="313" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="314" Count="2" />
      <LineId Id="365" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="414" Count="3" />
      <LineId Id="369" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="519" Count="1" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="MotorFailureReport_FB.Meth_GetEvent">
      <LineId Id="138" Count="1" />
      <LineId Id="7" Count="3" />
      <LineId Id="44" Count="0" />
      <LineId Id="11" Count="6" />
      <LineId Id="51" Count="3" />
      <LineId Id="18" Count="1" />
      <LineId Id="55" Count="3" />
      <LineId Id="20" Count="1" />
      <LineId Id="59" Count="3" />
      <LineId Id="22" Count="1" />
      <LineId Id="63" Count="3" />
      <LineId Id="24" Count="1" />
      <LineId Id="67" Count="3" />
      <LineId Id="26" Count="1" />
      <LineId Id="71" Count="3" />
      <LineId Id="28" Count="1" />
      <LineId Id="75" Count="3" />
      <LineId Id="30" Count="1" />
      <LineId Id="79" Count="3" />
      <LineId Id="32" Count="1" />
      <LineId Id="83" Count="3" />
      <LineId Id="34" Count="1" />
      <LineId Id="87" Count="3" />
      <LineId Id="36" Count="1" />
      <LineId Id="91" Count="3" />
      <LineId Id="38" Count="1" />
      <LineId Id="95" Count="3" />
      <LineId Id="40" Count="1" />
      <LineId Id="99" Count="3" />
      <LineId Id="42" Count="1" />
      <LineId Id="162" Count="3" />
      <LineId Id="160" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="129" Count="2" />
      <LineId Id="127" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="150" Count="3" />
      <LineId Id="149" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="124" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="110" Count="1" />
    </LineIds>
    <LineIds Name="MotorFailureReport_FB.Meth_SendEvent">
      <LineId Id="6" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="11" Count="4" />
      <LineId Id="43" Count="2" />
      <LineId Id="17" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
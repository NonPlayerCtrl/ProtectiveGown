<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="VelocityCtrlAxis_FB" Id="{19370e93-5365-40c7-98c2-dbdaeb676dae}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC VelocityCtrlAxis_FB
VAR_INPUT
	
	rAxisBasicFB 		: REFERENCE TO BasicAxis_FB ;
	rVelocityCtrl	 	: REFERENCE TO VelocityCtrl_typ ;
		
END_VAR

VAR_OUTPUT
END_VAR
	
VAR
	LogMsgInit		: BOOL;
	LogMsg_0 		: LogMsg ;
	
//	GetCycleTime:	FB_CTRL_GET_TASK_CYCLETIME;
//	CycleTime:		TIME;
//	CycleTimeInit:	BOOL;
	
	
	fbGetCurTaskIdx: 		GETCURTASKINDEX;
    TaskCycleTimeUDINT: 	UDINT;
    TaskCycleTime: 			TIME;

	EnableTrigger : Trigger ;
	
	DisableTriger	: Trigger ;
	Disable			: BOOL ;
	
// Change Oper params
	ChangeModeTrigger   : Trigger ;
	CngToVelocityState 	: SINT;
	PrevCngToVelocityState : SINT;
	// Change Oper params
	InitSctrlTrigger : Trigger ;
	InitSctrlState 	 : SINT;	

	
	ErrorTrig : Trigger ;
	AxisStep     : eVelocityCtrlState ;
	ReturnToAxisStep     : eVelocityCtrlState ;
	
	LastAxisStep : eVelocityCtrlState ;
	
	tmp_ErrorEntry			: Eh_ErrorEntry_typ;
	
	
	
	ReadPosCtrlParamDone 	: BOOL;	
	OldCyclicTorque 		: LREAL;		
	OldSctrlKp 				: LREAL;
	OldSctrlKi 				: LREAL;
	PrevVel 				: LREAL;
	Error					: BOOL;
	//Paramter
		
	CyclicTorqueAtPositionCtrl : LREAL;	
	

	
	Delay 			:	 TON;
	
	StartTestRead: BOOL;
	TestRead : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// 
// At default set default torque
//
// Change mode to velocity control
// 
//
//
//
//
IF __ISVALIDREF( rAxisBasicFB) AND __ISVALIDREF(rVelocityCtrl) THEN
	
	

IF NOT LogMsgInit THEN 
	LogMsg_0.logData.category:=	rAxisBasicFB.AxisCtrlPtr^.Input.Parameter.ThreadName;     
	LogMsg_0.Enable:= 	TRUE; 	
END_IF

IF (TaskCycleTimeUDINT = 0) THEN
	fbGetCurTaskIdx();
	TaskCycleTimeUDINT := _TaskInfo[fbGetCurTaskIdx.index].CycleTime;
	TaskCycleTime	:= UDINT_TO_TIME(TaskCycleTimeUDINT/10000); 
END_IF



LogMsg_0.ptrGlobalArray:= 	ADR(LogGlobalArray);
LogMsg_0.ptrEncoderAngle:= 	ADR(rAxisBasicFB.AxisCtrlPtr^.Input.Parameter.PosForLog);



//in case of Stop go to STATE_WAIT
IF (rVelocityCtrl.Output.Status.Active)AND(NOT rVelocityCtrl.Output.Status.InStopVelCtrl)  THEN
	
	
	IF rAxisBasicFB.AxisCtrlPtr^.Output.Status.FAULT THEN
 
			AxisStep := eVelocityCtrlState.VELOCITY_CTRL_STATE_ERROR;	

	ELSIF (rAxisBasicFB.AxisCtrlPtr^.Input.Command.Halt) OR rVelocityCtrl.Input.Command.Stop THEN
		rVelocityCtrl.Input.Command.Stop := FALSE;
		Meth_stop(FALSE);
		AxisStep := eVelocityCtrlState.VELOCITY_CTRL_STATE_STOP ;

		
	ELSIF (rAxisBasicFB.AxisCtrlPtr^.Input.Command.Stop)  THEN 
		AxisStep := eVelocityCtrlState.VELOCITY_CTRL_ACTIVE_STAND_STILL;
		PrevVel :=  rVelocityCtrl.Input.Parameter.CyclicVelocity := 0;
	END_IF	
	
END_IF


IF EnableTrigger.EDGEPOS(rVelocityCtrl.Input.Command.Enable) THEN
 	IF (NOT rVelocityCtrl.Output.Status.Active) AND AxisStep = eVelocityCtrlState.VELOCITY_CTRL_STATE_READY THEN
		METH_ChangeToVelMode(FALSE);
		AxisStep := VELOCITY_CTRL_CNG_TO_VEL_MODE ;
	END_IF	
		
END_IF		
	
IF EnableTrigger.EDGENEG( rVelocityCtrl.Input.Command.Enable) THEN
	IF (rVelocityCtrl.Output.Status.Active) THEN
 		Meth_ExitVelCtrl(FALSE);
		AxisStep :=  eVelocityCtrlState.VELOCITY_CTRL_DISABLE;
	END_IF	
	
END_IF		



CASE AxisStep OF
		
	(******************** WAIT *************************)
		
	VELOCITY_CTRL_STATE_WAIT:	
		rVelocityCtrl.Output.Status.Active := FALSE;
		IF rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisInitDone
			 THEN
			AxisStep := VELOCITY_CTRL_STATE_READY ;
		END_IF
		
		THIS^.ResetAll_MC_FB();
		
	VELOCITY_CTRL_STATE_READY:
	
		rVelocityCtrl.Output.Status.Active := FALSE;
		IF rVelocityCtrl.Input.Command.InitSctrl THEN
				
				rVelocityCtrl.Input.Command.InitSctrl := FALSE;
				rVelocityCtrl.Output.Status.SctrlInitialized := FALSE;
				Meth_InitSctrl(FALSE);
				
				rAxisBasicFB.Meth_WriteObj(FALSE,enumMotionObject.VEL_KI,0);
				AxisStep :=VELOCITY_CTRL_InitSctrl;
				ReturnToAxisStep := VELOCITY_CTRL_STATE_READY;
 								
		ELSIF rVelocityCtrl.Input.Command.Stop THEN
			
			rVelocityCtrl.Input.Command.Stop  := FALSE;
			AxisStep := VELOCITY_CTRL_STATE_STOP ;
			
		ELSIF rVelocityCtrl.Input.Parameter.CyclicTorque <> OldCyclicTorque THEN
				
				Error := FALSE;
				ReturnToAxisStep := VELOCITY_CTRL_STATE_READY;
				AxisStep :=VELOCITY_CTRL_CHANGE_TORQUE;
				
				rAxisBasicFB.Meth_CngTorqueOffset(FALSE,0);
				rAxisBasicFB.Meth_CngMaxTorque(FALSE,0);
				ReturnToAxisStep := VELOCITY_CTRL_STATE_READY;
				rAxisBasicFB.Meth_WriteObj(FALSE,enumMotionObject.VEL_KI,0);	
				rVelocityCtrl.Output.Status.UpdateTorqueDone := FALSE;		
		END_IF
		

//ReadPosCtrlParamDone
		
	VELOCITY_CTRL_CNG_TO_VEL_MODE:
		// Change mode to velocity control
		IF METH_ChangeToVelMode(TRUE) THEN
			rVelocityCtrl.Output.Status.Active := TRUE;
			AxisStep :=VELOCITY_CTRL_MOVE_VELOCITY;
		END_IF	
			
	VELOCITY_CTRL_READ_POS_CTRL_VALUES:
			IF Meth_ReadPosCtrlValues(TRUE) THEN
				AxisStep :=VELOCITY_CTRL_MOVE_VELOCITY;
			END_IF
	
				
	VELOCITY_CTRL_MOVE_VELOCITY:
	
		IF rVelocityCtrl.Input.Parameter.CyclicVelocity <>0 OR rAxisBasicFB.AxisCtrlPtr^.Output.monitor.ActVelocity <>0  THEN
			Meth_MoveVel();
			AxisStep := VELOCITY_CTRL_WAIT_MOVE_VELOCITY_DONE;
		ELSE
			AxisStep := VELOCITY_CTRL_ACTIVE;
		END_IF	
	
	
	VELOCITY_CTRL_WAIT_MOVE_VELOCITY_DONE:	
		IF rAxisBasicFB.AxisCtrlPtr^.Output.Status.MC_MoveVelocity.In_Velocity THEN
			IF rVelocityCtrl.Input.Parameter.CyclicTorque <> 0 THEN
				Error := FALSE;
				ReturnToAxisStep := VELOCITY_CTRL_ACTIVE;
				AxisStep :=VELOCITY_CTRL_CHANGE_TORQUE;
				rAxisBasicFB.Meth_CngTorqueOffset(FALSE,0);
				rAxisBasicFB.Meth_CngMaxTorque(FALSE,0);
				ReturnToAxisStep := VELOCITY_CTRL_ACTIVE;
				rAxisBasicFB.Meth_WriteObj(FALSE,enumMotionObject.VEL_KI,0);
			ELSE
				PrevVel := rVelocityCtrl.Input.Parameter.CyclicVelocity;
				AxisStep := VELOCITY_CTRL_ACTIVE;
			END_IF	 
	END_IF
		
		
	VELOCITY_CTRL_ACTIVE:
	
			rVelocityCtrl.Output.Status.Active := TRUE;
			IF rVelocityCtrl.Input.Command.Stop THEN
				meth_Stop(FALSE);
				rVelocityCtrl.Input.Command.Stop  := FALSE;
				AxisStep := VELOCITY_CTRL_STATE_STOP ;
				
			ELSIF rVelocityCtrl.Input.Command.InitSctrl THEN
				
				rVelocityCtrl.Input.Command.InitSctrl := FALSE;
				rVelocityCtrl.Output.Status.SctrlInitialized := FALSE;
				Meth_InitSctrl(FALSE);
				
				rAxisBasicFB.Meth_WriteObj(FALSE,enumMotionObject.VEL_KI,0);
				AxisStep :=VELOCITY_CTRL_InitSctrl;
				ReturnToAxisStep := VELOCITY_CTRL_ACTIVE;
				
			ELSIF rVelocityCtrl.Input.Parameter.CyclicTorque <> OldCyclicTorque THEN
				
				Error := FALSE;
				ReturnToAxisStep := VELOCITY_CTRL_ACTIVE;
				AxisStep :=VELOCITY_CTRL_CHANGE_TORQUE;
				rAxisBasicFB.Meth_CngTorqueOffset(FALSE,0);
				rAxisBasicFB.Meth_CngMaxTorque(FALSE,0);
				ReturnToAxisStep := VELOCITY_CTRL_ACTIVE;
				rAxisBasicFB.Meth_WriteObj(FALSE,enumMotionObject.VEL_KI,0);				
			ELSIF rVelocityCtrl.Input.Parameter.CyclicVelocity <> rAxisBasicFB.AxisCtrlPtr^.Input.Parameter.Velocity THEN
					AxisStep := VELOCITY_CTRL_MOVE_VELOCITY;
		 	
			ELSIF rVelocityCtrl.Input.Parameter.CyclicVelocity <> PrevVel THEN
				
				AxisStep := VELOCITY_CTRL_MOVE_VELOCITY;
				
			END_IF	
			
	VELOCITY_CTRL_ACTIVE_STAND_STILL:
			rVelocityCtrl.Output.Status.Active := TRUE;
 			
			IF rVelocityCtrl.Input.Parameter.CyclicVelocity <> PrevVel THEN
				
				AxisStep := VELOCITY_CTRL_MOVE_VELOCITY;
			
			
			ELSIF rVelocityCtrl.Input.Command.InitSctrl THEN
				
				rVelocityCtrl.Input.Command.InitSctrl := FALSE;
				rVelocityCtrl.Output.Status.SctrlInitialized := FALSE;
				Meth_InitSctrl(FALSE);
				
				rAxisBasicFB.Meth_WriteObj(FALSE,enumMotionObject.VEL_KI,0);
				AxisStep :=VELOCITY_CTRL_InitSctrl;
				ReturnToAxisStep := VELOCITY_CTRL_ACTIVE_STAND_STILL;
				
			ELSIF rVelocityCtrl.Input.Parameter.CyclicTorque <> OldCyclicTorque THEN
				
				Error := FALSE;
				ReturnToAxisStep := VELOCITY_CTRL_ACTIVE;
				AxisStep :=VELOCITY_CTRL_CHANGE_TORQUE;
				rAxisBasicFB.Meth_CngTorqueOffset(FALSE,0);
				rAxisBasicFB.Meth_CngMaxTorque(FALSE,0);
				ReturnToAxisStep := VELOCITY_CTRL_ACTIVE_STAND_STILL;
				rAxisBasicFB.Meth_WriteObj(FALSE,enumMotionObject.VEL_KI,0);

		 	
			ELSIF rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisStatus.Coupled THEN
				IF rAxisBasicFB.AxisCtrlPtr^.Output.monitor.ActVelocity <> 0 THEN
					AxisStep := VELOCITY_CTRL_ACTIVE;
				END_IF 
			END_IF	

	VELOCITY_CTRL_InitSctrl:
	
			IF Meth_InitSctrl(TRUE,Error=>Error) THEN
				AxisStep :=ReturnToAxisStep;			
			END_IF
			
			IF Error THEN
			//	
			END_IF
	VELOCITY_CTRL_CHANGE_TORQUE:	
				
			IF rVelocityCtrl.Input.Parameter.TorqueMode = eTorqueMode.mcFF THEN
				//IF rAxisBasicFB.Meth_CngTorqueOffset(TRUE,rVelocityCtrl.Input.Parameter.CyclicTorque, Error => Error ) THEN
				IF  rAxisBasicFB.Meth_WriteObj(TRUE, enumMotionObject.TORQUE_OFFSET,rVelocityCtrl.Input.Parameter.CyclicTorque, Error => Error ) THEN
					fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Vel Ctrl Change Torque to=%d',LREAL_TO_DINT(rVelocityCtrl.Input.Parameter.CyclicTorque*1000),0,0);
					
					OldCyclicTorque := rVelocityCtrl.Input.Parameter.CyclicTorque;
					rAxisBasicFB.Meth_CngTorqueOffset(FALSE,rVelocityCtrl.Input.Parameter.CyclicTorque);
					AxisStep :=ReturnToAxisStep;	
					rVelocityCtrl.Output.monitor.SetCyclicTorque := rVelocityCtrl.Input.Parameter.CyclicTorque ;
				END_IF							
			
			ELSIF rVelocityCtrl.Input.Parameter.TorqueMode = eTorqueMode.mcLimit THEN
				//IF rAxisBasicFB.Meth_CngMaxTorque(TRUE,rVelocityCtrl.Input.Parameter.CyclicTorque , Error => Error) THEN
				IF  rAxisBasicFB.Meth_WriteObj(TRUE, enumMotionObject.MAX_TORQUE,rVelocityCtrl.Input.Parameter.CyclicTorque, Error => Error ) THEN					
					OldCyclicTorque := rVelocityCtrl.Input.Parameter.CyclicTorque;
					rVelocityCtrl.Output.monitor.SetCyclicTorque := rVelocityCtrl.Input.Parameter.CyclicTorque ;
					rVelocityCtrl.Output.Status.UpdateTorqueDone := TRUE;
					AxisStep :=ReturnToAxisStep;
	
				END_IF
			END_IF
			
	eVelocityCtrlState.VELOCITY_CTRL_STATE_STOP:
		IF Meth_stop(TRUE) THEN
			
			PrevVel :=  rVelocityCtrl.Input.Parameter.CyclicVelocity := 0;
			AxisStep := eVelocityCtrlState.VELOCITY_CTRL_ACTIVE_STAND_STILL;
		END_IF
	
	
	eVelocityCtrlState.VELOCITY_CTRL_DISABLE:
		rVelocityCtrl.Output.Status.InStopVelCtrl := TRUE;
		IF Meth_ExitVelCtrl(TRUE) THEN
			rVelocityCtrl.Output.Status.InStopVelCtrl := FALSE;
			AxisStep := eVelocityCtrlState.VELOCITY_CTRL_STATE_READY;
		END_IF
	eVelocityCtrlState.VELOCITY_CTRL_STATE_RETURN_ORG_VALUES:
		IF Meth_ReturnOrgPosCtrlValues(TRUE) THEN				
			AxisStep := ReturnToAxisStep ;
		END_IF
		
	eVelocityCtrlState.VELOCITY_CTRL_STATE_ERROR:
			rVelocityCtrl.Output.Status.InStopVelCtrl := TRUE;
			IF Meth_ExitVelCtrl(TRUE) THEN			
				rVelocityCtrl.Output.Status.InStopVelCtrl := FALSE;
				AxisStep := eVelocityCtrlState.VELOCITY_CTRL_STATE_WAIT;
			END_IF

			

	
	
END_CASE 



//=====================================================================================================================\\

//IF CyclicAxisCtrlPtr^.Output.Error.ErrorID <> 0 THEN		
	//BasicAxisCtrlPtr^.Output.Error.ErrorID := CyclicAxisCtrlPtr^.Output.Error.ErrorID ;
	//CyclicAxisCtrlPtr^.Output.Error.ErrorID := 0;
//END_IF

	IF LastAxisStep <> AxisStep THEN
		
		fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Vel Ctrl CurSt=%d LstSt=%d',AxisStep,LastAxisStep,0);
		LastAxisStep := AxisStep ;
	END_IF	
	
	IF StartTestRead THEN
		StartTestRead := FALSE;
		Meth_ReadPosCtrlValues(FALSE);
		TestRead := TRUE;
		
	ELSIF TestRead THEN
		IF Meth_ReadPosCtrlValues(TRUE) THEN
			TestRead := FALSE;
		END_IF	
		
	END_IF

	
	
//fnLogTransfer FUNCTION call
fnLogTransfer(ADR(LogMsg_0));
		

END_IF]]></ST>
    </Implementation>
    <Method Name="AddNCError" Id="{488d80fa-883c-426c-914b-bb08d3f436f8}">
      <Declaration><![CDATA[METHOD AddNCError : BOOL
VAR_INPUT
	ErrorId			: UDINT;
	ErrorPrefix     : STRING[100];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	tmp_ErrorEntry.ErrorId		:= ErrorId;

	tmp_ErrorEntry.ErrorText	:= ErrorPrefix;

	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, UDINT_TO_STRING(tmp_ErrorEntry.ErrorId));
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, 'Task: ');
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, rVelocityCtrl.Input.Parameter.ThreadName);	
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, FC_NcErrorMsg(tmp_ErrorEntry.ErrorId));	
	fnLogMsg(ADR(LogMsg_0),LOG_ERROR,tmp_ErrorEntry.ErrorText,0,0,0);	
	
	tmp_ErrorEntry.MotorEvents := CreateNCErrMsgDetails(tmp_ErrorEntry.ErrorId);
	
	rAxisBasicFB.AxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="METH_ChangeToVelMode" Id="{8d3c00e6-2673-423e-a136-0e9b875dc2a9}">
      <Declaration><![CDATA[METHOD METH_ChangeToVelMode : BOOL
VAR_INPUT
	Execute : BOOL;
END_VAR
VAR_INST
	DelayBeforeChangimeMode: TON;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF InitSctrlTrigger.EDGEPOS( Execute) THEN
	CngToVelocityState := 1;
	METH_ChangeToVelMode := FALSE;
	rAxisBasicFB.AxisCtrlPtr^.Input.Command.Power := FALSE;
	
	OldCyclicTorque := 0;		
	OldSctrlKp 		:= 0;
	OldSctrlKi 		:= 0;			
	rAxisBasicFB.Meth_WriteObj (FALSE, enumMotionobject.OPERATION_MODE,DINT_TO_LREAL(eDriveModeOfOperation.CyclicSyncVelocity));

END_IF

IF InitSctrlTrigger.EDGENEG( Execute) THEN
	CngToVelocityState := 0;
END_IF


CASE CngToVelocityState OF
	0:
		METH_ChangeToVelMode := FALSE;
		 
	1:
		DelayBeforeChangimeMode.IN := FALSE;
		IF ReadPosCtrlParamDone = FALSE THEN
			 Meth_ReadPosCtrlValues(FALSE);
			 CngToVelocityState := CngToVelocityState +1;	
		ELSE
			CngToVelocityState := CngToVelocityState +2;
		END_IF		
	2:
		IF Meth_ReadPosCtrlValues(TRUE) THEN
			
			rAxisBasicFB.Meth_WriteObj (FALSE, enumMotionobject.OPERATION_MODE,eDriveModeOfOperation.CyclicSyncVelocity);
			
			CngToVelocityState := CngToVelocityState +1;
			
		END_IF
	3:	//Change mode to velocity control
		IF rAxisBasicFB.Meth_WriteObj (TRUE, enumMotionobject.OPERATION_MODE,eDriveModeOfOperation.CyclicSyncVelocity) THEN			
			rAxisBasicFB.Meth_WriteObj (FALSE, enumMotionobject.OPERATION_MODE,eDriveModeOfOperation.CyclicSyncVelocity);
			CngToVelocityState := CngToVelocityState +1;
		END_IF
		
	4://Disable Gain Control
		IF NOT rAxisBasicFB.AxisCtrlPtr^.Output.Status.MC_Power.Status THEN
			IF rAxisBasicFB.Meth_WriteObj (TRUE, enumMotionobject.GAIN_SCHEDULE,0) THEN			
				rAxisBasicFB.Meth_WriteObj (FALSE, enumMotionobject.OPERATION_MODE,eDriveModeOfOperation.CyclicSyncVelocity);			
				CngToVelocityState := CngToVelocityState +1;
			END_IF
		END_IF	
	
	5:	
		DelayBeforeChangimeMode.IN := TRUE;
		DelayBeforeChangimeMode.PT := T#10S;
		IF DelayBeforeChangimeMode.Q THEN
			rAxisBasicFB.AxisCtrlPtr^.Input.Command.Power := TRUE;
			IF rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisStatus.StandStill THEN
				CngToVelocityState := CngToVelocityState +1;
			END_IF
		END_IF	
	6:
		IF  rAxisBasicFB.Meth_WriteObj(TRUE, enumMotionObject.ACC_CLOSE_POS_ERR ,   rVelocityCtrl.Input.Parameter.CyclicVelocity    , Error =>Error ) THEN
			rAxisBasicFB.Meth_WriteObj(FALSE, enumMotionObject.ACC_CLOSE_POS_ERR ,0 );
			CngToVelocityState := CngToVelocityState +1;
		END_IF	
	
	7:	
		METH_ChangeToVelMode := TRUE;
END_CASE

DelayBeforeChangimeMode();

	IF CngToVelocityState <> PrevCngToVelocityState THEN
		
		fnLogMsg(ADR(LogMsg_0),LOG_INFO,'CngToVelocityState CurSt=%d LstSt=%d',CngToVelocityState,PrevCngToVelocityState,0);
		PrevCngToVelocityState := CngToVelocityState ;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_ExitVelCtrl" Id="{146a8395-1da9-41a8-a600-93647740d164}">
      <Declaration><![CDATA[METHOD Meth_ExitVelCtrl : BOOL
VAR_INPUT
	Execute   : BOOL;
END_VAR

VAR_INST
	// Service Functions Variablea
	StopTrigger : Trigger ;
	ExitState  		 : SINT;
	PrevExitState   : SINT;
END_VAR

VAR_OUTPUT
	Error : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF StopTrigger.EDGEPOS(Execute) THEN
	ExitState  := 1;
	Meth_ExitVelCtrl := FALSE;
 	Meth_ReturnOrgPosCtrlValues(FALSE) ;
	Error := FALSE;
END_IF


IF StopTrigger.EDGENEG(Execute) THEN
	 PrevExitState := 0;
	 ExitState:= 0;
END_IF


CASE ExitState OF
	 		
	
	1:	 
		
//			
 //  	
		Delay(IN:=	FALSE);
		IF rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisStatus.StandStill = FALSE  AND rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisStatus.Disabled = FALSE THEN
		//	rAxisBasicFB.AxisCtrlPtr^.Input.Command.MoveVelocity := TRUE;	
		//	rAxisBasicFB.AxisCtrlPtr^.Input.Parameter.Velocity   := 100;
			rAxisBasicFB.AxisCtrlPtr^.Input.Command.Stop := TRUE;		
			ExitState := ExitState +1;
		ELSE
			ExitState := 3;
		END_IF	
					
   						
		
		
		
	2:
			IF (rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisStatus.StandStill OR rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisStatus.Disabled)				
			//IF rAxisBasicFB.AxisCtrlPtr^.Output.Status.MC_MoveVelocity.In_Velocity 
				 THEN
				Delay.PT := T#2S;
				Delay(IN:=	TRUE);
				IF Delay.Q THEN
					ExitState := ExitState +1;
				END_IF								
			END_IF

	
	3:
			rAxisBasicFB.AxisCtrlPtr^.Input.Command.Power := FALSE;

			ExitState := ExitState +1;

	4:
		IF rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisStatus.Disabled THEN
			IF ReadPosCtrlParamDone THEN
				IF  rAxisBasicFB.Meth_WriteObj(TRUE, enumMotionObject.ACC_CLOSE_POS_ERR ,  rVelocityCtrl.Output.monitor.OrgAccToCloseThePosError, Error =>Error ) THEN
					rAxisBasicFB.Meth_WriteObj(FALSE, enumMotionObject.ACC_CLOSE_POS_ERR ,0 );
					ExitState := ExitState +1;
				END_IF
			ELSE	
				ExitState := ExitState +1;
			END_IF
			
		END_IF	
	

	5:
		IF ReadPosCtrlParamDone THEN
			IF Meth_ReturnOrgPosCtrlValues(TRUE) THEN
				ExitState := ExitState +1;
			END_IF
		ELSE	
			ExitState := ExitState +1;
		END_IF
	
	
	6:		
		IF rAxisBasicFB.Meth_WriteObj (TRUE, enumMotionobject.OPERATION_MODE,TO_LREAL(eDriveModeOfOperation.CyclicSyncMode)) THEN
			rAxisBasicFB.Meth_WriteObj (FALSE, enumMotionobject.OPERATION_MODE,0);
			Delay.IN := FALSE;
			ExitState := ExitState +1;
		END_IF
	7:
			Delay.IN := TRUE;
			Delay.PT := T#2S;
			Delay();
			IF Delay.Q THEN
				ExitState := ExitState +1;
				Delay.IN := FALSE;
			END_IF

	8:
 		Meth_ExitVelCtrl := TRUE;
		

	

END_CASE

	IF ExitState <> PrevExitState THEN
		
		fnLogMsg(ADR(LogMsg_0),LOG_INFO,'Exit Vel Ctrl CurSt=%d LstSt=%d',ExitState,PrevExitState,0);
		PrevExitState := ExitState ;
	END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_InitSctrl" Id="{277293a0-46b0-40c8-8c25-a830667691a3}">
      <Declaration><![CDATA[METHOD Meth_InitSctrl : BOOL
VAR_INPUT
	Execute : BOOL;
END_VAR


VAR_OUTPUT
	Error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF InitSctrlTrigger.EDGEPOS(Execute) THEN
	InitSctrlState  := 1;
	Meth_InitSctrl := FALSE;
	rAxisBasicFB.Meth_InitVelKP (FALSE,0);
	rAxisBasicFB.Meth_InitVelKI(FALSE,0);
	Error := FALSE;
END_IF


IF InitSctrlTrigger.EDGENEG(Execute) THEN
	
	 InitSctrlState:= 0;
END_IF


CASE InitSctrlState OF
	 
		
	1:
		 			
			IF rAxisBasicFB.Meth_InitVelKP (TRUE,(rVelocityCtrl.Input.Parameter.SctrlKp), Error=>Error) THEN
				OldSctrlKp := rVelocityCtrl.Input.Parameter.SctrlKp;
				InitSctrlState := InitSctrlState +1;
				rAxisBasicFB.Meth_InitVelKP (FALSE,rVelocityCtrl.Input.Parameter.SctrlKp);
			END_IF	
  
			

	2:
	
		IF rAxisBasicFB.Meth_InitVelKI(TRUE,(rVelocityCtrl.Input.Parameter.SctrlKi), Error=>Error) THEN
			rAxisBasicFB.Meth_InitVelKP (FALSE,rVelocityCtrl.Input.Parameter.SctrlKi);
			OldSctrlKi := rVelocityCtrl.Input.Parameter.SctrlKi ;
			InitSctrlState := InitSctrlState +1;
		END_IF	

		IF Error THEN
		//	
		END_IF
		
	3:		
		rAxisBasicFB.Meth_WriteObj(FALSE,enumMotionObject.VEL_KI,0);
		rVelocityCtrl.Output.Status.SctrlInitialized := TRUE;
		Meth_InitSctrl := TRUE; 
	END_CASE	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_MoveVel" Id="{fa95af4a-6066-43df-ac87-41e58c9d8e8e}">
      <Declaration><![CDATA[METHOD Meth_MoveVel : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	rAxisBasicFB.AxisCtrlPtr^.Input.Parameter.Velocity 	   := rVelocityCtrl.Input.Parameter.CyclicVelocity;
	rAxisBasicFB.AxisCtrlPtr^.Input.Parameter.Acceleration := rVelocityCtrl.Input.Parameter.Acceleration;
	rAxisBasicFB.AxisCtrlPtr^.Input.Parameter.Deceleration := rVelocityCtrl.Input.Parameter.Deceleration;
	
	rAxisBasicFB.AxisCtrlPtr^.Input.Command.MoveVelocity := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_ReadPosCtrlValues" Id="{4522cc7f-b585-4b24-8d4a-c04a901aa0ce}">
      <Declaration><![CDATA[METHOD Meth_ReadPosCtrlValues : BOOL
VAR_INPUT
	Execute : BOOL;
END_VAR


VAR_INST
	// Service Functions Variablea
		 
	ReadOrginalValuesTrigger : Trigger ;
	ReadOrginalValuesState   : SINT;
END_VAR	

VAR_OUTPUT
	Error : BOOL;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ReadOrginalValuesTrigger.EDGEPOS(Execute) THEN
	ReadOrginalValuesState  := 1;
	Meth_ReadPosCtrlValues := FALSE;
	Error := FALSE;
	rAxisBasicFB.Meth_ReadObj(FALSE, enumMotionObject.MAX_TORQUE, Value =>rVelocityCtrl.Output.monitor.OrgMaxTorque, Error =>Error );
END_IF


IF ReadOrginalValuesTrigger.EDGENEG(Execute) THEN
	 rAxisBasicFB.Meth_ReadObj(FALSE, enumMotionObject.MAX_TORQUE, Value =>rVelocityCtrl.Output.monitor.OrgMaxTorque, Error =>Error );
	 ReadOrginalValuesState:= 0;
END_IF


CASE ReadOrginalValuesState OF
	 
		
	1:
		IF  rAxisBasicFB.Meth_ReadObj(TRUE, enumMotionObject.TORQUE_OFFSET, Value =>rVelocityCtrl.Output.monitor.OrgCyclicTorque, Error =>Error ) THEN
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'TORQUE_OFFSET org=%d',TO_DINT(rVelocityCtrl.Output.monitor.OrgCyclicTorque),0,0);
			rAxisBasicFB.Meth_ReadObj(FALSE, enumMotionObject.TORQUE_OFFSET  );
 			ReadOrginalValuesState := ReadOrginalValuesState +1;
			Error := FALSE;						
		END_IF
		IF Error THEN
			ReadOrginalValuesState := 33;
		END_IF
			
	2:
		IF  rAxisBasicFB.Meth_ReadObj(TRUE, enumMotionObject.VEL_KP, Value =>rVelocityCtrl.Output.monitor.OrgSctrlKp, Error =>Error ) THEN
			rVelocityCtrl.Output.monitor.OrgVelKp := rVelocityCtrl.Output.monitor.OrgSctrlKp;
			
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'VEL_KP org=%d',TO_DINT(rVelocityCtrl.Output.monitor.OrgSctrlKp),0,0);
			rAxisBasicFB.Meth_ReadObj(FALSE, enumMotionObject.TORQUE_OFFSET  );
 			ReadOrginalValuesState := ReadOrginalValuesState +1;
		END_IF
	3:
		IF  rAxisBasicFB.Meth_ReadObj(TRUE, enumMotionObject.VEL_KI, Value =>rVelocityCtrl.Output.monitor.OrgSctrlKi, Error =>Error ) THEN
			fnLogMsg(ADR(LogMsg_0),LOG_INFO,'VEL_KI org=%d',TO_DINT(rVelocityCtrl.Output.monitor.OrgSctrlKi),0,0);
			rAxisBasicFB.Meth_ReadObj(FALSE, enumMotionObject.TORQUE_OFFSET  );
 			ReadOrginalValuesState := ReadOrginalValuesState +1;
		END_IF
	
	4:
		IF rAxisBasicFB.Meth_ReadObj (TRUE, enumMotionobject.GAIN_SCHEDULE, Value =>rVelocityCtrl.Output.monitor.OrgGainCtrl, Error =>Error) THEN
				fnLogMsg(ADR(LogMsg_0),LOG_INFO,'GAIN_SCHEDULE org=%d',TO_DINT(rVelocityCtrl.Output.monitor.OrgGainCtrl),0,0);			
				rAxisBasicFB.Meth_ReadObj(FALSE, enumMotionObject.TORQUE_OFFSET  );
				ReadOrginalValuesState := ReadOrginalValuesState +1;						
		END_IF		
		
	5:
	

			IF rAxisBasicFB.Meth_ReadObj (TRUE, enumMotionobject.ACC_CLOSE_POS_ERR, Value =>rVelocityCtrl.Output.monitor.OrgAccToCloseThePosError, Error =>Error) THEN
				fnLogMsg(ADR(LogMsg_0),LOG_INFO,'ACC_CLOSE_POS_ERR org=%d',TO_DINT(rVelocityCtrl.Output.monitor.OrgAccToCloseThePosError),0,0);			
				rAxisBasicFB.Meth_ReadObj(FALSE, enumMotionObject.TORQUE_OFFSET  );
				ReadOrginalValuesState := ReadOrginalValuesState +1;						
			END_IF		

	7:		
		ReadPosCtrlParamDone := TRUE;
		Meth_ReadPosCtrlValues := TRUE; 
	END_CASE	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_ReturnOrgPosCtrlValues" Id="{3131fbc1-9b26-46ab-a59b-b748e02e062b}">
      <Declaration><![CDATA[METHOD Meth_ReturnOrgPosCtrlValues : BOOL
VAR_INPUT
	Execute : BOOL;
END_VAR


VAR_INST
	// Service Functions Variablea
	ReturnOrginalTrigger : Trigger ;
	ReturnOrginalState   : SINT;
END_VAR	

VAR_OUTPUT
	Error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ReturnOrginalTrigger.EDGEPOS(Execute) THEN
	ReturnOrginalState  := 1;
	Meth_ReturnOrgPosCtrlValues := FALSE;
	Error := FALSE;
	rAxisBasicFB.Meth_WriteObj(FALSE, enumMotionObject.MAX_TORQUE, rVelocityCtrl.Output.monitor.OrgMaxTorque, Error =>Error );
	fnLogMsg(ADR(LogMsg_0),LOG_INFO,'VelCtrl Start Return Org Values',0,0,0);
END_IF


IF ReturnOrginalTrigger.EDGENEG(Execute) THEN
	 rAxisBasicFB.Meth_WriteObj(FALSE, enumMotionObject.MAX_TORQUE,  rVelocityCtrl.Output.monitor.OrgMaxTorque, Error =>Error );
	 ReturnOrginalState:= 0;
END_IF


CASE ReturnOrginalState OF
	 
		
	1:	
		IF  rAxisBasicFB.Meth_WriteObj(TRUE, enumMotionObject.GAIN_SCHEDULE,  rVelocityCtrl.Output.monitor.OrgGainCtrl, Error =>Error ) THEN
			rAxisBasicFB.Meth_WriteObj(FALSE, enumMotionObject.GAIN_SCHEDULE ,0 );
 			ReturnOrginalState := ReturnOrginalState +1;
		END_IF		
			
	2:
		IF  rAxisBasicFB.Meth_WriteObj(TRUE, enumMotionObject.VEL_KP,  rVelocityCtrl.Output.monitor.OrgSctrlKp, Error =>Error ) THEN
			rAxisBasicFB.Meth_WriteObj(FALSE,enumMotionObject.VEL_KP,0  );
 			ReturnOrginalState := ReturnOrginalState +1;
		END_IF
	3:
		IF  rAxisBasicFB.Meth_WriteObj(TRUE, enumMotionObject.VEL_KI,  rVelocityCtrl.Output.monitor.OrgSctrlKi, Error =>Error ) THEN
			rAxisBasicFB.Meth_WriteObj(FALSE, enumMotionObject.VEL_KP ,0 );
 			ReturnOrginalState := ReturnOrginalState +1;
		END_IF
	
	4:
		IF  rAxisBasicFB.Meth_WriteObj(TRUE, enumMotionObject.TORQUE_OFFSET, rVelocityCtrl.Output.monitor.OrgCyclicTorque , Error =>Error ) THEN
			rAxisBasicFB.Meth_WriteObj(FALSE, enumMotionObject.VEL_KP ,0 );
 			ReturnOrginalState := ReturnOrginalState +1;
		END_IF
		
	5:
	
	        IF rAxisBasicFB.Meth_WriteObj(TRUE, enumMotionObject.MAX_TORQUE,rVelocityCtrl.Output.monitor.OrgMaxTorque   , Error =>Error ) THEN	
				rAxisBasicFB.Meth_WriteObj(FALSE, enumMotionObject.VEL_KP ,0 );									
				rAxisBasicFB.Meth_WriteObj(FALSE, enumMotionObject.VEL_KP ,0 );
				ReturnOrginalState := ReturnOrginalState +1;					
			END_IF	
	
	6:			
		fnLogMsg(ADR(LogMsg_0),LOG_INFO,'VelCtrl Return Org Values Done',0,0,0);
		Meth_ReturnOrgPosCtrlValues := TRUE; 
	END_CASE	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_Stop" Id="{98e371b4-4151-4e06-920d-8aeecd31293a}">
      <Declaration><![CDATA[METHOD Meth_Stop : BOOL
VAR_INPUT
	Execute   : BOOL;
END_VAR

VAR_INST
	// Service Functions Variablea
	StopTrigger : Trigger ;
	StopState   : SINT;
	
END_VAR

VAR_OUTPUT
	Error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF StopTrigger.EDGEPOS(Execute) THEN
	StopState  := 1;
	Meth_Stop := FALSE;
 	Meth_ReturnOrgPosCtrlValues(FALSE) ;
	Error := FALSE;
END_IF


IF StopTrigger.EDGENEG(Execute) THEN
	
	 StopState:= 0;
END_IF


CASE StopState OF
 		
	
	1:	 
		
		rAxisBasicFB.AxisCtrlPtr^.Input.Command.Stop := TRUE;			
   		StopState := StopState +1;				
		Delay(IN:=	FALSE);
		
	2:
			IF rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisStatus.StandStill OR rAxisBasicFB.AxisCtrlPtr^.Output.Status.AxisStatus.Disabled THEN
				StopState := StopState +1;								
			END_IF

	


	3:
 		Meth_Stop := TRUE;
		

	

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetAll_MC_FB" Id="{64befd56-77af-467d-b520-45554e5bcca0}">
      <Declaration><![CDATA[METHOD PRIVATE ResetAll_MC_FB : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
		ResetAll_MC_FB := FALSE ;
				

		{warning disable C0371}
		//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>

		{warning restore C0371}
		
		
		memset(ADR(rVelocityCtrl.Input.Command) ,0 ,SIZEOF(rVelocityCtrl.Input.Command));
		memset(ADR(rVelocityCtrl.Output.Status) ,0 ,SIZEOF(rVelocityCtrl.Output.Status));
		
		ResetAll_MC_FB := TRUE ;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="VelocityCtrlAxis_FB">
      <LineId Id="865" Count="0" />
      <LineId Id="867" Count="7" />
      <LineId Id="866" Count="0" />
      <LineId Id="1003" Count="0" />
      <LineId Id="956" Count="1" />
      <LineId Id="548" Count="3" />
      <LineId Id="723" Count="0" />
      <LineId Id="719" Count="2" />
      <LineId Id="718" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="564" Count="4" />
      <LineId Id="575" Count="3" />
      <LineId Id="2380" Count="0" />
      <LineId Id="768" Count="0" />
      <LineId Id="2399" Count="0" />
      <LineId Id="2406" Count="1" />
      <LineId Id="2396" Count="0" />
      <LineId Id="2394" Count="0" />
      <LineId Id="2548" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="2384" Count="1" />
      <LineId Id="2940" Count="1" />
      <LineId Id="2943" Count="0" />
      <LineId Id="2942" Count="0" />
      <LineId Id="1006" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="2426" Count="0" />
      <LineId Id="2417" Count="0" />
      <LineId Id="2427" Count="2" />
      <LineId Id="2418" Count="0" />
      <LineId Id="2431" Count="2" />
      <LineId Id="2430" Count="0" />
      <LineId Id="2420" Count="0" />
      <LineId Id="2423" Count="0" />
      <LineId Id="2421" Count="0" />
      <LineId Id="2419" Count="0" />
      <LineId Id="2425" Count="0" />
      <LineId Id="2424" Count="0" />
      <LineId Id="2422" Count="0" />
      <LineId Id="2377" Count="0" />
      <LineId Id="2376" Count="0" />
      <LineId Id="2379" Count="0" />
      <LineId Id="583" Count="2" />
      <LineId Id="812" Count="1" />
      <LineId Id="587" Count="1" />
      <LineId Id="879" Count="0" />
      <LineId Id="589" Count="1" />
      <LineId Id="1457" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="878" Count="0" />
      <LineId Id="875" Count="0" />
      <LineId Id="1053" Count="0" />
      <LineId Id="1050" Count="0" />
      <LineId Id="1989" Count="7" />
      <LineId Id="1054" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="885" Count="0" />
      <LineId Id="893" Count="0" />
      <LineId Id="886" Count="0" />
      <LineId Id="888" Count="0" />
      <LineId Id="1488" Count="0" />
      <LineId Id="1651" Count="2" />
      <LineId Id="1906" Count="0" />
      <LineId Id="1654" Count="0" />
      <LineId Id="2703" Count="0" />
      <LineId Id="1655" Count="2" />
      <LineId Id="895" Count="0" />
      <LineId Id="1914" Count="0" />
      <LineId Id="882" Count="0" />
      <LineId Id="897" Count="0" />
      <LineId Id="1324" Count="0" />
      <LineId Id="815" Count="0" />
      <LineId Id="819" Count="0" />
      <LineId Id="816" Count="0" />
      <LineId Id="820" Count="0" />
      <LineId Id="1495" Count="0" />
      <LineId Id="2389" Count="0" />
      <LineId Id="1498" Count="0" />
      <LineId Id="1497" Count="0" />
      <LineId Id="1496" Count="0" />
      <LineId Id="1096" Count="0" />
      <LineId Id="1293" Count="0" />
      <LineId Id="1302" Count="1" />
      <LineId Id="1301" Count="0" />
      <LineId Id="1292" Count="0" />
      <LineId Id="1094" Count="0" />
      <LineId Id="2148" Count="1" />
      <LineId Id="1097" Count="0" />
      <LineId Id="1073" Count="0" />
      <LineId Id="2150" Count="0" />
      <LineId Id="2152" Count="1" />
      <LineId Id="2151" Count="0" />
      <LineId Id="1101" Count="0" />
      <LineId Id="1103" Count="0" />
      <LineId Id="1102" Count="0" />
      <LineId Id="1828" Count="1" />
      <LineId Id="1908" Count="0" />
      <LineId Id="1830" Count="4" />
      <LineId Id="1827" Count="0" />
      <LineId Id="1493" Count="0" />
      <LineId Id="1106" Count="0" />
      <LineId Id="1105" Count="0" />
      <LineId Id="1821" Count="0" />
      <LineId Id="1818" Count="1" />
      <LineId Id="1064" Count="2" />
      <LineId Id="1307" Count="0" />
      <LineId Id="1313" Count="0" />
      <LineId Id="1309" Count="1" />
      <LineId Id="1312" Count="0" />
      <LineId Id="1067" Count="0" />
      <LineId Id="1315" Count="0" />
      <LineId Id="1068" Count="2" />
      <LineId Id="1392" Count="0" />
      <LineId Id="1229" Count="0" />
      <LineId Id="1071" Count="0" />
      <LineId Id="1454" Count="0" />
      <LineId Id="1316" Count="0" />
      <LineId Id="1081" Count="0" />
      <LineId Id="1317" Count="0" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1909" Count="0" />
      <LineId Id="1093" Count="0" />
      <LineId Id="1086" Count="0" />
      <LineId Id="1072" Count="0" />
      <LineId Id="1386" Count="1" />
      <LineId Id="2073" Count="0" />
      <LineId Id="2075" Count="1" />
      <LineId Id="1318" Count="0" />
      <LineId Id="1491" Count="0" />
      <LineId Id="1490" Count="0" />
      <LineId Id="1492" Count="0" />
      <LineId Id="1015" Count="0" />
      <LineId Id="2509" Count="1" />
      <LineId Id="2512" Count="0" />
      <LineId Id="2518" Count="0" />
      <LineId Id="2624" Count="2" />
      <LineId Id="2622" Count="1" />
      <LineId Id="2545" Count="0" />
      <LineId Id="2519" Count="17" />
      <LineId Id="2538" Count="1" />
      <LineId Id="2542" Count="1" />
      <LineId Id="2547" Count="0" />
      <LineId Id="2546" Count="0" />
      <LineId Id="2544" Count="0" />
      <LineId Id="2511" Count="0" />
      <LineId Id="1016" Count="0" />
      <LineId Id="1060" Count="0" />
      <LineId Id="1017" Count="0" />
      <LineId Id="1057" Count="1" />
      <LineId Id="1079" Count="0" />
      <LineId Id="1061" Count="2" />
      <LineId Id="1023" Count="0" />
      <LineId Id="1389" Count="0" />
      <LineId Id="1074" Count="1" />
      <LineId Id="2702" Count="0" />
      <LineId Id="2629" Count="1" />
      <LineId Id="1091" Count="0" />
      <LineId Id="1658" Count="0" />
      <LineId Id="1089" Count="0" />
      <LineId Id="1910" Count="0" />
      <LineId Id="1090" Count="0" />
      <LineId Id="1087" Count="0" />
      <LineId Id="1077" Count="1" />
      <LineId Id="2775" Count="0" />
      <LineId Id="1092" Count="0" />
      <LineId Id="1915" Count="0" />
      <LineId Id="1911" Count="0" />
      <LineId Id="1084" Count="0" />
      <LineId Id="1917" Count="0" />
      <LineId Id="1085" Count="0" />
      <LineId Id="1076" Count="0" />
      <LineId Id="903" Count="0" />
      <LineId Id="817" Count="0" />
      <LineId Id="1319" Count="0" />
      <LineId Id="2628" Count="0" />
      <LineId Id="2416" Count="0" />
      <LineId Id="1321" Count="0" />
      <LineId Id="1320" Count="0" />
      <LineId Id="2939" Count="0" />
      <LineId Id="2386" Count="0" />
      <LineId Id="1055" Count="0" />
      <LineId Id="2434" Count="0" />
      <LineId Id="1494" Count="0" />
      <LineId Id="2435" Count="0" />
      <LineId Id="2387" Count="1" />
      <LineId Id="1738" Count="0" />
      <LineId Id="1742" Count="0" />
      <LineId Id="1739" Count="0" />
      <LineId Id="1737" Count="0" />
      <LineId Id="1743" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="2436" Count="0" />
      <LineId Id="1579" Count="0" />
      <LineId Id="2437" Count="0" />
      <LineId Id="1576" Count="1" />
      <LineId Id="624" Count="1" />
      <LineId Id="644" Count="3" />
      <LineId Id="2302" Count="1" />
      <LineId Id="2298" Count="0" />
      <LineId Id="661" Count="5" />
      <LineId Id="1009" Count="0" />
      <LineId Id="1011" Count="3" />
      <LineId Id="1010" Count="0" />
      <LineId Id="2849" Count="0" />
      <LineId Id="2859" Count="1" />
      <LineId Id="2864" Count="1" />
      <LineId Id="2861" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="2857" Count="1" />
      <LineId Id="2855" Count="0" />
      <LineId Id="2867" Count="0" />
      <LineId Id="2856" Count="0" />
      <LineId Id="2850" Count="2" />
      <LineId Id="668" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="2848" Count="0" />
      <LineId Id="2847" Count="0" />
    </LineIds>
    <LineIds Name="VelocityCtrlAxis_FB.AddNCError">
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="16" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="VelocityCtrlAxis_FB.METH_ChangeToVelMode">
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="90" Count="3" />
      <LineId Id="89" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="12" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="61" Count="4" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="123" Count="2" />
      <LineId Id="79" Count="0" />
      <LineId Id="82" Count="2" />
      <LineId Id="126" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="99" Count="2" />
      <LineId Id="98" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="107" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="109" Count="3" />
      <LineId Id="106" Count="0" />
    </LineIds>
    <LineIds Name="VelocityCtrlAxis_FB.Meth_ExitVelCtrl">
      <LineId Id="7" Count="3" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="11" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="214" Count="1" />
      <LineId Id="330" Count="0" />
      <LineId Id="216" Count="1" />
      <LineId Id="336" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="338" Count="2" />
      <LineId Id="337" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="328" Count="1" />
      <LineId Id="218" Count="2" />
      <LineId Id="335" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="286" Count="2" />
      <LineId Id="221" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="222" Count="9" />
      <LineId Id="258" Count="0" />
      <LineId Id="232" Count="3" />
      <LineId Id="261" Count="1" />
      <LineId Id="259" Count="1" />
      <LineId Id="212" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="254" Count="1" />
      <LineId Id="252" Count="0" />
      <LineId Id="256" Count="1" />
      <LineId Id="253" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="263" Count="1" />
      <LineId Id="269" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="306" Count="4" />
      <LineId Id="305" Count="0" />
    </LineIds>
    <LineIds Name="VelocityCtrlAxis_FB.Meth_InitSctrl">
      <LineId Id="11" Count="19" />
      <LineId Id="32" Count="2" />
      <LineId Id="75" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="38" Count="4" />
      <LineId Id="44" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="50" Count="5" />
      <LineId Id="85" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="0" />
    </LineIds>
    <LineIds Name="VelocityCtrlAxis_FB.Meth_MoveVel">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="VelocityCtrlAxis_FB.Meth_ReadPosCtrlValues">
      <LineId Id="11" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="17" Count="12" />
      <LineId Id="38" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="103" Count="2" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="54" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="80" Count="1" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="163" Count="4" />
      <LineId Id="113" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="0" />
    </LineIds>
    <LineIds Name="VelocityCtrlAxis_FB.Meth_ReturnOrgPosCtrlValues">
      <LineId Id="11" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="17" Count="11" />
      <LineId Id="103" Count="0" />
      <LineId Id="113" Count="2" />
      <LineId Id="111" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="76" Count="2" />
      <LineId Id="54" Count="1" />
      <LineId Id="82" Count="2" />
      <LineId Id="80" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="116" Count="2" />
      <LineId Id="100" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="0" />
    </LineIds>
    <LineIds Name="VelocityCtrlAxis_FB.Meth_Stop">
      <LineId Id="7" Count="3" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="11" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="214" Count="1" />
      <LineId Id="250" Count="0" />
      <LineId Id="216" Count="8" />
      <LineId Id="81" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="VelocityCtrlAxis_FB.ResetAll_MC_FB">
      <LineId Id="3" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="CyclicAxis_FB" Id="{afe2ca26-421a-0f44-26c6-f7c996f76f89}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC CyclicAxis_FB
VAR_INPUT
	
	BasicAxisCtrlPtr 	: POINTER TO Basic_axis_typ ;
	CyclicAxisCtrlPtr 	: POINTER TO CyclicAxis_typ ;
	
END_VAR
VAR_IN_OUT
	
	AxisRef		: 	AXIS_REF;
END_VAR
VAR_OUTPUT
END_VAR
	
VAR
	LogMsgInit		: BOOL;
	LogMsg_0 		: LogMsg ;
	
//	GetCycleTime:	FB_CTRL_GET_TASK_CYCLETIME;
//	CycleTime:		TIME;
//	CycleTimeInit:	BOOL;
	
	
	fbGetCurTaskIdx: 		GETCURTASKINDEX;
    TaskCycleTimeUDINT: 	UDINT;
    TaskCycleTime: 			TIME;

	
	
	DisableTriger	: Trigger ;
	Disable			: BOOL ;
	
	fbMC_PositionCorrectionLimiter:	MC_PositionCorrectionLimiter;
		
	fbMC_ExtSetPointGenEnable:		MC_ExtSetPointGenEnable;	
	fbMC_ExtSetPointGenDisable:		MC_ExtSetPointGenDisable;
	
	
	ErrorTrig : Trigger ;
	AxisStep : eCyclicAxisState ;
	
	tmp_ErrorEntry			: Eh_ErrorEntry_typ;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT LogMsgInit THEN
	LogMsgInit	:= TRUE;
	LogMsg_0.logData.category	:= BasicAxisCtrlPtr^.Input.Parameter.ThreadName;
	LogMsg_0.ptrGlobalArray		:= ADR(LogGlobalArray);
	LogMsg_0.ptrEncoderAngle	:= ADR(BasicAxisCtrlPtr^.Input.Parameter.PosForLog);
	LogMsg_0.Enable				:= TRUE;
END_IF

IF (TaskCycleTimeUDINT = 0) THEN
	fbGetCurTaskIdx();
	TaskCycleTimeUDINT	:= _TaskInfo[fbGetCurTaskIdx.index].CycleTime;
	TaskCycleTime		:= UDINT_TO_TIME(TaskCycleTimeUDINT/10000);
END_IF

IF BasicAxisCtrlPtr^.Output.Status.FAULT THEN
	THIS^.ResetAll_MC_FB();
	AxisStep	:= CyclicAxis_STATE_ERROR;
END_IF

//In case of Stop go to STATE_DISABLE
IF (AxisStep = CyclicAxis_STATE_POS_ACTIVE OR AxisStep = CyclicAxis_STATE_VEL_ACTIVE)
	AND (BasicAxisCtrlPtr^.Input.Command.Stop = TRUE) OR (BasicAxisCtrlPtr^.Input.Command.Halt = TRUE) THEN
	AxisStep := CyclicAxis_STATE_DISABLE;
END_IF

CASE AxisStep OF
	(******************** WAIT *************************)
	CyclicAxis_STATE_WAIT: (* STATE: Wait *)
		IF BasicAxisCtrlPtr^.Output.Status.ReadyForCmd THEN
			AxisStep	:= CyclicAxis_STATE_READY;
		END_IF
		
		THIS^.ResetAll_MC_FB();
		
	(******************** READY *************************)
	CyclicAxis_STATE_READY:
		IF CyclicAxisCtrlPtr^.Input.Command.CyclicPos.Start THEN
			CyclicAxisCtrlPtr^.Input.Command.CyclicPos.Start	:= FALSE ;
			AxisStep	:= CyclicAxis_STATE_POS_ACTIVE;
		ELSIF CyclicAxisCtrlPtr^.Input.Command.CyclicVel.Start THEN
			CyclicAxisCtrlPtr^.Input.Command.CyclicVel.Start	:= FALSE;
			AxisStep	:= CyclicAxis_STATE_VEL_ACTIVE;
		END_IF
		
	(******************** Cyclic Pos Active **********************)
	CyclicAxis_STATE_POS_ACTIVE:
		IF CyclicAxisCtrlPtr^.Input.Command.CyclicPos.Disable  THEN
			CyclicAxisCtrlPtr^.Input.Command.CyclicPos.Disable	:= FALSE;
			AxisStep	:= CyclicAxis_STATE_DISABLE;
		ELSE
			CyclicPos();
			//CyclicPosTest();
		END_IF
		
	(******************** Cyclic Vel Active **********************)
	CyclicAxis_STATE_VEL_ACTIVE:
		IF CyclicAxisCtrlPtr^.Input.Command.CyclicVel.Disable  THEN
			CyclicAxisCtrlPtr^.Input.Command.CyclicVel.Disable	:= FALSE;
			AxisStep	:= CyclicAxis_STATE_DISABLE;
		ELSE
			CyclicVel();
		END_IF
		
	(******************** Cyclic Pos Disable  **********************)
	CyclicAxis_STATE_DISABLE:
		
		IF THIS^.CyclicDisable() THEN
			AxisStep	:= CyclicAxis_STATE_READY;
		END_IF
		
	(******************** Error **********************)
	CyclicAxis_STATE_ERROR:
		THIS^.ResetAll_MC_FB();
		IF BasicAxisCtrlPtr^.Output.Status.FAULT THEN
			AxisStep	:= CyclicAxis_STATE_ERROR;
		ELSE
			CyclicAxisCtrlPtr^.Output.Error.ErrorID	:= 0;
			AxisStep	:= CyclicAxis_STATE_WAIT;
		END_IF
		
END_CASE

CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Busy	:= fbMC_ExtSetPointGenEnable.Busy OR fbMC_ExtSetPointGenDisable.Busy;

IF DisableTriger.EDGEPOS(BasicAxisCtrlPtr^.Output.Status.AxisStatus.Error)THEN
	Disable	:= TRUE ;
END_IF
IF Disable THEN
	IF THIS^.CyclicDisable() THEN
		Disable	:= FALSE ;
	END_IF
END_IF

//=====================================================================================================================\\

//fnLogTransfer FUNCTION call
fnLogTransfer(ADR(LogMsg_0));
]]></ST>
    </Implementation>
    <Method Name="AddNCError" Id="{52191c00-c2a1-0b1c-1057-667744f31151}">
      <Declaration><![CDATA[METHOD AddNCError : BOOL
VAR_INPUT
	ErrorId			: UDINT;
	ErrorPrefix     : STRING[100];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	tmp_ErrorEntry.ErrorId		:= ErrorId;

	tmp_ErrorEntry.ErrorText	:= ErrorPrefix;

	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, UDINT_TO_STRING(tmp_ErrorEntry.ErrorId));
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, 'Task: ');
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, CyclicAxisCtrlPtr^.Input.Parameter.ThreadName);	
	tmp_ErrorEntry.ErrorText	:= CONCAT(tmp_ErrorEntry.ErrorText, FC_NcErrorMsg(tmp_ErrorEntry.ErrorId));	
	fnLogMsg(ADR(LogMsg_0),LOG_ERROR,tmp_ErrorEntry.ErrorText,0,0,0);	
	
	tmp_ErrorEntry.MotorEvents := CreateNCErrMsgDetails(tmp_ErrorEntry.ErrorId);
	
	BasicAxisCtrlPtr^.Output.Error.fbErrorHandler.ErrorPush(tmp_ErrorEntry);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicDisable" Id="{e0e2b8ab-1987-045a-2b53-88e8577cda36}">
      <Declaration><![CDATA[METHOD PRIVATE CyclicDisable : BOOL
VAR_INPUT
END_VAR
VAR_INST
	IntErrorTrig_0:	Trigger;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CyclicDisable	:= FALSE ;
fbMC_ExtSetPointGenDisable.Execute	:= TRUE;
fbMC_ExtSetPointGenEnable.Execute	:= FALSE;
CyclicAxisCtrlPtr^.Input.Command.CyclicPos.Disable	:= FALSE;
CyclicAxisCtrlPtr^.Input.Command.CyclicVel.Disable	:= FALSE;

(* check if error occured *)
IF IntErrorTrig_0.EDGEPOS(fbMC_ExtSetPointGenDisable.Error = TRUE) THEN
	// Add FB Error to ErrorHandler
	AddNCError(fbMC_ExtSetPointGenDisable.ErrorID,'NC Error fbMC_ExtSetPointGenDisable ErrorID:');
	//Log
	fbMC_ExtSetPointGenDisable.Execute 	:= FALSE;
	CyclicDisable	:= FALSE ;
	AxisStep		:= CyclicAxis_STATE_ERROR;
END_IF
IF (CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Active = TRUE) THEN
	CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Busy	:= fbMC_ExtSetPointGenDisable.Busy;
ELSIF(CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Active = TRUE) THEN
	CyclicAxisCtrlPtr^.Output.Status.CyclicVel.Busy	:= fbMC_ExtSetPointGenDisable.Busy;
END_IF

IF (fbMC_ExtSetPointGenDisable.Done
	AND fbMC_ExtSetPointGenDisable.Enabled = FALSE) THEN
	CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Active	:= FALSE;
	CyclicAxisCtrlPtr^.Output.Status.CyclicVel.Active	:= FALSE;
	CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Busy	:= FALSE;
	CyclicAxisCtrlPtr^.Output.Status.CyclicVel.Busy	:= FALSE;
	fbMC_ExtSetPointGenDisable.Execute 	:= FALSE;
	CyclicDisable	:= TRUE;
END_IF
{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_ExtSetPointGenDisable(Axis:= AxisRef);
fbMC_ExtSetPointGenEnable(Axis:= AxisRef);
{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicPos" Id="{8c33d865-5261-0636-3b29-04b9f6ffe450}">
      <Declaration><![CDATA[METHOD PRIVATE CyclicPos : BOOL
VAR_INPUT
END_VAR

VAR

END_VAR

VAR_INST
	IntErrorTrig_0 : Trigger ;
	
	fbReadParam_SWLimitPos:	MC_ReadParameter;
	fbReadParam_SWLimitNeg:	MC_ReadParameter;
	
	fbSramp_PosGen:		SrampHp;
	State:			INT;
	InitCompleted:	BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	
	IF fbMC_ExtSetPointGenEnable.Enabled = FALSE
		AND InitCompleted THEN
		InitCompleted	:= FALSE;
		State			:= 0;
	END_IF
	
	CASE State OF
		0: // Init
			// Initialize Velocity Generator, fbSramp
			fbSramp_PosGen.VD_MAX	:= CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.Velocity * (-1);
			fbSramp_PosGen.VU_MAX	:= CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.Velocity;
			fbSramp_PosGen.A_DN		:= CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.MaxDcc * (-1);
			fbSramp_PosGen.A_UP		:= CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.MaxAcc;
			
			//************************************************
			// Read Axis Positive SW Limit Parameter
			fbReadParam_SWLimitPos.ReadMode	:= READMODE_ONCE;
			IF NOT fbReadParam_SWLimitPos.Valid THEN
				fbReadParam_SWLimitPos.Enable	:= TRUE;
			END_IF
			fbReadParam_SWLimitPos.ParameterNumber	:= SWLimitPos;
			{warning disable C0371}
			//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
			fbReadParam_SWLimitPos(Axis:=AxisRef);
			{warning restore C0371}
			IF fbReadParam_SWLimitPos.Valid THEN
				fbSramp_PosGen.LIMIT_HIGH	:= fbReadParam_SWLimitPos.Value;
			END_IF
			//**************************************************
			// Read Axis Negative SW Limit Parameter
			fbReadParam_SWLimitNeg.ReadMode		:= READMODE_ONCE;
			IF NOT fbReadParam_SWLimitNeg.Valid THEN
				fbReadParam_SWLimitNeg.Enable	:= TRUE;
			END_IF
			fbReadParam_SWLimitNeg.ParameterNumber	:= SWLimitNeg;
			{warning disable C0371}
			//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
			fbReadParam_SWLimitNeg(Axis	:= AxisRef);
			{warning restore C0371}
			IF fbReadParam_SWLimitNeg.Valid THEN
				fbSramp_PosGen.LIMIT_LOW	:= fbReadParam_SWLimitNeg.Value;
			END_IF
			
			// Initialize Position to Actual Position
			fbSramp_PosGen.X	:= BasicAxisCtrlPtr^.Output.monitor.ActPosition;
			fbSramp_PosGen.SET	:= TRUE;
			fbSramp_PosGen();
			
			IF fbReadParam_SWLimitNeg.Valid
				AND fbReadParam_SWLimitPos.Valid THEN
				fbSramp_PosGen.SET	:= FALSE;
				
				{warning disable C0371}
				//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
				AxisRef.PlcToNc.ExtSetDirection	:= 1;
				AxisRef.PlcToNc.ExtSetPos		:= fbSramp_PosGen.Y;
				{warning restore C0371}
	
				// Enable External Set Position
				fbMC_ExtSetPointGenEnable.Execute	:= TRUE;
				
				State	:= 10;
			END_IF
			
			
		10: // Wait External Set Position Enabled
			fbSramp_PosGen();
		 	IF fbMC_ExtSetPointGenEnable.Enabled THEN
				InitCompleted	:= TRUE;
				CyclicPos		:= TRUE;
				State	:= 20;
			ELSIF fbMC_ExtSetPointGenEnable.Execute = FALSE THEN
				InitCompleted	:= FALSE;
				CyclicPos		:= FALSE;
				State	:= 0; // Init	
			END_IF
			
		20: // Cyclic Position Active
			
			// Copy Velocity Generator parameters, fbSramp
			fbSramp_PosGen.VD_MAX	:= CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.Velocity * (-1);
			fbSramp_PosGen.VU_MAX	:= CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.Velocity;
			fbSramp_PosGen.A_DN		:= CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.MaxDcc * (-1);
			fbSramp_PosGen.A_UP		:= CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.MaxAcc;
			
			// Call Position Generator with new set point, SRAMP
			fbSramp_PosGen.X	:= LREAL_TO_REAL(CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.SetPos);
			fbSramp_PosGen();
			
			// Copy Integrator Output to ExtSetPos
			{warning disable C0371}
			//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
			AxisRef.PlcToNc.ExtSetDirection	:= 1;
			AxisRef.PlcToNc.ExtSetPos		:= fbSramp_PosGen.Y;
			{warning restore C0371}
			
	END_CASE
	
	// Call External Set Position function block
	{warning disable C0371}
	//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
	fbMC_ExtSetPointGenEnable(Axis:= AxisRef); 
	{warning restore C0371}
	
	(* check if error occured *)
	IF IntErrorTrig_0.EDGEPOS(fbMC_ExtSetPointGenEnable.Error = TRUE) THEN
		// Add FB Error to ErrorHandler
		AddNCError(fbMC_ExtSetPointGenEnable.ErrorID, 'NC Error fbMC_ExtSetPointGenEnable ErrorID:');
		
		fbMC_ExtSetPointGenEnable.Execute	:= FALSE;
		CyclicPos	:= FALSE;
		AxisStep	:= CyclicAxis_STATE_ERROR;
	END_IF


	CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Active	:= fbMC_ExtSetPointGenEnable.Enabled;
	CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Busy		:= fbMC_ExtSetPointGenEnable.Busy;
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicPosTest" Id="{b66e407b-6a1f-0b06-0c90-0334b0851f2e}">
      <Declaration><![CDATA[METHOD CyclicPosTest : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CyclicPosTest := FALSE ;


fbMC_PositionCorrectionLimiter.PositionCorrectionValue:= 	CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.SetPos; 
fbMC_PositionCorrectionLimiter.Acceleration:= 				CyclicAxisCtrlPtr^.Input.Parameter.CyclicPos.MaxAcc;
fbMC_PositionCorrectionLimiter.CorrectionMode:= 			POSITIONCORRECTION_MODE_FAST;
fbMC_PositionCorrectionLimiter.CorrectionLength:=			360000;
{warning disable C0371}
//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
fbMC_PositionCorrectionLimiter(Axis := AxisRef);
{warning restore C0371}




(* check if error occured *)
IF errorTrig.EDGEPOS(fbMC_PositionCorrectionLimiter.Error) THEN
	
	// Add FB Error to ErrorHandler
	AddNCError(fbMC_PositionCorrectionLimiter.ErrorID,'NC Error fbMC_PositionCorrectionLimiter ErrorID:');	
	CyclicPosTest :=  FALSE ;
	fbMC_PositionCorrectionLimiter.Enable:= FALSE;
END_IF


CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Busy:= 	fbMC_PositionCorrectionLimiter.Busy ;
CyclicAxisCtrlPtr^.Output.Status.CyclicPos.Active:= fbMC_PositionCorrectionLimiter.Limiting;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicVel" Id="{f34cbc11-9420-0023-0ba1-9a302a0598fa}">
      <Declaration><![CDATA[METHOD PRIVATE CyclicVel : BOOL
VAR_INPUT
END_VAR

VAR

END_VAR

VAR_INST
	IntErrorTrig_0:				Trigger;
	
	fbVelocityIntegrator:		FB_CTRL_I;
	VelocityIntegratorParams:	ST_CTRL_I_PARAMS;
	
	fbReadParam_SWLimitPos:		MC_ReadParameter;
	fbReadParam_SWLimitNeg:		MC_ReadParameter;
	
	fbSrampVelocityProfile:		SrampHp;
	State:			INT;
	InitCompleted:	BOOL;
	
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	
	IF fbMC_ExtSetPointGenEnable.Enabled = FALSE
		AND InitCompleted THEN
		InitCompleted	:= FALSE;
		State			:= 0;
		
	END_IF
	
	CASE State OF
		0: // Init
			fbVelocityIntegrator.bSync		:= FALSE;
			fbVelocityIntegrator(stParams	:= VelocityIntegratorParams);
			State			:= 1;
		1: 
			// Initialize Velocity Generator, fbSramp
			fbSrampVelocityProfile.VU_MAX	:= LREAL_TO_REAL(CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.MaxAcc);
			fbSrampVelocityProfile.VD_MAX	:= LREAL_TO_REAL(CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.MaxDcc * (-1));
			fbSrampVelocityProfile.A_UP		:= LREAL_TO_REAL(CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.Jerk);
			fbSrampVelocityProfile.A_DN		:= LREAL_TO_REAL(CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.Jerk * (-1));
	
			fbSrampVelocityProfile.LIMIT_HIGH	:= 1E38; 
			fbSrampVelocityProfile.LIMIT_LOW	:= -1E38;	
			
			// Initialize Velocity to Actual Velocity
			fbSrampVelocityProfile.X	:= BasicAxisCtrlPtr^.Output.monitor.ActVelocity;
			fbSrampVelocityProfile.SET	:= TRUE;
			fbSrampVelocityProfile();
			
			// Initialize Integrator for Position Generation
			VelocityIntegratorParams.fOutMaxLimit		:= 1E38;
			VelocityIntegratorParams.fOutMinLimit		:= -1E38;
			VelocityIntegratorParams.tCtrlCycleTime		:= TaskCycleTime;  
			VelocityIntegratorParams.tTaskCycleTime		:= TaskCycleTime;  
			VelocityIntegratorParams.tTi				:= T#1S;
			
			// Initialize Integrator with Actual Position
			fbVelocityIntegrator.fIn			:= fbSrampVelocityProfile.Y;
			fbVelocityIntegrator.fManSyncValue	:= BasicAxisCtrlPtr^.Output.monitor.ActPosition;
			fbVelocityIntegrator.eMode			:= eCTRL_MODE_ACTIVE;
			fbVelocityIntegrator.bSync			:= TRUE;
			fbVelocityIntegrator(stParams	:= VelocityIntegratorParams);
			
			IF fbVelocityIntegrator.fOut = fbVelocityIntegrator.fManSyncValue THEN
				fbSrampVelocityProfile.SET	:= FALSE;
				fbVelocityIntegrator.bSync	:= FALSE;
				
				
				{warning disable C0371}
				//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
				AxisRef.PlcToNc.ExtSetDirection	:= 1;
				AxisRef.PlcToNc.ExtSetPos		:= fbVelocityIntegrator.fOut;
				{warning restore C0371}
	
				// Enable External Set Position
				fbMC_ExtSetPointGenEnable.Execute	:= TRUE;
				
				State	:= 10;
			END_IF
			
			
		10: // Wait External Set Position Enabled
		 	IF fbMC_ExtSetPointGenEnable.Enabled THEN
				InitCompleted	:= TRUE;
				CyclicVel		:= TRUE ;
				State	:= 20;
				
			ELSIF fbMC_ExtSetPointGenEnable.Execute = FALSE THEN
				InitCompleted	:= FALSE;
				CyclicVel		:= FALSE;
				fbVelocityIntegrator.bSync		:= FALSE;
				fbVelocityIntegrator(stParams	:= VelocityIntegratorParams);
				State	:= 0; // Init
			END_IF
			
		20: // Cyclic Velocity Active
			// Limit Velocity
			IF ABS(CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.SetVel) > CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.MaxVelocity THEN
				IF CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.SetVel >= 0 THEN
					fbSrampVelocityProfile.X	:= LREAL_TO_REAL(CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.MaxVelocity);
				ELSE
					fbSrampVelocityProfile.X	:= LREAL_TO_REAL( -CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.MaxVelocity);
				END_IF
			ELSE
				fbSrampVelocityProfile.X	:= LREAL_TO_REAL(CyclicAxisCtrlPtr^.Input.Parameter.CyclicVel.SetVel);
			END_IF
			// Call Velocity Profiler
			fbSrampVelocityProfile();
			
			// Call Velocity Integrator
			fbVelocityIntegrator.fIn		:= fbSrampVelocityProfile.Y;
			fbVelocityIntegrator(stParams	:= VelocityIntegratorParams);
			
			// Copy Integrator Output to ExtSetPos
			{warning disable C0371}
			//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
			AxisRef.PlcToNc.ExtSetDirection	:= 1;
			AxisRef.PlcToNc.ExtSetPos		:= fbVelocityIntegrator.fOut;
			{warning restore C0371}
			
	END_CASE
	
	// Call External Set Position function block
	{warning disable C0371}
	//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
	fbMC_ExtSetPointGenEnable(Axis:= AxisRef); 
	{warning restore C0371}
	
	(* check if error occured *)
	IF IntErrorTrig_0.EDGEPOS(fbMC_ExtSetPointGenEnable.Error = TRUE) THEN
		// Add FB Error to ErrorHandler
		AddNCError(fbMC_ExtSetPointGenEnable.ErrorID, 'NC Error fbMC_ExtSetPointGenEnable ErrorID:');
		
		fbMC_ExtSetPointGenEnable.Execute	:= FALSE;
		CyclicVel	:= FALSE;
		AxisStep	:= CyclicAxis_STATE_ERROR;
	END_IF


	CyclicAxisCtrlPtr^.Output.Status.CyclicVel.Active	:= fbMC_ExtSetPointGenEnable.Enabled;
	CyclicAxisCtrlPtr^.Output.Status.CyclicVel.Busy		:= fbMC_ExtSetPointGenEnable.Busy;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetAll_MC_FB" Id="{b4ce4eb1-a6bc-0e21-2f6e-be4dc0c7df99}">
      <Declaration><![CDATA[METHOD PRIVATE ResetAll_MC_FB : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
		ResetAll_MC_FB := FALSE ;
				
		fbMC_ExtSetPointGenEnable.Execute:= FALSE;
		fbMC_ExtSetPointGenDisable.Execute:= FALSE;
		{warning disable C0371}
		//Warning: Access to VAR_IN_OUT <Var> declared in <POU> from external context <Method/Transition/Property>
		fbMC_ExtSetPointGenEnable(Axis:= AxisRef); 
		fbMC_ExtSetPointGenDisable(Axis:= AxisRef) ;
		{warning restore C0371}
		
		
		memset(ADR(CyclicAxisCtrlPtr^.Input.Command) ,0 ,SIZEOF(CyclicAxisCtrlPtr^.Input.Command));
		memset(ADR(CyclicAxisCtrlPtr^.Output.Status) ,0 ,SIZEOF(CyclicAxisCtrlPtr^.Output.Status));
		
		ResetAll_MC_FB := TRUE ;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CyclicAxis_FB">
      <LineId Id="548" Count="0" />
      <LineId Id="814" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="812" Count="1" />
      <LineId Id="550" Count="1" />
      <LineId Id="723" Count="0" />
      <LineId Id="719" Count="2" />
      <LineId Id="718" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="568" Count="1" />
      <LineId Id="571" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="575" Count="3" />
      <LineId Id="768" Count="0" />
      <LineId Id="580" Count="3" />
      <LineId Id="585" Count="1" />
      <LineId Id="588" Count="2" />
      <LineId Id="866" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="865" Count="0" />
      <LineId Id="594" Count="1" />
      <LineId Id="597" Count="9" />
      <LineId Id="608" Count="9" />
      <LineId Id="619" Count="5" />
      <LineId Id="860" Count="0" />
      <LineId Id="626" Count="8" />
      <LineId Id="636" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="640" Count="4" />
      <LineId Id="861" Count="0" />
      <LineId Id="647" Count="11" />
      <LineId Id="864" Count="0" />
      <LineId Id="661" Count="0" />
      <LineId Id="667" Count="2" />
      <LineId Id="862" Count="0" />
    </LineIds>
    <LineIds Name="CyclicAxis_FB.AddNCError">
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="16" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CyclicAxis_FB.CyclicDisable">
      <LineId Id="66" Count="22" />
      <LineId Id="122" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="118" Count="1" />
      <LineId Id="91" Count="2" />
      <LineId Id="108" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="120" Count="0" />
    </LineIds>
    <LineIds Name="CyclicAxis_FB.CyclicPos">
      <LineId Id="298" Count="0" />
      <LineId Id="478" Count="3" />
      <LineId Id="467" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="482" Count="2" />
      <LineId Id="580" Count="2" />
      <LineId Id="488" Count="1" />
      <LineId Id="624" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="583" Count="4" />
      <LineId Id="591" Count="3" />
      <LineId Id="621" Count="1" />
      <LineId Id="595" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="596" Count="5" />
      <LineId Id="605" Count="2" />
      <LineId Id="490" Count="0" />
      <LineId Id="625" Count="1" />
      <LineId Id="492" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="493" Count="3" />
      <LineId Id="509" Count="1" />
      <LineId Id="608" Count="0" />
      <LineId Id="511" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="515" Count="13" />
      <LineId Id="620" Count="0" />
      <LineId Id="529" Count="2" />
      <LineId Id="616" Count="0" />
      <LineId Id="628" Count="3" />
      <LineId Id="533" Count="3" />
      <LineId Id="650" Count="3" />
      <LineId Id="649" Count="0" />
      <LineId Id="654" Count="1" />
      <LineId Id="609" Count="0" />
      <LineId Id="547" Count="1" />
      <LineId Id="553" Count="26" />
      <LineId Id="468" Count="0" />
      <LineId Id="612" Count="0" />
    </LineIds>
    <LineIds Name="CyclicAxis_FB.CyclicPosTest">
      <LineId Id="6" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="58" Count="2" />
      <LineId Id="15" Count="2" />
      <LineId Id="24" Count="5" />
      <LineId Id="40" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="51" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CyclicAxis_FB.CyclicVel">
      <LineId Id="572" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="604" Count="0" />
      <LineId Id="606" Count="1" />
      <LineId Id="736" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="581" Count="1" />
      <LineId Id="740" Count="3" />
      <LineId Id="621" Count="0" />
      <LineId Id="632" Count="2" />
      <LineId Id="622" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="646" Count="0" />
      <LineId Id="641" Count="1" />
      <LineId Id="640" Count="0" />
      <LineId Id="643" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="609" Count="3" />
      <LineId Id="584" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="648" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="644" Count="1" />
      <LineId Id="636" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="649" Count="0" />
      <LineId Id="654" Count="0" />
      <LineId Id="653" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="672" Count="3" />
      <LineId Id="667" Count="0" />
      <LineId Id="676" Count="0" />
      <LineId Id="658" Count="0" />
      <LineId Id="656" Count="1" />
      <LineId Id="614" Count="0" />
      <LineId Id="651" Count="1" />
      <LineId Id="615" Count="0" />
      <LineId Id="585" Count="1" />
      <LineId Id="679" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="730" Count="0" />
      <LineId Id="735" Count="0" />
      <LineId Id="732" Count="2" />
      <LineId Id="738" Count="1" />
      <LineId Id="731" Count="0" />
      <LineId Id="678" Count="0" />
      <LineId Id="680" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="719" Count="0" />
      <LineId Id="683" Count="7" />
      <LineId Id="682" Count="0" />
      <LineId Id="720" Count="0" />
      <LineId Id="691" Count="1" />
      <LineId Id="721" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="693" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="695" Count="3" />
      <LineId Id="694" Count="0" />
      <LineId Id="700" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="592" Count="1" />
      <LineId Id="702" Count="2" />
      <LineId Id="594" Count="1" />
      <LineId Id="705" Count="2" />
      <LineId Id="709" Count="0" />
      <LineId Id="717" Count="0" />
      <LineId Id="711" Count="0" />
      <LineId Id="713" Count="1" />
      <LineId Id="596" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="715" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CyclicAxis_FB.ResetAll_MC_FB">
      <LineId Id="3" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_FileEntireReadAtomic" Id="{c5ac5605-3556-404e-b54b-39df9ba6a3a2}" SpecialFunc="None">
    <Declaration><![CDATA[
// Read entire fole contents as "atomic" operation encapsulating all required
// file access operations, so no file remain open after the operation completion
// The file data may be read to the buffer provided by calling application or if
// the buffer is not provided or is smaller than file size a dydnamic buffer is
// allocated and its address is returned over outrput parameters and
// it is on duty of the calling application to release the buffer via __DELETE
// when it will not be more needed
// See parameters desctription for more details
FUNCTION_BLOCK FB_FileEntireReadAtomic EXTENDS fb_BaseFb
VAR_INPUT
	sLogThreadName		: STRING := '';	// if not empty, this is thread name to report logs with
	sLogComment			: STRING := '';	// if not empty, is leading each log 
	bExecute	: BOOL;			// operation is started on rising edge of it
	sNetId		: T_AmsNetId := ''; // see FB_FileOpen for details
	sPathName	: T_MaxString;
	ePath		: E_OpenPath := PATH_GENERIC;	 // see FB_FileOpen for details
	tTimeout	: TIME := T#5S;
	
	pRdBufOpt	: POINTER TO BYTE;	// optional Buffer to read data to:
									// if not 0 and rdBufSize >= fileSize, use this bufer to read the data
									// otherwize a new buffer is allocated via _NEW, file is read there
									// and its address is returned in pDataBuf
									// see pDataBuf description for more detals
	rdBufSize	: UDINT := 0;		// see pRdBufOpt for details
END_VAR
VAR_OUTPUT
	bDone				: BOOL;				// becomes TRUE when completed
	bOpError			: BOOL;				// Error encountered and no valid data read
	fileSize			: UDINT;			// returns actual file size / read data size	
	pDataBuf			: POINTER TO BYTE;	// if bOpError is FALSE, this is pointer to the buffer containig entire file data.
											// if bNewRdBufAllocated is FALSE, pDataBuf equals to pRdBufOpt.
											// if bNewRdBufAllocated is TRUE, pDataBuf will point to a buffer
											// allocated via __NEW and newRdBufSize returns this buffer size, which is >= fileSize.
											// It is on duty of application to release the buffer via __DELETE thereafter
											// in order to avoid memory leak											
	bNewRdBufAllocated	: BOOL := FALSE;	// new buffer has been allocated for data and pDataBuf points to it
	newRdBufSize		: UDINT;			// Size of data buffer, which is >= fileSize; See pDataBuf for details 
END_VAR

VAR CONSTANT
	FILE_INACTIVE	: DINT := 0;
	FILE_OPEN		: DINT := 1;
	FILE_SEKK_END	: DINT := 11;
	FILE_SIZE		: DINT := 21;
	FILE_REWIND		: DINT := 31;
	FILE_READ		: DINT := 41;
	FILE_CLOSE		: DINT := 51;
END_VAR

VAR
	executeTrig: Trigger;

	hFile					: UINT := 0;
	FILE_Phase 				: DINT := 0;
	FILE_PhaseAfter_CLOSE	: DINT := 0;
	bOpExec					: BOOL := FALSE;;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF (executeTrig.EDGEPOS(bExecute)) THEN
	IF (sLogThreadName <>'') THEN
		SetLoggerCategoryName(sLogThreadName);
	END_IF
	IF (sLogComment <>'' AND RIGHT(sLogComment, 1) <> ':') THEN
		CONCAT(sLogComment, ': ');
	END_IF
	bOpError	:= FALSE;
	bDone		:= FALSE;
	IF (hFile = 0) THEN
		FILE_Phase	:= FILE_OPEN;
		bOpExec		:= TRUE;
	ELSE
		LogInfo_v2('%sClose the active fd=%d before opening file %s', hFile, sPathName, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0);
		FILE_Phase				:= FILE_CLOSE;
		FILE_PhaseAfter_CLOSE	:= FILE_OPEN;
		bOpExec					:= (FILE_Phase <> FILE_CLOSE);
	END_IF
END_IF

CASE FILE_Phase OF
	FILE_INACTIVE:
		bDone	:= TRUE;
		
	FILE_OPEN:
		FILE_PhaseAfter_CLOSE	:= FILE_INACTIVE;
		IF (FileOpen()) THEN
			bOpExec		:= TRUE;
			IF (NOT bOpError) THEN
				FILE_Phase	:= FILE_SEKK_END;
			ELSE
				FILE_Phase	:= FILE_INACTIVE;
			END_IF
		END_IF
	FILE_SEKK_END:
		IF (FileSeek(nSeekPos := 0, eOrigin := SEEK_END)) THEN
			bOpExec		:= TRUE;
			IF (NOT bOpError) THEN
				FILE_Phase	:= FILE_SIZE;
			ELSE
				FILE_Phase	:= FILE_CLOSE;
			END_IF
		END_IF
	FILE_SIZE:
		IF (FilePosGet(filePos => fileSize)) THEN
			bOpExec		:= TRUE;
			IF (NOT bOpError) THEN
				FILE_Phase	:= FILE_REWIND;
			ELSE
				FILE_Phase	:= FILE_CLOSE;
			END_IF
		END_IF
	FILE_REWIND:
		IF (FileSeek(nSeekPos := 0, eOrigin := SEEK_SET)) THEN
			bOpExec		:= TRUE;
			// if no error rewinding the file,
			// set/allocate buffer of appropruate size
			IF (NOT bOpError AND_THEN SetDataBuffer()) THEN
				FILE_Phase	:= FILE_READ;
			ELSE
				FILE_Phase	:= FILE_CLOSE;
			END_IF
		END_IF
	FILE_READ:
		IF (FileRead()) THEN
			bOpExec		:= TRUE;
			FILE_Phase	:= FILE_CLOSE;
			IF (bOpError AND bNewRdBufAllocated) THEN
				__DELETE(pDataBuf);
				LogInfo_v2('%sBecause of read error the just allocated buffer was released. File %s', sLogComment, sPathName, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0);
				bNewRdBufAllocated	:= FALSE;
				pDataBuf			:= 0;
				newRdBufSize		:= 0;
			END_IF
		END_IF
	FILE_CLOSE:
		IF (FileClose()) THEN
			bOpExec		:= TRUE;
			FILE_Phase	:= FILE_PhaseAfter_CLOSE;
		END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="FileClose" Id="{c0cbb12e-52a6-4a81-a7ae-2bb3e3dcbcdb}">
      <Declaration><![CDATA[METHOD PRIVATE FileClose : BOOL
VAR_INST
	fbFileClose	: FB_FileClose;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[FileClose := FALSE;

IF (bOpExec) THEN
	fbFileClose(	bExecute	:= FALSE
				, hFile 	:= hFile
				, sNetId	:= sNetId
				, tTimeout	:= T#1S
			);
END_IF

fbFileClose(bExecute := bOpExec);
bOpExec := FALSE;

IF (fbFileClose.bBusy) THEN
	RETURN;
END_IF

FileClose	:= TRUE;
hFile		:= 0;

IF (fbFileClose.bError) THEN
	bOpError := TRUE;
	LogError_v2('%sError 0x%x close fd=%d file %s', sLogComment, fbFileClose.nErrId, fbFileClose.hFile, sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0);
ELSE
	LogInfo_v2('%sDone close fd=%u file %s', sLogComment, fbFileClose.hFile, sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0); 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FileOpen" Id="{5798b336-36b4-44d8-9528-4399e10470c5}">
      <Declaration><![CDATA[METHOD PRIVATE FileOpen : BOOL
VAR_INST
	fbFileOpen		: FB_FileOpen;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[fileOpen := FALSE;

IF (bOpExec) THEN
	fbFileOpen(	bExecute	:= FALSE
				, ePath		:= ePath
				, nMode		:= FOPEN_MODEREAD OR FOPEN_MODEBINARY
				, sPathName	:= sPathName
				, sNetId	:= sNetId
				, tTimeout	:=  tTimeout
			);
END_IF

fbFileOpen(bExecute := bOpExec);
bOpExec := FALSE;

IF (fbFileOpen.bBusy) THEN
	RETURN;
END_IF

fileOpen := TRUE;

IF (fbFileOpen.bError) THEN
	bOpError := TRUE;
	LogError_v2('%sError 0x%x open file %s', sLogComment, fbFileOpen.nErrId, fbFileOpen.sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0); 
ELSE
	hFile := fbFileOpen.hFile;
	LogInfo_v2('%sDone open fd=%d file %s', sLogComment, fbFileOpen.hFile, fbFileOpen.sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0); 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FilePosGet" Id="{903ffe6f-dcce-436d-8ed2-b24eaf6f8c9e}">
      <Declaration><![CDATA[METHOD PRIVATE FilePosGet : BOOL
VAR_OUTPUT
	filePos		: UDINT;
END_VAR
VAR_INST
	fbFileTell	: FB_FileTell;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[FilePosGet := FALSE;

IF (bOpExec) THEN
	fbFileTell(	bExecute	:= FALSE
				, hFile 	:= hFile
				, sNetId	:= sNetId
				, tTimeout	:=  T#1S
			);
END_IF

fbFileTell(bExecute := bOpExec);
bOpExec := FALSE;

IF (fbFileTell.bBusy) THEN
	RETURN;
END_IF

FilePosGet := TRUE;

IF (fbFileTell.bError) THEN
	bOpError := TRUE;
	LogError_v2('%sError 0x%x get pos of file %s', sLogComment, fbFileTell.nErrId, sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0);
ELSE
	 filePos	:= DINT_TO_UDINT(fbFileTell.nSeekPos);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FileRead" Id="{b7889b55-e879-4f1b-b4b7-d3f340019968}">
      <Declaration><![CDATA[METHOD PRIVATE FileRead : BOOL
VAR_INST
	fbFileRead	: FB_FileRead;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[FileRead := FALSE;

IF (bOpExec) THEN
	fbFileRead(	bExecute	:= FALSE
				, hFile 	:= hFile
				, pReadBuff	:= pDataBuf                        
				, cbReadLen	:= FileSize                    
				, sNetId	:= sNetId
				, tTimeout	:= tTimeout
			);
END_IF

fbFileRead(bExecute := bOpExec);
bOpExec := FALSE;

IF (fbFileRead.bBusy) THEN
	RETURN;
END_IF

FileRead := TRUE;

IF (fbFileRead.bError OR fbFileRead.cbRead <> fbFileRead.cbReadLen) THEN
	bOpError := TRUE;
	LogError_v2('%sError 0x%x read rqst=%u act=%u bytes from file %s', sLogComment, fbFileRead.nErrId, fbFileRead.cbReadLen, fbFileRead.cbRead, sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0);
ELSE
	LogInfo_v2('%sDone read %u bytes from file %s', sLogComment, fbFileRead.cbRead, sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0); 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FileSeek" Id="{e6488c1e-207b-44ee-9a3f-4df01f15f538}">
      <Declaration><![CDATA[METHOD PRIVATE FileSeek : BOOL
VAR_INPUT
	nSeekPos	: DINT;
	eOrigin		: E_SeekOrigin:= SEEK_SET;
END_VAR
VAR_INST
	fbFileSeek	: FB_FileSeek;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[FileSeek := FALSE;

IF (bOpExec) THEN
	fbFileSeek(	bExecute	:= FALSE
				, hFile 	:= hFile
				, eOrigin	:= eOrigin
				, nSeekPos	:= nSeekPos
				, sNetId	:= sNetId
				, tTimeout	:=  T#1S
			);
END_IF

fbFileSeek(bExecute := bOpExec);
bOpExec := FALSE;

IF (fbFileSeek.bBusy) THEN
	RETURN;
END_IF

FileSeek := TRUE;

IF (fbFileSeek.bError) THEN
	bOpError := TRUE;
	LogError_v2('%sError 0x%x seek pos=%u origin=%u file %s', sLogComment, fbFileSeek.nErrId, fbFileSeek.nSeekPos, fbFileSeek.eOrigin, sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0); 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetDataBuffer" Id="{92e253b0-cced-4c9f-8df9-752d54fbfed8}">
      <Declaration><![CDATA[METHOD PRIVATE SetDataBuffer : BOOL
VAR
	bufSizeRound	: UDINT := 16#100000;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
SetDataBuffer	:= TRUE;

bNewRdBufAllocated	:= FALSE;
pDataBuf			:= pRdBufOpt;
newRdBufSize		:= 0;

IF (pDataBuf <> 0 AND rdBufSize >= fileSize) THEN
	RETURN;
END_IF

LogInfo_v2('%sAlloc buf to read the file (fSize=%u), since user buf is short (size=%u) or not set:  file %s', sLogComment, fileSize, rdBufSize, sPathName
			, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0);
			
// allocate buffer to read the file
newRdBufSize	:= (((fileSize+1) + (bufSizeRound-1)) / bufSizeRound) * bufSizeRound;
pDataBuf		:= __NEW (BYTE, newRdBufSize);
IF (pDataBuf = 0) THEN
	SetDataBuffer	:= FALSE;
	bOpError		:= TRUE;
	LogError_v2('%sError: mem alloc size=%u to read file %s', sLogComment, newRdBufSize, sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0);
	newRdBufSize	:= 0;
ELSE
	bNewRdBufAllocated	:= TRUE;
	LogInfo_v2('%sDone buf alloc size=%u to read file %s', sLogComment, newRdBufSize, sPathName
				, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0, DINT_0);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_FileEntireReadAtomic">
      <LineId Id="53" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="282" Count="2" />
      <LineId Id="130" Count="1" />
      <LineId Id="116" Count="0" />
      <LineId Id="119" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="69" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="73" Count="5" />
      <LineId Id="80" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="82" Count="5" />
      <LineId Id="91" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="222" Count="1" />
      <LineId Id="94" Count="8" />
      <LineId Id="106" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="108" Count="5" />
      <LineId Id="60" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileEntireReadAtomic.FileClose">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="28" Count="4" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="33" Count="2" />
      <LineId Id="82" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileEntireReadAtomic.FileOpen">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="6" />
      <LineId Id="9" Count="0" />
      <LineId Id="28" Count="4" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="33" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileEntireReadAtomic.FilePosGet">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="28" Count="4" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="33" Count="2" />
      <LineId Id="75" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileEntireReadAtomic.FileRead">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="59" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="28" Count="4" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="33" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileEntireReadAtomic.FileSeek">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="56" Count="4" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="28" Count="4" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="33" Count="2" />
      <LineId Id="70" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_FileEntireReadAtomic.SetDataBuffer">
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="34" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="47" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
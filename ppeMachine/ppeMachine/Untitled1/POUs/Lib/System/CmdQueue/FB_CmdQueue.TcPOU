<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_CmdQueue" Id="{801951d8-2c3b-091d-0922-37305643ba25}" SpecialFunc="None">
    <Declaration><![CDATA[
(*
	Add command by order, queue will scan only the head, this can be changed in the future.
	Element type type should be with a struct which contains DelayInfo_typ at start.  
*)

FUNCTION_BLOCK FB_CmdQueue
VAR_INPUT
	
	pBufferPool		: PVOID;
	BufferSize		: UDINT;
	ElementSize		: UDINT;
	rLogMsg 		: REFERENCE TO LogMsg ;
	Name : STRING := 'CmdQueue';			
	Position	:ULINT;
END_VAR
VAR_OUTPUT
END_VAR
VAR

	InitDone : BOOL;
	NumElements : UDINT;
	
	HeadIndex : UDINT; // index from 0
	TailIndex : UDINT; // index from 0
	UsedSize  : UDINT;
		
	MutexFlag : BOOL;
	
END_VAR

VAR_STAT
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT InitDone THEN
	mInit();
	InitDone := TRUE;
END_IF]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{19b77cf7-7b5f-4407-9bd1-dca703491f98}" />
    <Method Name="mAdd" Id="{8ca9d29a-d1d9-0829-1dfc-c7deb2c0d0e0}">
      <Declaration><![CDATA[METHOD PUBLIC mAdd : BOOL
VAR_INPUT
	pElement		: PVOID;
END_VAR

VAR
	NewElementIndex : UDINT;
	
	pDelayedCmdInfo : POINTER TO DelayInfo_typ;
END_VAR

VAR_STAT
    sRid : UDINT := 1111;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT TestAndSet(MutexFlag) THEN
	RETURN;
END_IF

IF mIsFull() THEN
	MutexFlag := FALSE;
	RETURN;
END_IF

IF mIsEmpty() THEN
	NewElementIndex := TailIndex;	
ELSE
	NewElementIndex := (TailIndex + 1) MOD NumElements;
END_IF

TailIndex := NewElementIndex;
UsedSize := UsedSize + 1;

pDelayedCmdInfo := pElement;
pDelayedCmdInfo^.GroupId := pDelayedCmdInfo^.RequestId := sRid;
sRid := sRid+1;

IF (pDelayedCmdInfo^.pExecuted <> 0) THEN
//	pDelayedCmdInfo^.pExecuted^ := FALSE;
END_IF

pDelayedCmdInfo^.Executed := FALSE;
pDelayedCmdInfo^.LagError := 0;

MEMCPY((pBufferPool + NewElementIndex * ElementSize), pElement, ElementSize);

MutexFlag := FALSE;

mAdd := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mCheck" Id="{654bd1c8-5c49-0bf7-3c5f-b3d473e2cdcd}">
      <Declaration><![CDATA[METHOD PUBLIC mCheck : PVOID // will return true only when next cmd will be ready (time/pos is up)
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT TestAndSet(MutexFlag) THEN
	RETURN;
END_IF

IF mIsEmpty() THEN
	MutexFlag := FALSE;
	RETURN;
END_IF

IF NOT mCheckHead() THEN
	MutexFlag := FALSE;
	RETURN;
END_IF


mCheck := pBufferPool + HeadIndex * ElementSize;

UsedSize := UsedSize - 1;
IF NOT mIsEmpty() THEN
	HeadIndex := (HeadIndex + 1) MOD NumElements;	
END_IF



MutexFlag := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mCheckHead" Id="{837a474c-a37b-0dd5-0cb7-c12946045866}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE mCheckHead : BOOL
VAR_INPUT
END_VAR
VAR
	pDelayedCmdInfo : POINTER TO DelayInfo_typ;
	LogStr : STRING;
END_VAR
VAR_INST
	CmdTimer : StopWatch;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mIsEmpty() THEN
	RETURN;
END_IF

pDelayedCmdInfo := (pBufferPool + (HeadIndex * ElementSize));


CASE pDelayedCmdInfo^.DelayType OF
			
	eDelayType.Immediate: 
		mCheckHead := TRUE;
	
	eDelayType.DelayByPos:
		
		IF (Position >= pDelayedCmdInfo^.DelayValue) THEN
			LogStr := CONCAT(Name, 'rid=');
			LogStr := CONCAT(LogStr , UDINT_TO_STRING(pDelayedCmdInfo^.RequestId));
			LogStr := CONCAT(LogStr , ', now=');
			LogStr := CONCAT(LogStr , ULINT_TO_STRING(Position));
			LogStr := CONCAT(LogStr , ', target=');
			LogStr := CONCAT(LogStr , ULINT_TO_STRING(pDelayedCmdInfo^.DelayValue));
			fnLogMsg(ADR(rLogMsg), LOG_INFO, LogStr,0,0,0);
			pDelayedCmdInfo^.LagError := ULINT_TO_UDINT(Position - pDelayedCmdInfo^.DelayValue);
			mCheckHead := TRUE;
		END_IF
		
	eDelayType.DelayByTimer: 
	
		IF NOT CmdTimer.IsActive() THEN
			CmdTimer.Start();
		END_IF
		
		IF TIME_TO_ULINT(CmdTimer.ElapledTime()) >= pDelayedCmdInfo^.DelayValue THEN
			mCheckHead := TRUE;
		END_IF
	
END_CASE

IF mCheckHead THEN
	pDelayedCmdInfo^.Executed := TRUE;
	IF (pDelayedCmdInfo^.pExecuted <> 0) THEN
		pDelayedCmdInfo^.pExecuted^ := TRUE;
	END_IF
	
	IF pDelayedCmdInfo^.DelayType <> eDelayType.DelayByTimer THEN
		CmdTimer.Stop();
	END_IF

END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="mClear" Id="{861d8040-955e-0d50-1662-d361a0515d7a}">
      <Declaration><![CDATA[METHOD PUBLIC mClear : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT TestAndSet(MutexFlag) THEN
	RETURN;
END_IF

TailIndex := HeadIndex := 0;
UsedSize := 0;

mClear := TRUE;

MutexFlag := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mFront" Id="{2c51ce45-73b6-42af-95d7-190a32b05a50}">
      <Declaration><![CDATA[METHOD PUBLIC mFront : PVOID // will return true only when next cmd will be ready (time/pos is up)
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT TestAndSet(MutexFlag) THEN
	RETURN;
END_IF

IF mIsEmpty() THEN
	MutexFlag := FALSE;
	RETURN;
END_IF

mFront := pBufferPool + HeadIndex * ElementSize;

MutexFlag := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mInit" Id="{f22b009f-5a76-05bd-3965-f47946690ddc}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE mInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
mClear();

NumElements := BufferSize/ElementSize;

mInit := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mIsEmpty" Id="{a0cf7736-9050-081a-036f-2210006d0b7f}">
      <Declaration><![CDATA[METHOD PUBLIC mIsEmpty : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mIsEmpty := (UsedSize = 0);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mIsFull" Id="{d81af924-5005-019b-3e1a-0893d1142726}">
      <Declaration><![CDATA[METHOD PUBLIC mIsFull : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mIsFull := (UsedSize >= NumElements);
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CmdQueue">
      <LineId Id="9" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdQueue.mAdd">
      <LineId Id="92" Count="5" />
      <LineId Id="148" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="103" Count="6" />
      <LineId Id="149" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="150" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="131" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdQueue.mCheck">
      <LineId Id="39" Count="5" />
      <LineId Id="62" Count="0" />
      <LineId Id="45" Count="3" />
      <LineId Id="63" Count="0" />
      <LineId Id="49" Count="4" />
      <LineId Id="67" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="55" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdQueue.mCheckHead">
      <LineId Id="59" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="47" Count="2" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="127" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="91" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="124" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdQueue.mClear">
      <LineId Id="15" Count="1" />
      <LineId Id="13" Count="1" />
      <LineId Id="6" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdQueue.mFront">
      <LineId Id="39" Count="5" />
      <LineId Id="62" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="52" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdQueue.mInit">
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdQueue.mIsEmpty">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdQueue.mIsFull">
      <LineId Id="8" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
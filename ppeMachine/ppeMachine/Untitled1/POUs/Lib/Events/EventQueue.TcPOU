<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="EventQueue" Id="{e457a2c8-e0cd-0fde-002a-0340784a6446}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EventQueue EXTENDS Queue
VAR_INPUT
END_VAR
VAR_OUTPUT
	{attribute 'OPC.UA.DA' := '1'}
    {attribute 'OPC.UA.DA.StructuredType' := '1'}
	ErrorEvent:EventReport_Typ;		
END_VAR
VAR
	{attribute 'OPC.UA.DA' := '0'}
	EventActiveFlag:BOOL;
	{attribute 'OPC.UA.DA' := '0'}
	InitDone:		BOOL;
	{attribute 'OPC.UA.DA' := '0'}
    SubsystemIDString:	STRING;

END_VAR
VAR_STAT
	{attribute 'OPC.UA.DA' := '0'}
	SequentialID:	DINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT InitDone THEN
	mInit();
	InitDone:= TRUE;
END_IF
IF THIS^.EntriesCount > 0 AND (THIS^.CheckQReadAvailable()) AND EventActiveFlag=FALSE  THEN
	EventActiveFlag:=TRUE;
    THIS^.Dequeue(ADR(ErrorEvent),SIZEOF(ErrorEvent));
	SequentialID := SequentialID + 1 ;
	IF SequentialID >= 16#7FFFFFFF THEN
		SequentialID := 0;
	END_IF

	ErrorEvent.SequentialID := SequentialID;
	SubsystemIDString := TO_STRING(ErrorEvent.SubsysID);
	LogError_v2('Send event %s from %s, FlowID %d, SequentialID %d ' ,
		ErrorEvent.EventID, SubsystemIDString, ErrorEvent.FlowID,SequentialID,dint_0,dint_0,dint_0,dint_0,dint_0,dint_0);
END_IF]]></ST>
    </Implementation>
    <Method Name="mAckEvent" Id="{325148e9-2bf4-0fae-0a25-9f6e39847a39}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD mAckEvent : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[EventActiveFlag:=FALSE;
MEMSET(ADR(ErrorEvent),0,SIZEOF(ErrorEvent));

mAckEvent := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mClearQueue" Id="{510c58b2-5aa5-4b63-9f92-12d1775c553d}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD mClearQueue : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ THIS^.Clear();
 LogError_v2('Clear EventQueue ' ,dint_0, dint_0, dint_0,dint_0,dint_0,dint_0,dint_0,dint_0,dint_0,dint_0);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mInit" Id="{88550928-d113-46f8-a064-a847369073bb}">
      <Declaration><![CDATA[METHOD mInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetLoggerCategoryName('Events');]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="EventQueue">
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="135" Count="4" />
      <LineId Id="113" Count="0" />
      <LineId Id="140" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="EventQueue.mAckEvent">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="EventQueue.mClearQueue">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="EventQueue.mInit">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
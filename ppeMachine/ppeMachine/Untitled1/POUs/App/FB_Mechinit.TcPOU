<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_Mechinit" Id="{45179798-8c3f-447d-8c4a-8963e3104817}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Mechinit EXTENDS CycleHandleFB
VAR_INPUT
	Ctrl_ref:			REFERENCE TO Ctrl_Typ;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	MethInitDone:		BOOL;
END_VAR

VAR CONSTANT
// States are global
		
	MECHINIT_INIT:							INT:=0;
	MECHINIT_SWITCH_ON:						INT:=10;
	MECHINIT_RUN_MASTER:					INT:=20;
	MECHINIT_GEAR_IN:						INT:=30;
	MECHINIT_DONE:							INT:=100;
END_VAR	]]></Declaration>
    <Implementation>
      <ST><![CDATA[	IF NOT MethInitDone THEN
		MethInitDone	:= Meth_Init();
	END_IF
	
	IF  THIS^.CMD.Pause = FALSE THEN
		
		//-----------------------------
		//State Machine
		//-----------------------------
		CASE THIS^.StepNo OF
			MECHINIT_INIT:
				IF THIS^.StepOneShotTrig THEN
					THIS^.Monitoring.StepMessage	:= 'Init: Start.';
					THIS^.Delay(IN:=FALSE);
				ELSIF Meth_Enable(TRUE) THEN
					THIS^.StepNo	:= 	MECHINIT_SWITCH_ON;
				END_IF
			
			MECHINIT_SWITCH_ON:
				IF THIS^.StepOneShotTrig THEN
					THIS^.Monitoring.StepMessage	:= 'Switch motor on.';
					THIS^.Delay(IN:=FALSE);
					Meth_SwitchOn(FALSE);
				ELSIF Meth_SwitchOn(TRUE) THEN
					THIS^.StepNo	:= 	MECHINIT_RUN_MASTER;
				END_IF	
				
			MECHINIT_RUN_MASTER:
				IF THIS^.StepOneShotTrig THEN
					THIS^.Monitoring.StepMessage	:= 'Start master';
					THIS^.Delay(IN:=FALSE);
					Meth_StartVmaster(FALSE);
				ELSIF Meth_StartVmaster(TRUE) THEN
					THIS^.StepNo	:= 	MECHINIT_GEAR_IN;
				END_IF				
				

			MECHINIT_GEAR_IN:
				IF THIS^.StepOneShotTrig THEN
					THIS^.Monitoring.StepMessage	:= 'Gear In';
					THIS^.Delay(IN:=FALSE);
					Meth_GearIn(FALSE);
				ELSIF Meth_GearIn(TRUE) THEN
					THIS^.StepNo	:= 	MECHINIT_DONE;
				END_IF	
				
				
			MECHINIT_DONE:
				IF THIS^.StepOneShotTrig THEN
					THIS^.Monitoring.StepMessage	:= 'mechinit cycle Done';
				ELSIF Meth_Done(TRUE) THEN
					THIS^.StepNo	:= 	MECHINIT_INIT;
				END_IF					
				
		END_CASE
	
	ELSE
		THIS^.Monitoring.StepMessage:= 'Pause';
		
		IF THIS^.Status.Fault = TRUE THEN
		//IF Meth_EmStop(TRUE) THEN
				THIS^.CMD.ResetCycle	:= TRUE;		// Reset the all state machine to start point
		//END_IF
			
		END_IF
		
	END_IF
	
	THIS^.Delay();
	THIS^.CH_Logic();
	
	// Reset Meth_EmStop when at Init State
	IF THIS^.Pause = FALSE THEN
		//Meth_EmStop(FALSE);
	END_IF					]]></ST>
    </Implementation>
    <Method Name="Meth_Done" Id="{a7b5a54f-c321-4b1c-b7ae-c1c5d5459d19}">
      <Declaration><![CDATA[METHOD PRIVATE Meth_Done : BOOL
VAR_INPUT
	Execute: 	BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

	//THIS^.Monitoring.StepMessage			:= 'Press 1 engage';
	//THIS^.Monitoring.Error_Text				:= 'Press 1 engage Fail';
	//THIS^.CMD.Deacivate_Sequence_Time_Out	:= TRUE;	// Disable time out to the all sequence
	//THIS^.CMD.DeactivateStepTimeOut			:= TRUE;	// Disable time out to the actual step
	//THIS^.Parameter.TimeOut					:= T#5S;

	THIS^.Status.Done		:= TRUE;
	THIS^.Status.Running	:= FALSE;									
	Meth_Done	:= TRUE;	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_Enable" Id="{d02e2caa-073e-4212-8302-a5caacdaf860}">
      <Declaration><![CDATA[METHOD PRIVATE Meth_Enable : BOOL
VAR_INPUT
	Execute: 	BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF THIS^.CMD.Start THEN
	
	THIS^.Monitoring.StepMessage			:= 'Start';
	THIS^.Monitoring.Error_Text				:= 'Start Fail';
	THIS^.CMD.Deacivate_Sequence_Time_Out	:= TRUE;	// Disable time out to the all sequence
	THIS^.CMD.DeactivateStepTimeOut			:= TRUE;	// Disable time out to the actual step
	THIS^.Parameter.TimeOut					:= T#0.5S;

	THIS^.CMD.Start			:= FALSE;
	THIS^.Status.Done		:= FALSE;
	THIS^.Status.Running	:= TRUE;
	
	// Reset Commands and Statuses												
	
	Meth_Enable	:= TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_GearIn" Id="{03ab5f7c-9a27-4239-a28a-13b70cfd59cc}">
      <Declaration><![CDATA[METHOD Meth_GearIn : BOOL
VAR_INPUT
	Execute: 	BOOL;
END_VAR
VAR_INST	
	ExecuteTrig: 	Trigger;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ExecuteTrig.EDGEPOS(Execute) THEN
	Meth_GearIn	:= FALSE;
	THIS^.SubStepNo:= 	1;	
END_IF

IF ExecuteTrig.EDGENEG(Execute) THEN
	Meth_GearIn	:=	FALSE;
END_IF

CASE THIS^.SubStepNo OF
	   
	1:
		THIS^.Monitoring.StepMessage:= 'Set GearInMultiMaster command';
		
		gWebAxes.UW_1.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.GearRatio1:=	0;

		
		gWebAxes.UW_1.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.Acceleration:= 	600000;
		gWebAxes.UW_1.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.Deceleration:= 	600000;
		gWebAxes.UW_1.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.Jerk:=			0;
		gWebAxes.UW_1.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.Options.AdvancedSlaveDynamics:= 	FALSE;
		
		gWebAxes.UW_1.Crtl.MultiAxis.Input.Command.GearInMultiMaster.StartSlave:=		TRUE;
				
								
		THIS^.SubStepNo	:= 2;		
			
	2:	
		THIS^.Monitoring.StepMessage:= 	'Wait for GearInMultiMaster done UW1' ;
							
		IF (gWebAxes.UW_1.Crtl.MultiAxis.Input.Command.GearInMultiMaster.StartSlave = FALSE) 
			AND (gWebAxes.UW_1.Crtl.MultiAxis.Output.Status.GearInMultiMaster.InGear = TRUE) THEN
			THIS^.SubStepNo:=	3;
		ELSIF 	gWebAxes.UW_1.Crtl.MultiAxis.Output.Status.GearInMultiMaster.InGear = TRUE THEN
			THIS^.SubStepNo:=	3;
		END_IF		


	3:
		THIS^.Monitoring.StepMessage:= 'Set GearInMultiMaster UW2 command';
		
		gWebAxes.UW_2.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.GearRatio1:=	0;

		
		gWebAxes.UW_2.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.Acceleration:= 	600000;
		gWebAxes.UW_2.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.Deceleration:= 	600000;
		gWebAxes.UW_2.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.Jerk:=			0;
		gWebAxes.UW_2.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.Options.AdvancedSlaveDynamics:= 	FALSE;
		
		gWebAxes.UW_2.Crtl.MultiAxis.Input.Command.GearInMultiMaster.StartSlave:=		TRUE;
				
								
		THIS^.SubStepNo	:= 4;		
			
	4:	
		THIS^.Monitoring.StepMessage:= 	'Wait for GearInMultiMaster done' ;
							
		IF (gWebAxes.UW_2.Crtl.MultiAxis.Input.Command.GearInMultiMaster.StartSlave = FALSE) 
			AND (gWebAxes.UW_2.Crtl.MultiAxis.Output.Status.GearInMultiMaster.InGear = TRUE) THEN
			THIS^.SubStepNo:=	0;
			Meth_GearIn:= 	TRUE;
		ELSIF gWebAxes.UW_2.Crtl.MultiAxis.Output.Status.GearInMultiMaster.InGear = TRUE THEN	
			THIS^.SubStepNo:=	0;
			Meth_GearIn:= 	TRUE;
		END_IF	

							
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_Init" Id="{5392863f-8e40-46d6-90d2-4f5b46866e43}">
      <Declaration><![CDATA[METHOD Meth_Init :BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//resets


Meth_Init:=TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_StartVmaster" Id="{f812e205-dcf6-40f1-b43f-2a81c2f34576}">
      <Declaration><![CDATA[METHOD Meth_StartVmaster : BOOL
VAR_INPUT
	Execute: 	BOOL;
END_VAR
VAR_INST	
	ExecuteTrig: 	Trigger;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF ExecuteTrig.EDGEPOS(Execute) THEN
	Meth_StartVmaster	:= FALSE;
	THIS^.SubStepNo:= 	1;	
END_IF

IF ExecuteTrig.EDGENEG(Execute) THEN
	Meth_StartVmaster	:=	FALSE;
END_IF


CASE THIS^.SubStepNo OF
	   
	1:
		THIS^.Monitoring.StepMessage	:= 'Set RunVel command to Master Tension';
		
			gWebAxes.UwVmaster.Crtl.Basic_axis.Input.Parameter.Acceleration	:= 100000; 
			gWebAxes.UwVmaster.Crtl.Basic_axis.Input.Parameter.Deceleration	:= 100000; 
			gWebAxes.UwVmaster.Crtl.Basic_axis.Input.Parameter.Velocity		:= 360000;//100000 
			gWebAxes.UwVmaster.Crtl.Basic_axis.Input.Parameter.Direction		:= MC_Positive_Direction; 		
				
			gWebAxes.UwVmaster.Crtl.Basic_axis.Input.Command.MoveVelocity		:= TRUE;
			THIS^.SubStepNo:= 	2;	

	2:	
		THIS^.Monitoring.StepMessage	:= 'Wait @ velocity from Master';
		IF (gWebAxes.UwVmaster.Crtl.Basic_axis.Output.Status.AxisStatus.ContinuousMotion = TRUE) THEN	
			Meth_StartVmaster:=TRUE;
			THIS^.SubStepNo:= 	0;				
		END_IF
								
END_CASE




]]></ST>
      </Implementation>
    </Method>
    <Method Name="Meth_SwitchOn" Id="{a122ecf0-6b0c-4f90-92e6-2b6c9d30b5f1}">
      <Declaration><![CDATA[METHOD Meth_SwitchOn : BOOL
VAR_INPUT
	Execute: 	BOOL;
END_VAR
VAR_INST
	ExecuteTrig: 	Trigger;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF ExecuteTrig.EDGEPOS(Execute) THEN
	Meth_SwitchOn:=	FALSE;
	THIS^.SubStepNo:= 	1;	
END_IF

IF ExecuteTrig.EDGENEG(Execute) THEN
	Meth_SwitchOn:=	FALSE;
END_IF

CASE THIS^.SubStepNo OF
	(* Power ON*)
	1:
		THIS^.Monitoring.StepMessage	:= 'Power On';								
		gWebAxes.UW_1.Crtl.Basic_axis.Input.Command.Power		:= TRUE;
		gWebAxes.UW_2.Crtl.Basic_axis.Input.Command.Power		:= TRUE;	
		gWebAxes.UwVmaster.Crtl.Basic_axis.Input.Command.Power	:= TRUE;
		
		THIS^.SubStepNo:= 2;		
	
	2:	
		THIS^.Monitoring.StepMessage:= 'Wait for standstill UW 1';
									
		IF gWebAxes.UW_1.Crtl.Basic_axis.Output.Status.AxisStatus.StandStill
		OR gWebAxes.UW_1.Crtl.Basic_axis.Output.Status.AxisStatus.SynchronizedMotion THEN
			THIS^.SubStepNo	:= 3 ;
		END_IF
		
	3:	
		THIS^.Monitoring.StepMessage:= 'Wait for standstill UW 2';
									
		IF gWebAxes.UW_2.Crtl.Basic_axis.Output.Status.AxisStatus.StandStill
		OR  gWebAxes.UW_2.Crtl.Basic_axis.Output.Status.AxisStatus.SynchronizedMotion THEN
			THIS^.SubStepNo	:= 4 ;
		END_IF		
		
	4:	
		THIS^.Monitoring.StepMessage:= 'Wait for standstill from master';
									
		IF gWebAxes.UwVmaster.Crtl.Basic_axis.Output.Status.AxisStatus.StandStill
		OR  gWebAxes.UwVmaster.Crtl.Basic_axis.Output.Status.AxisStatus.ContinuousMotion THEN
			THIS^.SubStepNo	:= 10 ;
			Meth_SwitchOn	:= TRUE;
		END_IF
							
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Mechinit">
      <LineId Id="194" Count="73" />
      <LineId Id="43" Count="0" />
    </LineIds>
    <LineIds Name="FB_Mechinit.Meth_Done">
      <LineId Id="34" Count="7" />
      <LineId Id="53" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Mechinit.Meth_Enable">
      <LineId Id="24" Count="1" />
      <LineId Id="6" Count="12" />
      <LineId Id="21" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Mechinit.Meth_GearIn">
      <LineId Id="71" Count="6" />
      <LineId Id="12" Count="7" />
      <LineId Id="22" Count="17" />
      <LineId Id="78" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="48" Count="22" />
      <LineId Id="80" Count="2" />
      <LineId Id="46" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Mechinit.Meth_Init">
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="FB_Mechinit.Meth_StartVmaster">
      <LineId Id="8" Count="0" />
      <LineId Id="16" Count="29" />
      <LineId Id="13" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Mechinit.Meth_SwitchOn">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="15" />
      <LineId Id="45" Count="1" />
      <LineId Id="26" Count="5" />
      <LineId Id="54" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="3" />
      <LineId Id="56" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="34" Count="4" />
      <LineId Id="55" Count="0" />
      <LineId Id="39" Count="3" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
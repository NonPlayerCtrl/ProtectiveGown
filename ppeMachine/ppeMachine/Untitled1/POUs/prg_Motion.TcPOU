<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="prg_Motion" Id="{a52ed8ca-ef6b-4dd0-9063-38fcba086762}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM prg_Motion
VAR
	UW_1_Diameter:	Dimeter_Typ;
	UW_2_Diameter:	Dimeter_Typ;
	UW_1_Data	:WinderParam_Typ;
	UW_2_Data	:WinderParam_Typ;
	
	Init:BOOL :=TRUE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Init THEN
	Init:=FALSE;
	ACT_init();
END_IF

ACT_DancerCtrl_1();
ACT_DancerCtrl_2();
ACT_Diameter();
ACT_Tension_1();
ACT_Tension_2();
ACT_GearRatio();
ACT_MotionFBcall();
							

]]></ST>
    </Implementation>
    <Action Name="ACT_DancerCtrl_1" Id="{31e4e542-a4d8-42f3-9be3-b1afc5309db7}">
      <Implementation>
        <ST><![CDATA[////////////UW1
UW_1_Data.Dancer.stLutDataParam.eLutMode	:= E_LutMode.eAnalogToPhisical;

UW_1_Data.Dancer.stLutDataParam.arrAnalog[0]		:= -3700;//-30000;
UW_1_Data.Dancer.stLutDataParam.arrPhisical[0]		:= 0;//11000;	//[Dummy]
UW_1_Data.Dancer.stLutDataParam.arrAnalog[1]		:= 12700;//-11500;
UW_1_Data.Dancer.stLutDataParam.arrPhisical[1]		:= 300;//10000;	//[gram]	
UW_1_Data.Dancer.stLutDataParam.arrAnalog[2]		:= 35500;//-600;
UW_1_Data.Dancer.stLutDataParam.arrPhisical[2]		:= 700;//0;	//[gram]	
UW_1_Data.Dancer.stLutDataParam.arrAnalog[3]		:= 65535;//20000;
UW_1_Data.Dancer.stLutDataParam.arrPhisical[3]		:= 1500;//2000;	//[Dummy]

UW_1_Data.Dancer.DancerPosition_Unfiltred
			:= LookUP_Table(RawValue:=gMachineCtrl.IO.In.UW_1_DancerPosition,pDataParam:= ADR(UW_1_Data.Dancer.stLutDataParam));	

UW_1_Data.Dancer.DancerLPF(IN:=UW_1_Data.Dancer.DancerPosition_Unfiltred,out=> UW_1_Data.Dancer.DancerPosition_filtred);

UW_1_Data.Dancer.fb_DancerCtrl.Enable 			:= gMachineCtrl.Parameters.UW_1_Param.EnableDancer;
UW_1_Data.Dancer.fb_DancerCtrl.DancerFull		:= gMachineCtrl.IO.In.UW_1_DancerFull;
UW_1_Data.Dancer.fb_DancerCtrl.DancerPosition	:= UW_1_Data.Dancer.DancerPosition_filtred;
UW_1_Data.Dancer.fb_DancerCtrl.Ctrl_Type		:= E_DancerCtrlTyp.DIGITAL;
UW_1_Data.Dancer.fb_DancerCtrl();
//Connect to jog cmd
gMachineCtrl.Cmd.UW_1_Cmd.JogDancerFill	:= UW_1_Data.Dancer.fb_DancerCtrl.Jog;
gMachineCtrl.Status.UW_1_DancerFull		:= UW_1_Data.Dancer.fb_DancerCtrl.dancerFullStatus;

IF gMachineCtrl.Cmd.UW_1_Cmd.JogDancerFill  THEN
	UW_1_Data.Dancer.DancerGear := gMachineCtrl.Parameters.DancerFillSpeed/360000;
ELSE
	UW_1_Data.Dancer.DancerGear := 0;
END_IF



]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_DancerCtrl_2" Id="{c2dabe53-44ca-418b-bb16-098a728d8c36}">
      <Implementation>
        <ST><![CDATA[////////////UW1
UW_2_Data.Dancer.stLutDataParam.eLutMode	:= E_LutMode.eAnalogToPhisical;

UW_2_Data.Dancer.stLutDataParam.arrAnalog[0]		:= -3700;//-30000;
UW_2_Data.Dancer.stLutDataParam.arrPhisical[0]		:= 0;//11000;	//[Dummy]
UW_2_Data.Dancer.stLutDataParam.arrAnalog[1]		:= 12700;//-11500;
UW_2_Data.Dancer.stLutDataParam.arrPhisical[1]		:= 300;//10000;	//[gram]	
UW_2_Data.Dancer.stLutDataParam.arrAnalog[2]		:= 35500;//-600;
UW_2_Data.Dancer.stLutDataParam.arrPhisical[2]		:= 700;//0;	//[gram]	
UW_2_Data.Dancer.stLutDataParam.arrAnalog[3]		:= 65535;//20000;
UW_2_Data.Dancer.stLutDataParam.arrPhisical[3]		:= 1500;//2000;	//[Dummy]

UW_2_Data.Dancer.DancerPosition_Unfiltred
			:= LookUP_Table(RawValue:=gMachineCtrl.IO.In.UW_2_DancerPosition,pDataParam:= ADR(UW_2_Data.Dancer.stLutDataParam));	

UW_2_Data.Dancer.DancerLPF(IN:=UW_2_Data.Dancer.DancerPosition_Unfiltred,out=> UW_2_Data.Dancer.DancerPosition_filtred);

UW_2_Data.Dancer.fb_DancerCtrl.Enable 			:= gMachineCtrl.Parameters.UW_2_Param.EnableDancer;
UW_2_Data.Dancer.fb_DancerCtrl.DancerFull		:= gMachineCtrl.IO.In.UW_2_DancerFull;
UW_2_Data.Dancer.fb_DancerCtrl.DancerPosition	:= UW_2_Data.Dancer.DancerPosition_filtred;
UW_2_Data.Dancer.fb_DancerCtrl.Ctrl_Type		:= E_DancerCtrlTyp.DIGITAL;
UW_2_Data.Dancer.fb_DancerCtrl();
//Connect to jog cmd
gMachineCtrl.Cmd.UW_2_Cmd.JogDancerFill	:= UW_2_Data.Dancer.fb_DancerCtrl.Jog;
gMachineCtrl.Status.UW_2_DancerFull		:= UW_2_Data.Dancer.fb_DancerCtrl.dancerFullStatus;

IF gMachineCtrl.Cmd.UW_2_Cmd.JogDancerFill  THEN
	UW_2_Data.Dancer.DancerGear := gMachineCtrl.Parameters.DancerFillSpeed/360000;
ELSE
	UW_2_Data.Dancer.DancerGear := 0;
END_IF



]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Diameter" Id="{3d5d9ec3-fe1d-49cd-964f-7e41b925071b}">
      <Implementation>
        <ST><![CDATA[
////////////UW1
UW_1_Diameter.stLutDataParam.eLutMode	:= E_LutMode.eAnalogToPhisical;

UW_1_Diameter.stLutDataParam.arrAnalog[0]		:= 0;
UW_1_Diameter.stLutDataParam.arrPhisical[0]		:= 200;	//[mm]
UW_1_Diameter.stLutDataParam.arrAnalog[1]		:= 2600;
UW_1_Diameter.stLutDataParam.arrPhisical[1]		:= 355;	//[mm]	
UW_1_Diameter.stLutDataParam.arrAnalog[2]		:= 7500;
UW_1_Diameter.stLutDataParam.arrPhisical[2]		:= 97;	//[mm]	
UW_1_Diameter.stLutDataParam.arrAnalog[3]		:= 32000;
UW_1_Diameter.stLutDataParam.arrPhisical[3]		:= 0;	

UW_1_Diameter.Diameter_Unfiltred 
			:= LookUP_Table(RawValue:=gMachineCtrl.IO.In.UW_1_Diameter,pDataParam:= ADR(UW_1_Diameter.stLutDataParam));	
			
//UW_1_Diameter.DiameterLPF.IN := UW_1_Diameter.Diameter_Unfiltred;

IF gMachineCtrl.Parameters.UW_1_Param.ForceDiameter THEN
	UW_1_Diameter.Diameter_filtred := gMachineCtrl.Parameters.UW_1_Param.ForcedDiameter;
ELSE
	UW_1_Diameter.DiameterLPF(IN:=UW_1_Diameter.Diameter_Unfiltred,out=> UW_1_Diameter.Diameter_filtred);	
END_IF	

///////////UW2
UW_2_Diameter.stLutDataParam.eLutMode	:= E_LutMode.eAnalogToPhisical;

UW_2_Diameter.stLutDataParam.arrAnalog[0]		:= 0;
UW_2_Diameter.stLutDataParam.arrPhisical[0]		:= 200;	//[mm]
UW_2_Diameter.stLutDataParam.arrAnalog[1]		:= 2600;
UW_2_Diameter.stLutDataParam.arrPhisical[1]		:= 355;	//[mm]	
UW_2_Diameter.stLutDataParam.arrAnalog[2]		:= 7500;
UW_2_Diameter.stLutDataParam.arrPhisical[2]		:= 97;	//[mm]	
UW_2_Diameter.stLutDataParam.arrAnalog[3]		:= 32000;
UW_2_Diameter.stLutDataParam.arrPhisical[3]		:= 0;	

UW_2_Diameter.Diameter_Unfiltred 
			:= LookUP_Table(RawValue:=gMachineCtrl.IO.In.UW_2_Diameter,pDataParam:= ADR(UW_2_Diameter.stLutDataParam));	
			
IF gMachineCtrl.Parameters.UW_2_Param.ForceDiameter THEN
	UW_2_Diameter.Diameter_filtred := gMachineCtrl.Parameters.UW_2_Param.ForcedDiameter;
ELSE
	UW_2_Diameter.DiameterLPF(IN:=UW_2_Diameter.Diameter_Unfiltred,out=> UW_2_Diameter.Diameter_filtred);	
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_GearRatio" Id="{c19c6a93-f5bc-48e1-8b97-7a846a39d35b}">
      <Implementation>
        <ST><![CDATA[

	IF (UW_1_Diameter.Diameter_filtred  > 0) THEN																		
	//	UW_1_Data.CalculatedRotSpeed	:= (gMachineCtrl.Parameters.WebLinarSpeed * 360)/ (UW_1_Diameter.Diameter_filtred * PI);
		IF gMachineCtrl.Cmd.UW_1_Cmd.JogFwd THEN
			UW_1_Data.CalculatedGear	:= (gMachineCtrl.Parameters.WebLinarSpeed )/ (UW_1_Diameter.Diameter_filtred * PI);
		ELSIF gMachineCtrl.Cmd.UW_1_Cmd.JogSFwdSlow THEN
			UW_1_Data.CalculatedGear	:= (gMachineCtrl.Parameters.WebLinarSpeedSlow )/ (UW_1_Diameter.Diameter_filtred * PI);
		ELSIF gMachineCtrl.Cmd.UW_1_Cmd.JogBack THEN
			UW_1_Data.CalculatedGear	:= (-gMachineCtrl.Parameters.WebLinarSpeed )/ (UW_1_Diameter.Diameter_filtred * PI);
		ELSIF gMachineCtrl.Cmd.UW_1_Cmd.JogBackdSlow THEN
			UW_1_Data.CalculatedGear	:= (-gMachineCtrl.Parameters.WebLinarSpeedSlow )/ (UW_1_Diameter.Diameter_filtred * PI);			
		ELSE
			UW_1_Data.CalculatedGear	:= 0;
		END_IF
	END_IF
	
	gWebAxes.UW_1.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.GearRatio1:=UW_1_Data.CalculatedGear;
	gWebAxes.UW_1.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.GearRatio2:=UW_1_Data.Tension.TensionGear;
	gWebAxes.UW_1.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.GearRatio3:=UW_1_Data.Dancer.DancerGear;
	
	
	IF (UW_2_Diameter.Diameter_filtred  > 0) THEN																		
	//	UW_1_Data.CalculatedRotSpeed	:= (gMachineCtrl.Parameters.WebLinarSpeed * 360)/ (UW_1_Diameter.Diameter_filtred * PI);
		IF gMachineCtrl.Cmd.UW_2_Cmd.JogFwd THEN
			UW_2_Data.CalculatedGear	:= (gMachineCtrl.Parameters.WebLinarSpeed )/ (UW_2_Diameter.Diameter_filtred * PI);
		ELSIF gMachineCtrl.Cmd.UW_2_Cmd.JogSFwdSlow THEN
			UW_2_Data.CalculatedGear	:= (gMachineCtrl.Parameters.WebLinarSpeedSlow )/ (UW_2_Diameter.Diameter_filtred * PI);
		ELSIF gMachineCtrl.Cmd.UW_2_Cmd.JogBack THEN
			UW_2_Data.CalculatedGear	:= (-gMachineCtrl.Parameters.WebLinarSpeed )/ (UW_2_Diameter.Diameter_filtred * PI);
		ELSIF gMachineCtrl.Cmd.UW_2_Cmd.JogBackdSlow THEN
			UW_2_Data.CalculatedGear	:= (-gMachineCtrl.Parameters.WebLinarSpeedSlow )/ (UW_2_Diameter.Diameter_filtred * PI);			
		ELSE
			UW_2_Data.CalculatedGear	:= 0;
		END_IF
	END_IF
	
	gWebAxes.UW_2.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.GearRatio1:=UW_2_Data.CalculatedGear;	
	gWebAxes.UW_2.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.GearRatio2:=UW_2_Data.Tension.TensionGear;
	gWebAxes.UW_2.Crtl.MultiAxis.Input.Parameter.GearInMultiMaster.GearRatio3:=UW_2_Data.Dancer.DancerGear;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_init" Id="{f9e29848-7a17-47c2-a29a-0ddaf90ded4d}">
      <Implementation>
        <ST><![CDATA[UW_1_Diameter.DiameterLPF.Fc:=1;
UW_2_Diameter.DiameterLPF.Fc:=1;


UW_1_Data.Tension.LoadCellLPF.Fc:=15;
UW_2_Data.Tension.LoadCellLPF.Fc:=15;

UW_1_Data.Dancer.DancerLPF.Fc:=1;
UW_2_Data.Dancer.DancerLPF.Fc:=1;


// UW1 Tension loop
UW_1_Data.Tension.FB_TensionLoop.Kp	:= 0.1;
UW_1_Data.Tension.FB_TensionLoop.Tn	:= T#0MS;
UW_1_Data.Tension.FB_TensionLoop.Td	:= T#0MS;
UW_1_Data.Tension.FB_TensionLoop.PidOutMaxValue	:= 1000;
UW_1_Data.Tension.FB_TensionLoop.PidOutMinValue	:= -1000;
UW_1_Data.Tension.FB_TensionLoop.Hold			:= FALSE;

// UW2 Tension loop
UW_2_Data.Tension.FB_TensionLoop.Kp	:= 0.1;
UW_2_Data.Tension.FB_TensionLoop.Tn	:= T#0MS;
UW_2_Data.Tension.FB_TensionLoop.Td	:= T#0MS;
UW_2_Data.Tension.FB_TensionLoop.PidOutMaxValue	:= 1000;
UW_2_Data.Tension.FB_TensionLoop.PidOutMinValue	:= -1000;
UW_2_Data.Tension.FB_TensionLoop.Hold			:= FALSE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_MotionFBcall" Id="{1e9c9faa-2849-4f07-94d6-df12b1ab7505}">
      <Implementation>
        <ST><![CDATA[

	UW_1_AxisFB(AxisCtrlPtr:=ADR(gWebAxes.UW_1.Crtl.Basic_axis),AxisRef:= gWebAxes.UW_1.Ref);
	
	UW_1_MultiAxisFB(AxisRef := gWebAxes.UW_1.Ref ,MasterRef := gWebAxes.UwVmaster.Ref,
							MasterRef2 := gWebAxes.UwVmaster.Ref,MasterRef3 := gWebAxes.UwVmaster.Ref, MasterRef4 := gWebAxes.UwVmaster.Ref,
							BasicAxisCtrlPtr := ADR(gWebAxes.UW_1.Crtl.Basic_axis), 
							MultiAxisCtrlPtr := ADR(gWebAxes.UW_1.Crtl.MultiAxis));
	
	UW_2_AxisFB(AxisCtrlPtr:=ADR(gWebAxes.UW_2.Crtl.Basic_axis),AxisRef:= gWebAxes.UW_2.Ref);
	
	UW_2_MultiAxisFB(AxisRef := gWebAxes.UW_2.Ref ,MasterRef := gWebAxes.UwVmaster.Ref,
							MasterRef2 := gWebAxes.UwVmaster.Ref,MasterRef3 := gWebAxes.UwVmaster.Ref, MasterRef4 := gWebAxes.UwVmaster.Ref,
							BasicAxisCtrlPtr := ADR(gWebAxes.UW_2.Crtl.Basic_axis), 
							MultiAxisCtrlPtr := ADR(gWebAxes.UW_2.Crtl.MultiAxis));

							
	Output_AxisFB(AxisCtrlPtr:=ADR(gWebAxes.Output.Crtl.Basic_axis),AxisRef:= gWebAxes.Output.Ref);
	

						
	UwVmaster_AxisFB(AxisCtrlPtr:=ADR(gWebAxes.UwVmaster.Crtl.Basic_axis),AxisRef:= gWebAxes.UwVmaster.Ref);	]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Tension_1" Id="{302f6f97-a189-4e01-89de-62cb0664ed8e}">
      <Implementation>
        <ST><![CDATA[
////////////UW1
UW_1_Data.Tension.stLutDataParam.eLutMode	:= E_LutMode.eAnalogToPhisical;


UW_1_Data.Tension.stLutDataParam.arrAnalog[0]		:= -3700;//-30000;
UW_1_Data.Tension.stLutDataParam.arrPhisical[0]		:= 0;//11000;	//[Dummy]
UW_1_Data.Tension.stLutDataParam.arrAnalog[1]		:= 12700;//-11500;
UW_1_Data.Tension.stLutDataParam.arrPhisical[1]		:= 300;//10000;	//[gram]	
UW_1_Data.Tension.stLutDataParam.arrAnalog[2]		:= 35500;//-600;
UW_1_Data.Tension.stLutDataParam.arrPhisical[2]		:= 700;//0;	//[gram]	
UW_1_Data.Tension.stLutDataParam.arrAnalog[3]		:= 65535;//20000;
UW_1_Data.Tension.stLutDataParam.arrPhisical[3]		:= 1500;//2000;	//[Dummy]


UW_1_Data.Tension.Tension_Unfiltred
			:= LookUP_Table(RawValue:=gMachineCtrl.IO.In.UW_1_LoacCell,pDataParam:= ADR(UW_1_Data.Tension.stLutDataParam));	

UW_1_Data.Tension.LoadCellLPF(IN:=UW_1_Data.Tension.Tension_Unfiltred,out=> UW_1_Data.Tension.Tension_filtred);	
	
UW_1_Data.Tension.FB_TensionLoop.Kp			:= gMachineCtrl.Parameters.UW_1_Param.kp;
UW_1_Data.Tension.FB_TensionLoop.Tn			:= gMachineCtrl.Parameters.UW_1_Param.TN;
UW_1_Data.Tension.FB_TensionLoop.Enable			:= gMachineCtrl.Parameters.UW_1_Param.EnableTension;  
UW_1_Data.Tension.FB_TensionLoop.SetTension		:= gMachineCtrl.Parameters.UW_1_Param.SetTension;
UW_1_Data.Tension.FB_TensionLoop.ActTension		:= UW_1_Data.Tension.Tension_filtred;
UW_1_Data.Tension.FB_TensionLoop.Invert			:= TRUE;
UW_1_Data.Tension.FB_TensionLoop();

IF (UW_1_Diameter.Diameter_filtred  > 0) THEN
	UW_1_Data.Tension.TensionGear	:= (UW_1_Data.Tension.FB_TensionLoop.CorrectionSpeed )/ (UW_1_Diameter.Diameter_filtred * PI);
ELSE
	UW_1_Data.Tension.TensionGear	:=0;
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Tension_2" Id="{a5ed9392-0b17-48e1-9178-3a4b6b0150b1}">
      <Implementation>
        <ST><![CDATA[
////////////UW2
UW_2_Data.Tension.stLutDataParam.eLutMode	:= E_LutMode.eAnalogToPhisical;


UW_2_Data.Tension.stLutDataParam.arrAnalog[0]		:= -5000;//-30000;
UW_2_Data.Tension.stLutDataParam.arrPhisical[0]		:= 0;//11000;	//[Dummy]
UW_2_Data.Tension.stLutDataParam.arrAnalog[1]		:= 6000;//-11500;
UW_2_Data.Tension.stLutDataParam.arrPhisical[1]		:= 300;//10000;	//[gram]	
UW_2_Data.Tension.stLutDataParam.arrAnalog[2]		:= 20000;//-600;
UW_2_Data.Tension.stLutDataParam.arrPhisical[2]		:= 700;//0;	//[gram]	
UW_2_Data.Tension.stLutDataParam.arrAnalog[3]		:= 65535;//20000;
UW_2_Data.Tension.stLutDataParam.arrPhisical[3]		:= 1500;//2000;	//[Dummy]


UW_2_Data.Tension.Tension_Unfiltred
			:= LookUP_Table(RawValue:=gMachineCtrl.IO.In.UW_2_LoacCell,pDataParam:= ADR(UW_2_Data.Tension.stLutDataParam));	

UW_2_Data.Tension.LoadCellLPF(IN:=UW_2_Data.Tension.Tension_Unfiltred,out=> UW_2_Data.Tension.Tension_filtred);	
	
UW_2_Data.Tension.FB_TensionLoop.Kp			:= gMachineCtrl.Parameters.UW_2_Param.kp;
UW_2_Data.Tension.FB_TensionLoop.Tn			:= gMachineCtrl.Parameters.UW_2_Param.TN;
UW_2_Data.Tension.FB_TensionLoop.Enable			:= gMachineCtrl.Parameters.UW_2_Param.EnableTension;  
UW_2_Data.Tension.FB_TensionLoop.SetTension		:= gMachineCtrl.Parameters.UW_2_Param.SetTension;
UW_2_Data.Tension.FB_TensionLoop.ActTension		:= UW_2_Data.Tension.Tension_filtred;
UW_2_Data.Tension.FB_TensionLoop.Invert			:= TRUE;
UW_2_Data.Tension.FB_TensionLoop();

IF (UW_2_Diameter.Diameter_filtred  > 0) THEN
	UW_2_Data.Tension.TensionGear	:= (UW_2_Data.Tension.FB_TensionLoop.CorrectionSpeed )/ (UW_2_Diameter.Diameter_filtred * PI);
ELSE
	UW_2_Data.Tension.TensionGear	:= 0;
END_IF

]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="prg_Motion">
      <LineId Id="82" Count="5" />
      <LineId Id="95" Count="0" />
      <LineId Id="88" Count="6" />
      <LineId Id="70" Count="0" />
    </LineIds>
    <LineIds Name="prg_Motion.ACT_DancerCtrl_1">
      <LineId Id="15" Count="1" />
      <LineId Id="18" Count="8" />
      <LineId Id="28" Count="3" />
      <LineId Id="13" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="35" Count="2" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="prg_Motion.ACT_DancerCtrl_2">
      <LineId Id="15" Count="1" />
      <LineId Id="18" Count="8" />
      <LineId Id="28" Count="3" />
      <LineId Id="13" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="35" Count="2" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="prg_Motion.ACT_Diameter">
      <LineId Id="2" Count="9" />
      <LineId Id="13" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="3" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="2" />
      <LineId Id="39" Count="0" />
      <LineId Id="21" Count="15" />
      <LineId Id="43" Count="3" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="prg_Motion.ACT_GearRatio">
      <LineId Id="2" Count="1" />
      <LineId Id="5" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="4" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="23" Count="1" />
      <LineId Id="26" Count="14" />
      <LineId Id="25" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="prg_Motion.ACT_init">
      <LineId Id="1" Count="1" />
      <LineId Id="4" Count="1" />
      <LineId Id="3" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="5" />
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="6" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="prg_Motion.ACT_MotionFBcall">
      <LineId Id="2" Count="14" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="prg_Motion.ACT_Tension_1">
      <LineId Id="2" Count="2" />
      <LineId Id="47" Count="1" />
      <LineId Id="50" Count="6" />
      <LineId Id="49" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="76" Count="4" />
      <LineId Id="58" Count="0" />
      <LineId Id="82" Count="4" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="prg_Motion.ACT_Tension_2">
      <LineId Id="2" Count="0" />
      <LineId Id="85" Count="16" />
      <LineId Id="42" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="76" Count="4" />
      <LineId Id="58" Count="0" />
      <LineId Id="82" Count="2" />
      <LineId Id="102" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>